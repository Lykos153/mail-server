# This file was @generated by cargo2nix 0.11.0.
# It is not intended to be manually edited.

args@{
  release ? true,
  rootFeatures ? [
    "mail-server/default"
    "common/default"
    "directory/default"
    "jmap_proto/default"
    "store/default"
    "nlp/default"
    "trc/default"
    "event_macro/default"
    "utils/default"
    "proc_macros/default"
    "imap_proto/default"
    "imap/default"
    "jmap/default"
    "smtp/default"
    "managesieve/default"
    "pop3/default"
    "stalwart-cli/default"
    "tests/default"
  ],
  rustPackages,
  buildRustPackages,
  hostPlatform,
  hostPlatformCpu ? null,
  hostPlatformFeatures ? [],
  target ? null,
  codegenOpts ? null,
  profileOpts ? null,
  cargoUnstableFlags ? null,
  rustcLinkFlags ? null,
  rustcBuildFlags ? null,
  mkRustCrate,
  rustLib,
  lib,
  workspaceSrc,
  ignoreLockHash,
}:
let
  nixifiedLockHash = "3253e90767a4111db05857816bbc1c0fb4f9da38d213d0fce33f1fb24f05562e";
  workspaceSrc = if args.workspaceSrc == null then ./. else args.workspaceSrc;
  currentLockHash = builtins.hashFile "sha256" (workspaceSrc + /Cargo.lock);
  lockHashIgnored = if ignoreLockHash
                  then builtins.trace "Ignoring lock hash" ignoreLockHash
                  else ignoreLockHash;
in if !lockHashIgnored && (nixifiedLockHash != currentLockHash) then
  throw ("Cargo.nix ${nixifiedLockHash} is out of sync with Cargo.lock ${currentLockHash}")
else let
  inherit (rustLib) fetchCratesIo fetchCrateLocal fetchCrateGit fetchCrateAlternativeRegistry expandFeatures decideProfile genDrvsByProfile;
  profilesByName = {
    bench = builtins.fromTOML "codegen-units = 1\ndebug = false\ndebug-assertions = false\nincremental = false\nlto = true\nopt-level = 3\noverflow-checks = false\nrpath = false\n";
    dev = builtins.fromTOML "codegen-units = 4\ndebug = 1\ndebug-assertions = true\nincremental = true\nlto = false\nopt-level = 0\noverflow-checks = false\npanic = \"unwind\"\nrpath = false\n";
    release = builtins.fromTOML "codegen-units = 1\ndebug = false\ndebug-assertions = false\nincremental = false\nlto = true\nopt-level = 3\noverflow-checks = false\npanic = \"unwind\"\nrpath = false\n";
    test = builtins.fromTOML "debug = 1\ndebug-assertions = true\nincremental = true\nlto = false\nopt-level = 0\noverflow-checks = true\nrpath = false\n";
  };
  rootFeatures' = expandFeatures rootFeatures;
  overridableMkRustCrate = f:
    let
      drvs = genDrvsByProfile profilesByName ({ profile, profileName }: mkRustCrate ({ inherit release profile hostPlatformCpu hostPlatformFeatures target profileOpts codegenOpts cargoUnstableFlags rustcLinkFlags rustcBuildFlags; } // (f profileName)));
    in { compileMode ? null, profileName ? decideProfile compileMode release }:
      let drv = drvs.${profileName}; in if compileMode == null then drv else drv.override { inherit compileMode; };
in
{
  cargo2nixVersion = "0.11.0";
  workspace = {
    mail-server = rustPackages.unknown.mail-server."0.10.4";
    common = rustPackages.unknown.common."0.10.4";
    directory = rustPackages.unknown.directory."0.10.4";
    jmap_proto = rustPackages.unknown.jmap_proto."0.10.4";
    store = rustPackages.unknown.store."0.10.4";
    nlp = rustPackages.unknown.nlp."0.10.4";
    trc = rustPackages.unknown.trc."0.10.4";
    event_macro = rustPackages.unknown.event_macro."0.1.0";
    utils = rustPackages.unknown.utils."0.10.4";
    proc_macros = rustPackages.unknown.proc_macros."0.1.0";
    imap_proto = rustPackages.unknown.imap_proto."0.1.0";
    imap = rustPackages.unknown.imap."0.10.4";
    jmap = rustPackages.unknown.jmap."0.10.4";
    smtp = rustPackages.unknown.smtp."0.10.4";
    managesieve = rustPackages.unknown.managesieve."0.10.4";
    pop3 = rustPackages.unknown.pop3."0.10.4";
    stalwart-cli = rustPackages.unknown.stalwart-cli."0.10.4";
    tests = rustPackages.unknown.tests."0.1.0";
  };
  "registry+https://github.com/rust-lang/crates.io-index".addr2line."0.24.2" = overridableMkRustCrate (profileName: rec {
    name = "addr2line";
    version = "0.24.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dfbe277e56a376000877090da837660b4427aad530e3028d44e0bffe4f89a1c1"; };
    dependencies = {
      gimli = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gimli."0.31.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".adler2."2.0.0" = overridableMkRustCrate (profileName: rec {
    name = "adler2";
    version = "2.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "512761e0bb2578dd7380c6baaa0f4ce03e84f95e960231d1dec8bf4d7d6e2627"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".aead."0.5.2" = overridableMkRustCrate (profileName: rec {
    name = "aead";
    version = "0.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d122413f284cf2d62fb1b7db97e02edb8cda96d769b16e443a4f6195e35662b0"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "getrandom" ]
      [ "rand_core" ]
      [ "std" ]
    ];
    dependencies = {
      crypto_common = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crypto-common."0.1.6" { inherit profileName; }).out;
      generic_array = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".aes."0.8.4" = overridableMkRustCrate (profileName: rec {
    name = "aes";
    version = "0.8.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b169f7a6d4742236a0a00c541b845991d0ac43e546831af1249753ab4c3aa3a0"; };
    features = builtins.concatLists [
      [ "zeroize" ]
    ];
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      cipher = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cipher."0.4.4" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "aarch64" || hostPlatform.parsed.cpu.name == "x86_64" || hostPlatform.parsed.cpu.name == "i686" then "cpufeatures" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.14" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.8.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".aes-gcm."0.10.3" = overridableMkRustCrate (profileName: rec {
    name = "aes-gcm";
    version = "0.10.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "831010a0f742e1209b3bcea8fab6a8e149051ba6099432c8cb2cc117dec3ead1"; };
    features = builtins.concatLists [
      [ "aes" ]
      [ "alloc" ]
      [ "default" ]
      [ "getrandom" ]
      [ "rand_core" ]
      [ "std" ]
    ];
    dependencies = {
      aead = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aead."0.5.2" { inherit profileName; }).out;
      aes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aes."0.8.4" { inherit profileName; }).out;
      cipher = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cipher."0.4.4" { inherit profileName; }).out;
      ctr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ctr."0.9.2" { inherit profileName; }).out;
      ghash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ghash."0.5.1" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.6.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".aes-gcm-siv."0.11.1" = overridableMkRustCrate (profileName: rec {
    name = "aes-gcm-siv";
    version = "0.11.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ae0784134ba9375416d469ec31e7c5f9fa94405049cf08c5ce5b4698be673e0d"; };
    features = builtins.concatLists [
      [ "aes" ]
      [ "alloc" ]
      [ "default" ]
      [ "getrandom" ]
    ];
    dependencies = {
      aead = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aead."0.5.2" { inherit profileName; }).out;
      aes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aes."0.8.4" { inherit profileName; }).out;
      cipher = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cipher."0.4.4" { inherit profileName; }).out;
      ctr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ctr."0.9.2" { inherit profileName; }).out;
      polyval = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".polyval."0.6.2" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.6.1" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.8.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ahash."0.7.8" = overridableMkRustCrate (profileName: rec {
    name = "ahash";
    version = "0.7.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "891477e0c6a8957309ee5c45a6368af3ae14bb510732d2684ffa19af310920f9"; };
    dependencies = {
      ${ if (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") && (hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "windows" || hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "solaris" || hostPlatform.parsed.kernel.name == "illumos" || hostPlatform.parsed.kernel.name == "fuchsia" || hostPlatform.parsed.kernel.name == "redox" || hostPlatform.parsed.kernel.name == "cloudabi" || hostPlatform.parsed.kernel.name == "haiku" || hostPlatform.parsed.kernel.name == "vxworks" || hostPlatform.parsed.kernel.name == "emscripten" || hostPlatform.parsed.kernel.name == "wasi") then "getrandom" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.15" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") && !((hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l") && hostPlatform.parsed.kernel.name == "none") then "once_cell" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.20.1" { inherit profileName; }).out;
    };
    buildDependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "version_check" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.5" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ahash."0.8.11" = overridableMkRustCrate (profileName: rec {
    name = "ahash";
    version = "0.8.11";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e89da841a80418a9b391ebaea17f5c112ffaaa96f621d2c285b5174da76b9011"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "getrandom" ]
      [ "runtime-rng" ]
      [ "serde" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      getrandom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.15" { inherit profileName; }).out;
      ${ if !((hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l") && hostPlatform.parsed.kernel.name == "none") then "once_cell" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.20.1" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
      zerocopy = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zerocopy."0.7.35" { inherit profileName; }).out;
    };
    buildDependencies = {
      version_check = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.5" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".aho-corasick."1.1.3" = overridableMkRustCrate (profileName: rec {
    name = "aho-corasick";
    version = "1.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916"; };
    features = builtins.concatLists [
      [ "perf-literal" ]
      [ "std" ]
    ];
    dependencies = {
      memchr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".allocator-api2."0.2.18" = overridableMkRustCrate (profileName: rec {
    name = "allocator-api2";
    version = "0.2.18";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5c6cb57a04249c6480766f7f7cef5467412af1490f8d1e243141daddada3264f"; };
    features = builtins.concatLists [
      [ "alloc" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".android-tzdata."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "android-tzdata";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".android_system_properties."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "android_system_properties";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311"; };
    dependencies = {
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".anstream."0.6.15" = overridableMkRustCrate (profileName: rec {
    name = "anstream";
    version = "0.6.15";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "64e15c1ab1f89faffbf04a634d5e1962e9074f2741eef6d97f3c4e322426d526"; };
    features = builtins.concatLists [
      [ "auto" ]
      [ "default" ]
      [ "wincon" ]
    ];
    dependencies = {
      anstyle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstyle."1.0.8" { inherit profileName; }).out;
      anstyle_parse = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstyle-parse."0.2.5" { inherit profileName; }).out;
      anstyle_query = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstyle-query."1.1.1" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "anstyle_wincon" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstyle-wincon."3.0.4" { inherit profileName; }).out;
      colorchoice = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".colorchoice."1.0.2" { inherit profileName; }).out;
      is_terminal_polyfill = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".is_terminal_polyfill."1.70.1" { inherit profileName; }).out;
      utf8parse = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".utf8parse."0.2.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".anstyle."1.0.8" = overridableMkRustCrate (profileName: rec {
    name = "anstyle";
    version = "1.0.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1bec1de6f59aedf83baf9ff929c98f2ad654b97c9510f4e70cf6f661d49fd5b1"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".anstyle-parse."0.2.5" = overridableMkRustCrate (profileName: rec {
    name = "anstyle-parse";
    version = "0.2.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "eb47de1e80c2b463c735db5b217a0ddc39d612e7ac9e2e96a5aed1f57616c1cb"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "utf8" ]
    ];
    dependencies = {
      utf8parse = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".utf8parse."0.2.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".anstyle-query."1.1.1" = overridableMkRustCrate (profileName: rec {
    name = "anstyle-query";
    version = "1.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6d36fc52c7f6c869915e99412912f22093507da8d9e942ceaf66fe4b7c14422a"; };
    dependencies = {
      ${ if hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.52.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".anstyle-wincon."3.0.4" = overridableMkRustCrate (profileName: rec {
    name = "anstyle-wincon";
    version = "3.0.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5bf74e1b6e971609db8ca7a9ce79fd5768ab6ae46441c572e46cf596f59e57f8"; };
    dependencies = {
      anstyle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstyle."1.0.8" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.52.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.89" = overridableMkRustCrate (profileName: rec {
    name = "anyhow";
    version = "1.0.89";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "86fdf8605db99b54d3cd748a44c6d04df638eb5dafb219b135d0149bd0db01f6"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".arbitrary."1.3.2" = overridableMkRustCrate (profileName: rec {
    name = "arbitrary";
    version = "1.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7d5a26814d8dcb93b0e5a0ff3c6d80a8843bafb21b39e8e18a6f05471870e110"; };
    features = builtins.concatLists [
      [ "derive" ]
      [ "derive_arbitrary" ]
    ];
    dependencies = {
      derive_arbitrary = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derive_arbitrary."1.3.2" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".arc-swap."1.7.1" = overridableMkRustCrate (profileName: rec {
    name = "arc-swap";
    version = "1.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "69f7f8c3906b62b754cd5326047894316021dcfe5a194c8ea52bdd94934a3457"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".argon2."0.5.3" = overridableMkRustCrate (profileName: rec {
    name = "argon2";
    version = "0.5.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3c3610892ee6e0cbce8ae2700349fcf8f98adb0dbfbee85aec3c9179d29cc072"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "password-hash" ]
      [ "rand" ]
    ];
    dependencies = {
      base64ct = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64ct."1.6.0" { inherit profileName; }).out;
      blake2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".blake2."0.10.6" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" then "cpufeatures" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.14" { inherit profileName; }).out;
      password_hash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".password-hash."0.5.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".arrayref."0.3.9" = overridableMkRustCrate (profileName: rec {
    name = "arrayref";
    version = "0.3.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "76a2e8124351fda1ef8aaaa3bbd7ebbcb486bbcd4225aca0aa0d84bb2db8fecb"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.6" = overridableMkRustCrate (profileName: rec {
    name = "arrayvec";
    version = "0.7.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7c02d123df017efcdfbd739ef81735b36c5ba83ec3c59c80a9d7ecc718f92e50"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ascii-canvas."3.0.0" = overridableMkRustCrate (profileName: rec {
    name = "ascii-canvas";
    version = "3.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8824ecca2e851cec16968d54a01dd372ef8f95b244fb84b84e70128be347c3c6"; };
    dependencies = {
      term = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".term."0.7.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".asn1-rs."0.5.2" = overridableMkRustCrate (profileName: rec {
    name = "asn1-rs";
    version = "0.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7f6fd5ddaf0351dff5b8da21b2fb4ff8e08ddd02857f0bf69c47639106c0fff0"; };
    features = builtins.concatLists [
      [ "datetime" ]
      [ "default" ]
      [ "std" ]
      [ "time" ]
    ];
    dependencies = {
      asn1_rs_derive = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".asn1-rs-derive."0.4.0" { profileName = "__noProfile"; }).out;
      asn1_rs_impl = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".asn1-rs-impl."0.1.0" { profileName = "__noProfile"; }).out;
      displaydoc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".displaydoc."0.2.5" { profileName = "__noProfile"; }).out;
      nom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".nom."7.1.3" { inherit profileName; }).out;
      num_traits = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.19" { inherit profileName; }).out;
      rusticata_macros = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rusticata-macros."4.1.0" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.64" { inherit profileName; }).out;
      time = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".time."0.3.36" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".asn1-rs."0.6.2" = overridableMkRustCrate (profileName: rec {
    name = "asn1-rs";
    version = "0.6.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5493c3bedbacf7fd7382c6346bbd66687d12bbaad3a89a2d2c303ee6cf20b048"; };
    features = builtins.concatLists [
      [ "datetime" ]
      [ "default" ]
      [ "std" ]
      [ "time" ]
    ];
    dependencies = {
      asn1_rs_derive = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".asn1-rs-derive."0.5.1" { profileName = "__noProfile"; }).out;
      asn1_rs_impl = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".asn1-rs-impl."0.2.0" { profileName = "__noProfile"; }).out;
      displaydoc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".displaydoc."0.2.5" { profileName = "__noProfile"; }).out;
      nom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".nom."7.1.3" { inherit profileName; }).out;
      num_traits = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.19" { inherit profileName; }).out;
      rusticata_macros = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rusticata-macros."4.1.0" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.64" { inherit profileName; }).out;
      time = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".time."0.3.36" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".asn1-rs-derive."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "asn1-rs-derive";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "726535892e8eae7e70657b4c8ea93d26b8553afb1ce617caee529ef96d7dee6c"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
      synstructure = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".synstructure."0.12.6" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".asn1-rs-derive."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "asn1-rs-derive";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "965c2d33e53cb6b267e148a4cb0760bc01f4904c1cd4bb4002a085bb016d1490"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
      synstructure = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".synstructure."0.13.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".asn1-rs-impl."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "asn1-rs-impl";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2777730b2039ac0f95f093556e61b6d26cebed5393ca6f152717777cec3a42ed"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".asn1-rs-impl."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "asn1-rs-impl";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7b18050c2cd6fe86c3a76584ef5e0baf286d038cda203eb6223df2cc413565f7"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-compression."0.4.13" = overridableMkRustCrate (profileName: rec {
    name = "async-compression";
    version = "0.4.13";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7e614738943d3f68c628ae3dbce7c3daffb196665f82f8c8ea6b65de73c79429"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic") "flate2")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic") "gzip")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic") "tokio")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic" then "flate2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".flate2."1.0.34" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic" then "futures_core" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic" then "memchr" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic" then "pin_project_lite" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.14" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic" then "tokio" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-recursion."1.1.1" = overridableMkRustCrate (profileName: rec {
    name = "async-recursion";
    version = "1.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3b43422f69d8ff38f95f1b2bb76517c91589a924d1559a0e935d7c8ce0274c11"; };
    dependencies = {
      ${ if rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-stream."0.3.6" = overridableMkRustCrate (profileName: rec {
    name = "async-stream";
    version = "0.3.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0b5a71a6f37880a80d1d7f19efd781e4b5de42c88f0722cc13bcb6cc2cfe8476"; };
    dependencies = {
      async_stream_impl = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-stream-impl."0.3.6" { profileName = "__noProfile"; }).out;
      futures_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" { inherit profileName; }).out;
      pin_project_lite = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.14" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-stream-impl."0.3.6" = overridableMkRustCrate (profileName: rec {
    name = "async-stream-impl";
    version = "0.3.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c7c24de15d275a1ecfd47a380fb4d5ec9bfe0933f309ed5e705b775596a3574d"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.83" = overridableMkRustCrate (profileName: rec {
    name = "async-trait";
    version = "0.1.83";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "721cae7de5c34fbb2acd27e21e6d2cf7b886dce0c27388d46c4e6c47ea4318dd"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".atomic-waker."1.1.2" = overridableMkRustCrate (profileName: rec {
    name = "atomic-waker";
    version = "1.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1505bd5d3d116872e7271a6d4e16d81d0c8570876c8de68093a09ac269d8aac0"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".attohttpc."0.28.0" = overridableMkRustCrate (profileName: rec {
    name = "attohttpc";
    version = "0.28.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9a13149d0cf3f7f9b9261fad4ec63b2efbf9a80665f52def86282d26255e6331"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3") "__rustls")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3") "json")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3") "rustls-opt-dep")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3") "serde")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3") "serde_json")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3") "tls-rustls")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3") "tls-rustls-webpki-roots")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3") "webpki-roots")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "http" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."1.1.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.22" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "rustls_opt_dep" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.22.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "serde" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "serde_json" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.128" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "url" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.5.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "webpki_roots" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webpki-roots."0.26.6" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".autocfg."1.4.0" = overridableMkRustCrate (profileName: rec {
    name = "autocfg";
    version = "1.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ace50bade8e6234aa140d9a2f552bbee1db4d353f69b8217bc503490fc1a9f26"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".aws-creds."0.37.0" = overridableMkRustCrate (profileName: rec {
    name = "aws-creds";
    version = "0.37.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7f84143206b9c72b3c5cb65415de60c7539c79cd1559290fddec657939131be0"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3") "attohttpc")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3") "http-credentials")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3") "rustls-tls")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "attohttpc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".attohttpc."0.28.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "home" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".home."0.5.9" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.22" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "quick_xml" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quick-xml."0.32.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "ini" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rust-ini."0.21.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "serde" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "thiserror" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.64" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "time" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".time."0.3.36" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "url" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.5.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".aws-region."0.25.5" = overridableMkRustCrate (profileName: rec {
    name = "aws-region";
    version = "0.25.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e9aed3f9c7eac9be28662fdb3b0f4d1951e812f7c64fed4f0327ba702f459b3b"; };
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "thiserror" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.64" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".axum."0.7.7" = overridableMkRustCrate (profileName: rec {
    name = "axum";
    version = "0.7.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "504e3947307ac8326a5437504c517c4b56716c9d98fac0028c2acc7ca47d70ae"; };
    dependencies = {
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.83" { profileName = "__noProfile"; }).out;
      axum_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".axum-core."0.4.5" { inherit profileName; }).out;
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.7.2" { inherit profileName; }).out;
      futures_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" { inherit profileName; }).out;
      http = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."1.1.0" { inherit profileName; }).out;
      http_body = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body."1.0.1" { inherit profileName; }).out;
      http_body_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body-util."0.1.2" { inherit profileName; }).out;
      itoa = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.11" { inherit profileName; }).out;
      matchit = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".matchit."0.7.3" { inherit profileName; }).out;
      memchr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.4" { inherit profileName; }).out;
      mime = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mime."0.3.17" { inherit profileName; }).out;
      percent_encoding = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.1" { inherit profileName; }).out;
      pin_project_lite = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.14" { inherit profileName; }).out;
      rustversion = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".rustversion."1.0.17" { profileName = "__noProfile"; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
      sync_wrapper = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sync_wrapper."1.0.1" { inherit profileName; }).out;
      tower = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower."0.5.1" { inherit profileName; }).out;
      tower_layer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-layer."0.3.3" { inherit profileName; }).out;
      tower_service = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-service."0.3.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".axum-core."0.4.5" = overridableMkRustCrate (profileName: rec {
    name = "axum-core";
    version = "0.4.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "09f2bd6146b97ae3359fa0cc6d6b376d9539582c7b4220f041a33ec24c226199"; };
    dependencies = {
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.83" { profileName = "__noProfile"; }).out;
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.7.2" { inherit profileName; }).out;
      futures_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" { inherit profileName; }).out;
      http = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."1.1.0" { inherit profileName; }).out;
      http_body = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body."1.0.1" { inherit profileName; }).out;
      http_body_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body-util."0.1.2" { inherit profileName; }).out;
      mime = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mime."0.3.17" { inherit profileName; }).out;
      pin_project_lite = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.14" { inherit profileName; }).out;
      rustversion = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".rustversion."1.0.17" { profileName = "__noProfile"; }).out;
      sync_wrapper = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sync_wrapper."1.0.1" { inherit profileName; }).out;
      tower_layer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-layer."0.3.3" { inherit profileName; }).out;
      tower_service = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-service."0.3.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".backtrace."0.3.74" = overridableMkRustCrate (profileName: rec {
    name = "backtrace";
    version = "0.3.74";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8d82cb332cdfaed17ae235a638438ac4d4839913cc2af585c3c6746e8f8bee1a"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      ${ if !(hostPlatform.isWindows && hostPlatform.parsed.abi.name == "msvc" && !(hostPlatform.parsed.vendor.name == "uwp")) then "addr2line" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".addr2line."0.24.2" { inherit profileName; }).out;
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if !(hostPlatform.isWindows && hostPlatform.parsed.abi.name == "msvc" && !(hostPlatform.parsed.vendor.name == "uwp")) then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
      ${ if !(hostPlatform.isWindows && hostPlatform.parsed.abi.name == "msvc" && !(hostPlatform.parsed.vendor.name == "uwp")) then "miniz_oxide" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".miniz_oxide."0.8.0" { inherit profileName; }).out;
      ${ if !(hostPlatform.isWindows && hostPlatform.parsed.abi.name == "msvc" && !(hostPlatform.parsed.vendor.name == "uwp")) then "object" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".object."0.36.5" { inherit profileName; }).out;
      rustc_demangle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-demangle."0.1.24" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "windows_targets" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.52.6" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".base16ct."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "base16ct";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4c7f02d4ea65f2c1853089ffd8d2787bdbc63de2f0d29dedbcf8ccdfa0ccd4cf"; };
    features = builtins.concatLists [
      [ "alloc" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".base32."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "base32";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "23ce669cd6c8588f79e15cf450314f9638f967fc5770ff1c7c1deb0925ea7cfa"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".base64."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "base64";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b41b7ea54a0c9d92199de89e20e58d49f02f8e699814ef3fdf266f6f748d15c7"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic") "default")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".base64."0.13.1" = overridableMkRustCrate (profileName: rec {
    name = "base64";
    version = "0.13.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9e1b586273c5702936fe7b7d6896644d8be71e6314cfe09d3167c95f712589e8"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".base64."0.21.7" = overridableMkRustCrate (profileName: rec {
    name = "base64";
    version = "0.21.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9d297deb1925b89f2ccc13d7635fa0714f12c87adce1c75356b39ca9b7178567"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".base64."0.22.1" = overridableMkRustCrate (profileName: rec {
    name = "base64";
    version = "0.22.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "72b3254f16251a8381aa12e40e3c4d2f0199f8c6508fbecb9d91f575e0fbb8c6"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".base64ct."1.6.0" = overridableMkRustCrate (profileName: rec {
    name = "base64ct";
    version = "1.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8c3c1a368f70d6cf7302d78f8f7093da241fb8e8807c05cc9e51a125895a6d5b"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bigdecimal."0.4.5" = overridableMkRustCrate (profileName: rec {
    name = "bigdecimal";
    version = "0.4.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "51d712318a27c7150326677b321a5fa91b55f6d9034ffd67f20319e147d40cee"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "default")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "libm" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libm."0.2.8" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "num_bigint" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-bigint."0.4.6" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "num_integer" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-integer."0.1.46" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "num_traits" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.19" { inherit profileName; }).out;
    };
    buildDependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "autocfg" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.4.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bincode."1.3.3" = overridableMkRustCrate (profileName: rec {
    name = "bincode";
    version = "1.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b1f45e9417d87227c7a56d22e471c6206462cba514c7590c09aff4cf6d1ddcad"; };
    dependencies = {
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bindgen."0.69.4" = overridableMkRustCrate (profileName: rec {
    name = "bindgen";
    version = "0.69.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a00dc851838a2120612785d195287475a3ac45514741da670b735818822129a0"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") "default")
      (lib.optional (rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") "logging")
      (lib.optional (rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") "prettyplease")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" || rootFeatures' ? "tests/rocks") "runtime")
      (lib.optional (rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") "which-rustfmt")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" || rootFeatures' ? "tests/rocks" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.6.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" || rootFeatures' ? "tests/rocks" then "cexpr" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cexpr."0.6.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" || rootFeatures' ? "tests/rocks" then "clang_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".clang-sys."1.8.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" || rootFeatures' ? "tests/rocks" then "itertools" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.12.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" || rootFeatures' ? "tests/rocks" then "lazy_static" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.5.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" || rootFeatures' ? "tests/rocks" then "lazycell" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazycell."1.3.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.22" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" then "prettyplease" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".prettyplease."0.2.22" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" || rootFeatures' ? "tests/rocks" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" || rootFeatures' ? "tests/rocks" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" || rootFeatures' ? "tests/rocks" then "regex" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.11.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" || rootFeatures' ? "tests/rocks" then "rustc_hash" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" || rootFeatures' ? "tests/rocks" then "shlex" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".shlex."1.3.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" || rootFeatures' ? "tests/rocks" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" then "which" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".which."4.4.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bindgen."0.70.1" = overridableMkRustCrate (profileName: rec {
    name = "bindgen";
    version = "0.70.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f49d8fed880d473ea71efb9bf597651e77201bdd4893efe54c9e5d65ae04ce6f"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "runtime")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.6.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "cexpr" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cexpr."0.6.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "clang_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".clang-sys."1.8.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "itertools" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.13.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "regex" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.11.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "rustc_hash" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "shlex" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".shlex."1.3.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".biscuit."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "biscuit";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7e28fc7c56c61743a01d0d1b73e4fed68b8a4f032ea3a2d4bb8c6520a33fc05a"; };
    dependencies = {
      chrono = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".chrono."0.4.38" { inherit profileName; }).out;
      data_encoding = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".data-encoding."2.6.0" { inherit profileName; }).out;
      num_bigint = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-bigint."0.4.6" { inherit profileName; }).out;
      num_traits = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.19" { inherit profileName; }).out;
      once_cell = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.20.1" { inherit profileName; }).out;
      ring = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.17.8" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
      serde_json = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.128" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bit-set."0.5.3" = overridableMkRustCrate (profileName: rec {
    name = "bit-set";
    version = "0.5.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0700ddab506f33b20a03b13996eccd309a48e5ff77d0d95926aa0210fb4e95f1"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      bit_vec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bit-vec."0.6.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bit-vec."0.6.3" = overridableMkRustCrate (profileName: rec {
    name = "bit-vec";
    version = "0.6.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "349f9b6a179ed607305526ca489b34ad0a41aed5f7980fa90eb03160b69598fb"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" = overridableMkRustCrate (profileName: rec {
    name = "bitflags";
    version = "1.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bitflags."2.6.0" = overridableMkRustCrate (profileName: rec {
    name = "bitflags";
    version = "2.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b048fb63fd8b5923fc5aa7b340d8e156aec7ec02f0c78fa8a6ddc2613f6f71de"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bitpacking."0.9.2" = overridableMkRustCrate (profileName: rec {
    name = "bitpacking";
    version = "0.9.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4c1d3e2bfd8d06048a179f7b17afc3188effa10385e7b00dc65af6aae732ea92"; };
    features = builtins.concatLists [
      [ "bitpacker1x" ]
      [ "bitpacker4x" ]
      [ "bitpacker8x" ]
      [ "default" ]
    ];
    dependencies = {
      crunchy = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crunchy."0.2.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bitvec."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "bitvec";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1bc2832c24239b0141d5674bb9174f9d68a8b5b3f2753311927c172ca46f7e9c"; };
    features = builtins.concatLists [
      [ "alloc" ]
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "atomic")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "default")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "std")
    ];
    dependencies = {
      funty = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".funty."2.0.0" { inherit profileName; }).out;
      radium = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".radium."0.7.0" { inherit profileName; }).out;
      tap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tap."1.0.1" { inherit profileName; }).out;
      wyz = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wyz."0.5.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bitvec-nom2."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "bitvec-nom2";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d988fcc40055ceaa85edc55875a08f8abd29018582647fd82ad6128dba14a5f0"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
    ];
    dependencies = {
      bitvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitvec."1.0.1" { inherit profileName; }).out;
      nom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".nom."7.1.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".blake2."0.10.6" = overridableMkRustCrate (profileName: rec {
    name = "blake2";
    version = "0.10.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "46502ad458c9a52b69d4d4d32775c788b7a1b85e8bc9d482d92250fc0e3f8efe"; };
    dependencies = {
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".blake3."1.5.4" = overridableMkRustCrate (profileName: rec {
    name = "blake3";
    version = "1.5.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d82033247fd8e890df8f740e407ad4d038debb9eb1f40533fffb32e7d17dc6f7"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      arrayref = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayref."0.3.9" { inherit profileName; }).out;
      arrayvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.6" { inherit profileName; }).out;
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      constant_time_eq = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".constant_time_eq."0.3.1" { inherit profileName; }).out;
    };
    buildDependencies = {
      cc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.1.25" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".block-buffer."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "block-buffer";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4152116fd6e9dadb291ae18fc1ec3575ed6d84c29642d97890f4b4a3417297e4"; };
    dependencies = {
      generic_array = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".block-buffer."0.10.4" = overridableMkRustCrate (profileName: rec {
    name = "block-buffer";
    version = "0.10.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71"; };
    dependencies = {
      generic_array = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".block-padding."0.3.3" = overridableMkRustCrate (profileName: rec {
    name = "block-padding";
    version = "0.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a8894febbff9f758034a5b8e12d87918f56dfc64a8e1fe757d65e29041538d93"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      generic_array = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".blowfish."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "blowfish";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "32fa6a061124e37baba002e496d203e23ba3d7b73750be82dbfbc92913048a5b"; };
    features = builtins.concatLists [
      [ "bcrypt" ]
    ];
    dependencies = {
      byteorder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" { inherit profileName; }).out;
      cipher = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cipher."0.2.5" { inherit profileName; }).out;
      opaque_debug = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".opaque-debug."0.3.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".blowfish."0.9.1" = overridableMkRustCrate (profileName: rec {
    name = "blowfish";
    version = "0.9.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e412e2cd0f2b2d93e02543ceae7917b3c70331573df19ee046bcbc35e45e87d7"; };
    features = builtins.concatLists [
      [ "zeroize" ]
    ];
    dependencies = {
      byteorder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" { inherit profileName; }).out;
      cipher = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cipher."0.4.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".borsh."1.5.1" = overridableMkRustCrate (profileName: rec {
    name = "borsh";
    version = "1.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a6362ed55def622cddc70a4746a68554d7b687713770de539e59a739b249f8ed"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "borsh-derive")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "derive")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "std")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "unstable__schema")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "borsh_derive" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".borsh-derive."1.5.1" { profileName = "__noProfile"; }).out;
    };
    buildDependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "cfg_aliases" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg_aliases."0.2.1" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".borsh-derive."1.5.1" = overridableMkRustCrate (profileName: rec {
    name = "borsh-derive";
    version = "1.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c3ef8005764f53cd4dca619f5bf64cafd4664dada50ece25e4d81de54c80cc0b"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "default")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "schema")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "once_cell" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.20.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "proc_macro_crate" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."3.2.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "syn_derive" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".syn_derive."0.1.8" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".btoi."0.4.3" = overridableMkRustCrate (profileName: rec {
    name = "btoi";
    version = "0.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9dd6407f73a9b8b6162d8a2ef999fe6afd7cc15902ebf42c5cd296addf17e0ad"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "default")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "num_traits" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.19" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".buffered-reader."1.3.1" = overridableMkRustCrate (profileName: rec {
    name = "buffered-reader";
    version = "1.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cd098763fdb64579407a8c83cf0d751e6d4a7e161d0114c89cc181a2ca760ec8"; };
    dependencies = {
      lazy_static = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.5.0" { inherit profileName; }).out;
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.16.0" = overridableMkRustCrate (profileName: rec {
    name = "bumpalo";
    version = "3.16.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "79296716171880943b8470b5f8d03aa55eb2e645a4874bdbb28adb49162e012c"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bytecheck."0.6.12" = overridableMkRustCrate (profileName: rec {
    name = "bytecheck";
    version = "0.6.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "23cdc57ce23ac53c931e88a43d06d070a6fd142f2617be5855eb75efc9beb1c2"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "simdutf8")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "bytecheck_derive" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bytecheck_derive."0.6.12" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "ptr_meta" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ptr_meta."0.1.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "simdutf8" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".simdutf8."0.1.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bytecheck_derive."0.6.12" = overridableMkRustCrate (profileName: rec {
    name = "bytecheck_derive";
    version = "0.6.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3db406d29fbcd95542e92559bed4d8ad92636d1ca8b3b72ede10b4bcc010e659"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.18.0" = overridableMkRustCrate (profileName: rec {
    name = "bytemuck";
    version = "1.18.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "94bbb0ad554ad961ddc5da507a12a29b14e4ae5bda06b19f575a3e6079d2e2ae"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" = overridableMkRustCrate (profileName: rec {
    name = "byteorder";
    version = "1.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bytes."1.7.2" = overridableMkRustCrate (profileName: rec {
    name = "bytes";
    version = "1.7.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "428d9aa8fbc0670b7b8d6030a7fadd0f86151cae55e4dbbece15f3780a3dfaf3"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bzip2."0.4.4" = overridableMkRustCrate (profileName: rec {
    name = "bzip2";
    version = "0.4.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bdb116a6ef3f6c3698828873ad02c3014b3c85cadb88496095628e3ef1e347f8"; };
    dependencies = {
      bzip2_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bzip2-sys."0.1.11+1.0.8" { inherit profileName; }).out;
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bzip2-sys."0.1.11+1.0.8" = overridableMkRustCrate (profileName: rec {
    name = "bzip2-sys";
    version = "0.1.11+1.0.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "736a955f3fa7875102d57c82b8cac37ec45224a07fd32d58f9f7a186b6cd4cdc"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/rocks") "static")
    ];
    dependencies = {
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
    };
    buildDependencies = {
      cc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.1.25" { profileName = "__noProfile"; }).out;
      pkg_config = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.31" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".camellia."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "camellia";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3264e2574e9ef2b53ce6f536dea83a69ac0bc600b762d1523ff83fe07230ce30"; };
    features = builtins.concatLists [
      [ "zeroize" ]
    ];
    dependencies = {
      byteorder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" { inherit profileName; }).out;
      cipher = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cipher."0.4.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cast5."0.11.1" = overridableMkRustCrate (profileName: rec {
    name = "cast5";
    version = "0.11.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "26b07d673db1ccf000e90f54b819db9e75a8348d6eb056e9b8ab53231b7a9911"; };
    features = builtins.concatLists [
      [ "zeroize" ]
    ];
    dependencies = {
      cipher = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cipher."0.4.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cbc."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "cbc";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "26b52a9543ae338f279b96b0b9fed9c8093744685043739079ce85cd58f289a6"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "block-padding" ]
      [ "default" ]
    ];
    dependencies = {
      cipher = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cipher."0.4.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cc."1.1.25" = overridableMkRustCrate (profileName: rec {
    name = "cc";
    version = "1.1.25";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e8d9e0b4957f635b8d3da819d0db5603620467ecf1f692d22a8c2717ce27e6d8"; };
    features = builtins.concatLists [
      [ "parallel" ]
    ];
    dependencies = {
      jobserver = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".jobserver."0.1.32" { inherit profileName; }).out;
      ${ if hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
      shlex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".shlex."1.3.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cedarwood."0.4.6" = overridableMkRustCrate (profileName: rec {
    name = "cedarwood";
    version = "0.4.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6d910bedd62c24733263d0bed247460853c9d22e8956bd4cd964302095e04e90"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      smallvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.13.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cexpr."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "cexpr";
    version = "0.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6fac387a98bb7c37292057cffc56d62ecb629900026402633ae9160df93a8766"; };
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" || rootFeatures' ? "tests/mysql" || rootFeatures' ? "tests/rocks" then "nom" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".nom."7.1.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cfb."0.7.3" = overridableMkRustCrate (profileName: rec {
    name = "cfb";
    version = "0.7.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d38f2da7a0a2c4ccf0065be06397cc26a81f4e528be095826eee9d4adbb8c60f"; };
    dependencies = {
      byteorder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" { inherit profileName; }).out;
      fnv = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; }).out;
      uuid = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".uuid."1.10.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cfb-mode."0.8.2" = overridableMkRustCrate (profileName: rec {
    name = "cfb-mode";
    version = "0.8.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "738b8d467867f80a71351933f70461f5b56f24d5c93e0cf216e59229c968d330"; };
    dependencies = {
      cipher = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cipher."0.4.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" = overridableMkRustCrate (profileName: rec {
    name = "cfg-if";
    version = "1.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cfg_aliases."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "cfg_aliases";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "613afe47fcd5fac7ccf1db93babcb082c5994d996f20b8b159f2ad1658eb5724"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".chrono."0.4.38" = overridableMkRustCrate (profileName: rec {
    name = "chrono";
    version = "0.4.38";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a21f936df1771bf62b77f047b726c4625ff2e8aa607c01ec06e5a05bd8463401"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "android-tzdata" ]
      [ "clock" ]
      [ "default" ]
      [ "iana-time-zone" ]
      [ "js-sys" ]
      [ "now" ]
      [ "oldtime" ]
      [ "serde" ]
      [ "std" ]
      [ "wasm-bindgen" ]
      [ "wasmbind" ]
      [ "winapi" ]
      [ "windows-targets" ]
    ];
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "android" then "android_tzdata" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".android-tzdata."0.1.1" { inherit profileName; }).out;
      ${ if hostPlatform.isUnix then "iana_time_zone" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".iana-time-zone."0.1.61" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "wasm32" && !(hostPlatform.parsed.kernel.name == "emscripten" || hostPlatform.parsed.kernel.name == "wasi") then "js_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.70" { inherit profileName; }).out;
      num_traits = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.19" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "wasm32" && !(hostPlatform.parsed.kernel.name == "emscripten" || hostPlatform.parsed.kernel.name == "wasi") then "wasm_bindgen" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.93" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "windows_targets" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.52.6" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cipher."0.2.5" = overridableMkRustCrate (profileName: rec {
    name = "cipher";
    version = "0.2.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "12f8e7987cbd042a63249497f41aed09f8e65add917ea6566effbc56578d6801"; };
    dependencies = {
      generic_array = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cipher."0.4.4" = overridableMkRustCrate (profileName: rec {
    name = "cipher";
    version = "0.4.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "773f3b9af64447d2ce9850330c473515014aa235e6a783b02db81ff39e4a3dad"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "block-padding" ]
      [ "std" ]
      [ "zeroize" ]
    ];
    dependencies = {
      crypto_common = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crypto-common."0.1.6" { inherit profileName; }).out;
      inout = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".inout."0.1.3" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.8.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".clang-sys."1.8.1" = overridableMkRustCrate (profileName: rec {
    name = "clang-sys";
    version = "1.8.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0b023947811758c97c59bf9d1c188fd619ad4718dcaa767947df1cadb14f39f4"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" || rootFeatures' ? "tests/mysql" || rootFeatures' ? "tests/rocks") "clang_3_5")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" || rootFeatures' ? "tests/mysql" || rootFeatures' ? "tests/rocks") "clang_3_6")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" || rootFeatures' ? "tests/mysql" || rootFeatures' ? "tests/rocks") "clang_3_7")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" || rootFeatures' ? "tests/mysql" || rootFeatures' ? "tests/rocks") "clang_3_8")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" || rootFeatures' ? "tests/mysql" || rootFeatures' ? "tests/rocks") "clang_3_9")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" || rootFeatures' ? "tests/mysql" || rootFeatures' ? "tests/rocks") "clang_4_0")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" || rootFeatures' ? "tests/mysql" || rootFeatures' ? "tests/rocks") "clang_5_0")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" || rootFeatures' ? "tests/mysql" || rootFeatures' ? "tests/rocks") "clang_6_0")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" || rootFeatures' ? "tests/mysql" || rootFeatures' ? "tests/rocks") "libloading")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" || rootFeatures' ? "tests/mysql" || rootFeatures' ? "tests/rocks") "runtime")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" || rootFeatures' ? "tests/mysql" || rootFeatures' ? "tests/rocks" then "glob" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".glob."0.3.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" || rootFeatures' ? "tests/mysql" || rootFeatures' ? "tests/rocks" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" || rootFeatures' ? "tests/mysql" || rootFeatures' ? "tests/rocks" then "libloading" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.8.5" { inherit profileName; }).out;
    };
    buildDependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" || rootFeatures' ? "tests/mysql" || rootFeatures' ? "tests/rocks" then "glob" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".glob."0.3.1" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".clap."4.5.19" = overridableMkRustCrate (profileName: rec {
    name = "clap";
    version = "4.5.19";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7be5744db7978a28d9df86a214130d106a89ce49644cbc4e3f0c22c3fba30615"; };
    features = builtins.concatLists [
      [ "color" ]
      [ "default" ]
      [ "derive" ]
      [ "error-context" ]
      [ "help" ]
      [ "std" ]
      [ "suggestions" ]
      [ "usage" ]
    ];
    dependencies = {
      clap_builder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".clap_builder."4.5.19" { inherit profileName; }).out;
      clap_derive = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".clap_derive."4.5.18" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".clap_builder."4.5.19" = overridableMkRustCrate (profileName: rec {
    name = "clap_builder";
    version = "4.5.19";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a5fbc17d3ef8278f55b282b2a2e75ae6f6c7d4bb70ed3d0382375104bfafdb4b"; };
    features = builtins.concatLists [
      [ "color" ]
      [ "error-context" ]
      [ "help" ]
      [ "std" ]
      [ "suggestions" ]
      [ "usage" ]
    ];
    dependencies = {
      anstream = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstream."0.6.15" { inherit profileName; }).out;
      anstyle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstyle."1.0.8" { inherit profileName; }).out;
      clap_lex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".clap_lex."0.7.2" { inherit profileName; }).out;
      strsim = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".strsim."0.11.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".clap_derive."4.5.18" = overridableMkRustCrate (profileName: rec {
    name = "clap_derive";
    version = "4.5.18";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4ac6a0c7b1a9e9a5186361f67dfa1b88213572f427fb9ab038efb2bd8c582dab"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      heck = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".heck."0.5.0" { inherit profileName; }).out;
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".clap_lex."0.7.2" = overridableMkRustCrate (profileName: rec {
    name = "clap_lex";
    version = "0.7.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1462739cb27611015575c0c11df5df7601141071f07518d56fcc1be504cbec97"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cmac."0.7.2" = overridableMkRustCrate (profileName: rec {
    name = "cmac";
    version = "0.7.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8543454e3c3f5126effff9cd44d562af4e31fb8ce1cc0d3dcd8f084515dbc1aa"; };
    dependencies = {
      cipher = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cipher."0.4.4" { inherit profileName; }).out;
      dbl = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".dbl."0.3.2" { inherit profileName; }).out;
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cmake."0.1.51" = overridableMkRustCrate (profileName: rec {
    name = "cmake";
    version = "0.1.51";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fb1e43aa7fd152b1f968787f7dbcdeb306d1867ff373c69955211876c053f91a"; };
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "cc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.1.25" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".colorchoice."1.0.2" = overridableMkRustCrate (profileName: rec {
    name = "colorchoice";
    version = "1.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d3fd119d74b830634cea2a0f58bbd0d54540518a14397557951e79340abc28c0"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".combine."4.6.7" = overridableMkRustCrate (profileName: rec {
    name = "combine";
    version = "4.6.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ba5a308b75df32fe02788e748662718f03fde005016435c444eea572398219fd"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") "alloc")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") "bytes")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") "futures-core-03")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") "pin-project-lite")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") "std")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") "tokio")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") "tokio-dep")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") "tokio-util")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis" then "bytes" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.7.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis" then "futures_core_03" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis" then "memchr" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis" then "pin_project_lite" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.14" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis" then "tokio_dep" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis" then "tokio_util" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-util."0.7.12" { inherit profileName; }).out;
    };
  });
  
  "unknown".common."0.10.4" = overridableMkRustCrate (profileName: rec {
    name = "common";
    version = "0.10.4";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    features = builtins.concatLists [
      [ "enterprise" ]
      (lib.optional (rootFeatures' ? "common/foundation" || rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") "foundation")
      [ "test_mode" ]
    ];
    dependencies = {
      aes_gcm_siv = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aes-gcm-siv."0.11.1" { inherit profileName; }).out;
      ahash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.8.11" { inherit profileName; }).out;
      arc_swap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".arc-swap."1.7.1" { inherit profileName; }).out;
      base64 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.22.1" { inherit profileName; }).out;
      bincode = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bincode."1.3.3" { inherit profileName; }).out;
      biscuit = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".biscuit."0.7.0" { inherit profileName; }).out;
      chrono = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".chrono."0.4.38" { inherit profileName; }).out;
      dashmap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".dashmap."6.1.0" { inherit profileName; }).out;
      decancer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".decancer."3.2.4" { inherit profileName; }).out;
      directory = (rustPackages."unknown".directory."0.10.4" { inherit profileName; }).out;
      dns_update = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".dns-update."0.1.2" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.31" { inherit profileName; }).out;
      hostname = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hostname."0.4.0" { inherit profileName; }).out;
      hyper = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper."1.4.1" { inherit profileName; }).out;
      idna = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".idna."1.0.2" { inherit profileName; }).out;
      imagesize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".imagesize."0.13.0" { inherit profileName; }).out;
      imap_proto = (rustPackages."unknown".imap_proto."0.1.0" { inherit profileName; }).out;
      infer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".infer."0.16.0" { inherit profileName; }).out;
      jmap_proto = (rustPackages."unknown".jmap_proto."0.10.4" { inherit profileName; }).out;
      ${ if hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
      mail_auth = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mail-auth."0.5.0" { inherit profileName; }).out;
      mail_builder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mail-builder."0.3.2" { inherit profileName; }).out;
      mail_parser = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mail-parser."0.9.4" { inherit profileName; }).out;
      mail_send = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mail-send."0.4.9" { inherit profileName; }).out;
      md5 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".md5."0.7.0" { inherit profileName; }).out;
      nlp = (rustPackages."unknown".nlp."0.10.4" { inherit profileName; }).out;
      opentelemetry = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".opentelemetry."0.25.0" { inherit profileName; }).out;
      opentelemetry_otlp = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".opentelemetry-otlp."0.25.0" { inherit profileName; }).out;
      opentelemetry_semantic_conventions = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".opentelemetry-semantic-conventions."0.25.0" { inherit profileName; }).out;
      opentelemetry_sdk = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".opentelemetry_sdk."0.25.0" { inherit profileName; }).out;
      p256 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".p256."0.13.2" { inherit profileName; }).out;
      p384 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".p384."0.13.0" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.3" { inherit profileName; }).out;
      pem = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pem."3.0.4" { inherit profileName; }).out;
      ${ if hostPlatform.isUnix then "privdrop" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".privdrop."0.5.4" { inherit profileName; }).out;
      prometheus = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".prometheus."0.13.4" { inherit profileName; }).out;
      proxy_header = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proxy-header."0.1.2" { inherit profileName; }).out;
      psl = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".psl."2.1.55" { inherit profileName; }).out;
      pwhash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pwhash."1.0.0" { inherit profileName; }).out;
      rcgen = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rcgen."0.12.1" { inherit profileName; }).out;
      regex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.11.0" { inherit profileName; }).out;
      reqwest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".reqwest."0.12.8" { inherit profileName; }).out;
      ring = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.17.8" { inherit profileName; }).out;
      rsa = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rsa."0.9.6" { inherit profileName; }).out;
      rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.23.14" { inherit profileName; }).out;
      rustls_pemfile = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pemfile."2.2.0" { inherit profileName; }).out;
      rustls_pki_types = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pki-types."1.9.0" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
      serde_json = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.128" { inherit profileName; }).out;
      sha1 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha1."0.10.6" { inherit profileName; }).out;
      sha2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" { inherit profileName; }).out;
      sieve = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sieve-rs."0.5.2" { inherit profileName; }).out;
      smtp_proto = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smtp-proto."0.1.5" { inherit profileName; }).out;
      store = (rustPackages."unknown".store."0.10.4" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
      tokio_rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-rustls."0.26.0" { inherit profileName; }).out;
      trc = (rustPackages."unknown".trc."0.10.4" { inherit profileName; }).out;
      unicode_security = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-security."0.1.2" { inherit profileName; }).out;
      utils = (rustPackages."unknown".utils."0.10.4" { inherit profileName; }).out;
      whatlang = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".whatlang."0.16.4" { inherit profileName; }).out;
      x509_parser = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".x509-parser."0.16.0" { inherit profileName; }).out;
      xxhash_rust = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".xxhash-rust."0.8.12" { inherit profileName; }).out;
      zip = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zip."2.2.0" { inherit profileName; }).out;
    };
    devDependencies = {
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".console."0.15.8" = overridableMkRustCrate (profileName: rec {
    name = "console";
    version = "0.15.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0e1f83fc076bd6dd27517eacdf25fef6c4dfe5f1d7448bafaaf3a26f13b5e4eb"; };
    features = builtins.concatLists [
      [ "ansi-parsing" ]
      [ "unicode-width" ]
    ];
    dependencies = {
      ${ if hostPlatform.isWindows then "encode_unicode" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".encode_unicode."0.3.6" { inherit profileName; }).out;
      lazy_static = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.5.0" { inherit profileName; }).out;
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
      unicode_width = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-width."0.1.14" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.52.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".const-oid."0.9.6" = overridableMkRustCrate (profileName: rec {
    name = "const-oid";
    version = "0.9.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c2459377285ad874054d797f3ccebf984978aa39129f6eafde5cdc8315b612f8"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".const-random."0.1.18" = overridableMkRustCrate (profileName: rec {
    name = "const-random";
    version = "0.1.18";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "87e00182fe74b066627d63b85fd550ac2998d4b0bd86bfed477a0ae4c7c71359"; };
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "const_random_macro" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".const-random-macro."0.1.16" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".const-random-macro."0.1.16" = overridableMkRustCrate (profileName: rec {
    name = "const-random-macro";
    version = "0.1.16";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f9d839f2a20b0aee515dc581a6172f2321f96cab76c1a38a4c584a194955390e"; };
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "getrandom" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.15" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "once_cell" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.20.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "tiny_keccak" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tiny-keccak."2.0.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".const_panic."0.2.10" = overridableMkRustCrate (profileName: rec {
    name = "const_panic";
    version = "0.2.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "013b6c2c3a14d678f38cd23994b02da3a1a1b6a5d1eedddfe63a5a5f11b13a81"; };
    features = builtins.concatLists [
      [ "rust_1_64" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".constant_time_eq."0.2.6" = overridableMkRustCrate (profileName: rec {
    name = "constant_time_eq";
    version = "0.2.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "21a53c0a4d288377e7415b53dcfc3c04da5cdc2cc95c8d5ac178b58f0b861ad6"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".constant_time_eq."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "constant_time_eq";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7c74b8349d32d297c9134b8c88677813a227df8f779daa29bfc29c183fe3dca6"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.4" = overridableMkRustCrate (profileName: rec {
    name = "core-foundation";
    version = "0.9.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "91e195e091a93c46f7102ec7818a2aa394e1e1771c3ab4825963fa03e45afb8f"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "link" ]
    ];
    dependencies = {
      core_foundation_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.7" { inherit profileName; }).out;
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.7" = overridableMkRustCrate (profileName: rec {
    name = "core-foundation-sys";
    version = "0.8.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "link" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.14" = overridableMkRustCrate (profileName: rec {
    name = "cpufeatures";
    version = "0.2.14";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "608697df725056feaccfa42cffdaeeec3fccc4ffc38358ecd19b243e716a78e0"; };
    dependencies = {
      ${ if hostPlatform.config == "aarch64-linux-android" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.vendor.name == "apple" || hostPlatform.parsed.cpu.name == "loongarch64" && hostPlatform.parsed.kernel.name == "linux" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crc."3.2.1" = overridableMkRustCrate (profileName: rec {
    name = "crc";
    version = "3.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "69e6e4d7b33a94f0991c26729976b10ebde1d34c3ee82408fb536164fa10d636"; };
    dependencies = {
      crc_catalog = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc-catalog."2.4.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crc-catalog."2.4.0" = overridableMkRustCrate (profileName: rec {
    name = "crc-catalog";
    version = "2.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "19d374276b40fb8bbdee95aef7c7fa6b5316ec764510eb64b8dd0e2ed0d7e7f5"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crc16."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "crc16";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "338089f42c427b86394a5ee60ff321da23a5c89c9d89514c829687b26359fcff"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crc32fast."1.4.2" = overridableMkRustCrate (profileName: rec {
    name = "crc32fast";
    version = "1.4.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a97769d94ddab943e4510d138150169a2758b5ef3eb191a9ee688de3e23ef7b3"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crossbeam."0.8.4" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam";
    version = "0.8.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1137cd7e7fc0fb5d3c5a8678be38ec56e819125d8d7907411fe24ccb943faca8"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "alloc")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "crossbeam-channel")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "crossbeam-deque")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "crossbeam-epoch")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "crossbeam-queue")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "default")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "crossbeam_channel" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-channel."0.5.13" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "crossbeam_deque" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-deque."0.8.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "crossbeam_epoch" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-epoch."0.9.18" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "crossbeam_queue" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-queue."0.3.11" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "crossbeam_utils" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.20" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crossbeam-channel."0.5.13" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam-channel";
    version = "0.5.13";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "33480d6946193aa8033910124896ca395333cae7e2d1113d1fef6c3272217df2"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "crossbeam_utils" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.20" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crossbeam-deque."0.8.5" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam-deque";
    version = "0.8.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "613f8cc01fe9cf1a3eb3d7f488fd2fa8388403e97039e2f73692932e291a770d"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      crossbeam_epoch = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-epoch."0.9.18" { inherit profileName; }).out;
      crossbeam_utils = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.20" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crossbeam-epoch."0.9.18" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam-epoch";
    version = "0.9.18";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5b82ac4a3c2ca9c3460964f020e1402edd5753411d7737aa39c3714ad1b5420e"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "std" ]
    ];
    dependencies = {
      crossbeam_utils = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.20" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crossbeam-queue."0.3.11" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam-queue";
    version = "0.3.11";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "df0346b5d5e76ac2fe4e327c5fd1118d6be7c51dfb18f9b7922923f287471e35"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "alloc")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "crossbeam_utils" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.20" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.20" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam-utils";
    version = "0.8.20";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "22ec99545bb0ed0ea7bb9b8e1e9122ea386ff8a48c0922e43f36d45ab09e0e80"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crunchy."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "crunchy";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7a81dae078cea95a014a339291cec439d2f232ebe854a9d672b796c6afafa9b7"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "limit_128" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crypto-bigint."0.5.5" = overridableMkRustCrate (profileName: rec {
    name = "crypto-bigint";
    version = "0.5.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0dc92fb57ca44df6db8059111ab3af99a63d5d0f8375d9972e319a379c6bab76"; };
    features = builtins.concatLists [
      [ "generic-array" ]
      [ "rand_core" ]
      [ "zeroize" ]
    ];
    dependencies = {
      generic_array = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" { inherit profileName; }).out;
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.6.1" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.8.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crypto-common."0.1.6" = overridableMkRustCrate (profileName: rec {
    name = "crypto-common";
    version = "0.1.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3"; };
    features = builtins.concatLists [
      [ "getrandom" ]
      [ "rand_core" ]
      [ "std" ]
    ];
    dependencies = {
      generic_array = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" { inherit profileName; }).out;
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; }).out;
      typenum = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".typenum."1.17.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crypto-mac."0.10.0" = overridableMkRustCrate (profileName: rec {
    name = "crypto-mac";
    version = "0.10.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4857fd85a0c34b3c3297875b747c1e02e06b6a0ea32dd892d8192b9ce0813ea6"; };
    dependencies = {
      generic_array = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.6.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".csv."1.3.0" = overridableMkRustCrate (profileName: rec {
    name = "csv";
    version = "1.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ac574ff4d437a7b5ad237ef331c17ccca63c46479e5b5453eb8e10bb99a759fe"; };
    dependencies = {
      csv_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".csv-core."0.1.11" { inherit profileName; }).out;
      itoa = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.11" { inherit profileName; }).out;
      ryu = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ryu."1.0.18" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".csv-core."0.1.11" = overridableMkRustCrate (profileName: rec {
    name = "csv-core";
    version = "0.1.11";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5efa2b3d7902f4b634a20cae3c9c4e6209dc4779feb6863329607560143efa70"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      memchr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ctr."0.9.2" = overridableMkRustCrate (profileName: rec {
    name = "ctr";
    version = "0.9.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0369ee1ad671834580515889b80f2ea915f23b8be8d0daa4bbaf2ac5c7590835"; };
    dependencies = {
      cipher = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cipher."0.4.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".curve25519-dalek."4.1.3" = overridableMkRustCrate (profileName: rec {
    name = "curve25519-dalek";
    version = "4.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "97fb8b7c4503de7d6ae7b42ab72a5a59857b4c937ec27a3d4539dba95b5ab2be"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "digest" ]
      [ "precomputed-tables" ]
      [ "zeroize" ]
    ];
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "x86_64" then "cpufeatures" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.14" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "x86_64" then "curve25519_dalek_derive" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".curve25519-dalek-derive."0.1.1" { profileName = "__noProfile"; }).out;
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" { inherit profileName; }).out;
      ${ if false then "fiat_crypto" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fiat-crypto."0.2.9" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.6.1" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.8.1" { inherit profileName; }).out;
    };
    buildDependencies = {
      rustc_version = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc_version."0.4.1" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".curve25519-dalek-derive."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "curve25519-dalek-derive";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f46882e17999c6cc590af592290432be3bce0428cb0d5f8b6715e4dc7b383eb3"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".darling."0.13.4" = overridableMkRustCrate (profileName: rec {
    name = "darling";
    version = "0.13.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a01d95850c592940db9b8194bc39f4bc0e89dee5c4265e4b1807c34a9aba453c"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic") "default")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic") "suggestions")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic" then "darling_core" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".darling_core."0.13.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic" then "darling_macro" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".darling_macro."0.13.4" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".darling."0.20.10" = overridableMkRustCrate (profileName: rec {
    name = "darling";
    version = "0.20.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6f63b86c8a8826a49b8c21f08a2d07338eec8d900540f8630dc76284be802989"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "suggestions" ]
    ];
    dependencies = {
      darling_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".darling_core."0.20.10" { inherit profileName; }).out;
      darling_macro = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".darling_macro."0.20.10" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".darling_core."0.13.4" = overridableMkRustCrate (profileName: rec {
    name = "darling_core";
    version = "0.13.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "859d65a907b6852c9361e3185c862aae7fafd2887876799fa55f5f99dc40d610"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic") "strsim")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic") "suggestions")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic" then "fnv" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic" then "ident_case" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ident_case."1.0.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic" then "strsim" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".strsim."0.10.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".darling_core."0.20.10" = overridableMkRustCrate (profileName: rec {
    name = "darling_core";
    version = "0.20.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "95133861a8032aaea082871032f5815eb9e98cef03fa916ab4500513994df9e5"; };
    features = builtins.concatLists [
      [ "strsim" ]
      [ "suggestions" ]
    ];
    dependencies = {
      fnv = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; }).out;
      ident_case = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ident_case."1.0.1" { inherit profileName; }).out;
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      strsim = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".strsim."0.11.1" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".darling_macro."0.13.4" = overridableMkRustCrate (profileName: rec {
    name = "darling_macro";
    version = "0.13.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9c972679f83bdf9c42bd905396b6c3588a843a17f0f16dfcfa3e2c5d57441835"; };
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic" then "darling_core" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".darling_core."0.13.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".darling_macro."0.20.10" = overridableMkRustCrate (profileName: rec {
    name = "darling_macro";
    version = "0.20.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d336a2a514f6ccccaa3e09b02d41d35330c07ddf03a62165fcec10bb561c7806"; };
    dependencies = {
      darling_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".darling_core."0.20.10" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dashmap."6.1.0" = overridableMkRustCrate (profileName: rec {
    name = "dashmap";
    version = "6.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5041cc499144891f3790297212f32a74fb938e5136a14943f338ef9e0ae276cf"; };
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      crossbeam_utils = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.20" { inherit profileName; }).out;
      hashbrown = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.14.5" { inherit profileName; }).out;
      lock_api = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lock_api."0.4.12" { inherit profileName; }).out;
      once_cell = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.20.1" { inherit profileName; }).out;
      parking_lot_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot_core."0.9.10" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".data-encoding."2.6.0" = overridableMkRustCrate (profileName: rec {
    name = "data-encoding";
    version = "2.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e8566979429cf69b49a5c740c60791108e86440e8be149bbea4fe54d2c32d6e2"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dbl."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "dbl";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bd2735a791158376708f9347fe8faba9667589d82427ef3aed6794a8981de3d9"; };
    dependencies = {
      generic_array = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".deadpool."0.10.0" = overridableMkRustCrate (profileName: rec {
    name = "deadpool";
    version = "0.10.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fb84100978c1c7b37f09ed3ce3e5f843af02c2a2c431bae5b19230dad2c1b490"; };
    features = builtins.concatLists [
      [ "async-trait" ]
      [ "default" ]
      [ "managed" ]
      [ "rt_tokio_1" ]
      [ "unmanaged" ]
    ];
    dependencies = {
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.83" { profileName = "__noProfile"; }).out;
      deadpool_runtime = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".deadpool-runtime."0.1.4" { inherit profileName; }).out;
      num_cpus = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.16.0" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".deadpool."0.12.1" = overridableMkRustCrate (profileName: rec {
    name = "deadpool";
    version = "0.12.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6541a3916932fe57768d4be0b1ffb5ec7cbf74ca8c903fdfd5c0fe8aa958f0ed"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/deadpool" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") "default")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/deadpool" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" || rootFeatures' ? "tests/redis") "managed")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres") "rt_tokio_1")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/deadpool" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") "unmanaged")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/deadpool" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" || rootFeatures' ? "tests/redis" then "deadpool_runtime" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".deadpool-runtime."0.1.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/deadpool" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" || rootFeatures' ? "tests/redis" then "num_cpus" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.16.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/deadpool" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" || rootFeatures' ? "tests/redis" then "tokio" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".deadpool-postgres."0.14.0" = overridableMkRustCrate (profileName: rec {
    name = "deadpool-postgres";
    version = "0.14.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1ab8a4ea925ce79678034870834602a2980f4b88c09e97feb266496dbb4493d2"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres") "default")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres") "rt_tokio_1")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" then "async_trait" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.83" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" then "deadpool" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".deadpool."0.12.1" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres") && hostPlatform.parsed.cpu.name == "wasm32" then "getrandom" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.15" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" then "tokio" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres") && (!(hostPlatform.parsed.cpu.name == "wasm32") || hostPlatform.parsed.cpu.name == "wasm32") then "tokio_postgres" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-postgres."0.7.12" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" then "tracing" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".deadpool-runtime."0.1.4" = overridableMkRustCrate (profileName: rec {
    name = "deadpool-runtime";
    version = "0.1.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "092966b41edc516079bdf31ec78a2e0588d1d0c08f78b91d8307215928642b2b"; };
    features = builtins.concatLists [
      [ "tokio_1" ]
    ];
    dependencies = {
      tokio_1 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".decancer."3.2.4" = overridableMkRustCrate (profileName: rec {
    name = "decancer";
    version = "3.2.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "58bf04658e77cbb82c3c8b64d094e3d2bc75d4e182b0425a51196e5614108270"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "lazy_static" ]
      [ "leetspeak" ]
      [ "options" ]
      [ "regex" ]
    ];
    dependencies = {
      lazy_static = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.5.0" { inherit profileName; }).out;
      paste = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".paste."1.0.15" { profileName = "__noProfile"; }).out;
      regex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.11.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".deflate64."0.1.9" = overridableMkRustCrate (profileName: rec {
    name = "deflate64";
    version = "0.1.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "da692b8d1080ea3045efaab14434d40468c3d8657e42abddfffca87b428f4c1b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".der."0.7.9" = overridableMkRustCrate (profileName: rec {
    name = "der";
    version = "0.7.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f55bf8e7b65898637379c1b74eb1551107c8294ed26d855ceb9fd1a09cfc9bc0"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "oid" ]
      [ "pem" ]
      [ "std" ]
      [ "zeroize" ]
    ];
    dependencies = {
      const_oid = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".const-oid."0.9.6" { inherit profileName; }).out;
      pem_rfc7468 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pem-rfc7468."0.7.0" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.8.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".der-parser."8.2.0" = overridableMkRustCrate (profileName: rec {
    name = "der-parser";
    version = "8.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dbd676fbbab537128ef0278adb5576cf363cff6aa22a7b24effe97347cfab61e"; };
    features = builtins.concatLists [
      [ "bigint" ]
      [ "default" ]
      [ "num-bigint" ]
      [ "std" ]
    ];
    dependencies = {
      asn1_rs = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".asn1-rs."0.5.2" { inherit profileName; }).out;
      displaydoc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".displaydoc."0.2.5" { profileName = "__noProfile"; }).out;
      nom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".nom."7.1.3" { inherit profileName; }).out;
      num_bigint = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-bigint."0.4.6" { inherit profileName; }).out;
      num_traits = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.19" { inherit profileName; }).out;
      rusticata_macros = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rusticata-macros."4.1.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".der-parser."9.0.0" = overridableMkRustCrate (profileName: rec {
    name = "der-parser";
    version = "9.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5cd0a5c643689626bec213c4d8bd4d96acc8ffdb4ad4bb6bc16abf27d5f4b553"; };
    features = builtins.concatLists [
      [ "bigint" ]
      [ "default" ]
      [ "num-bigint" ]
      [ "std" ]
    ];
    dependencies = {
      asn1_rs = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".asn1-rs."0.6.2" { inherit profileName; }).out;
      displaydoc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".displaydoc."0.2.5" { profileName = "__noProfile"; }).out;
      nom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".nom."7.1.3" { inherit profileName; }).out;
      num_bigint = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-bigint."0.4.6" { inherit profileName; }).out;
      num_traits = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.19" { inherit profileName; }).out;
      rusticata_macros = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rusticata-macros."4.1.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".deranged."0.3.11" = overridableMkRustCrate (profileName: rec {
    name = "deranged";
    version = "0.3.11";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b42b6fa04a440b495c8b04d0e71b707c585f83cb9cb28cf8cd0d976c315e31b4"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "powerfmt" ]
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3") "serde")
      [ "std" ]
    ];
    dependencies = {
      powerfmt = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".powerfmt."0.2.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "serde" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".derive_arbitrary."1.3.2" = overridableMkRustCrate (profileName: rec {
    name = "derive_arbitrary";
    version = "1.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "67e77553c4162a157adbf834ebae5b415acbecbeafc7a74b0e886657506a7611"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".derive_builder."0.20.1" = overridableMkRustCrate (profileName: rec {
    name = "derive_builder";
    version = "0.20.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cd33f37ee6a119146a1781d3356a7c26028f83d779b2e04ecd45fdc75c76877b"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      derive_builder_macro = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derive_builder_macro."0.20.1" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".derive_builder_core."0.20.1" = overridableMkRustCrate (profileName: rec {
    name = "derive_builder_core";
    version = "0.20.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7431fa049613920234f22c47fdc33e6cf3ee83067091ea4277a3f8c4587aae38"; };
    features = builtins.concatLists [
      [ "lib_has_std" ]
    ];
    dependencies = {
      darling = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".darling."0.20.10" { inherit profileName; }).out;
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".derive_builder_macro."0.20.1" = overridableMkRustCrate (profileName: rec {
    name = "derive_builder_macro";
    version = "0.20.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4abae7035bf79b9877b779505d8cf3749285b80c43941eda66604841889451dc"; };
    features = builtins.concatLists [
      [ "lib_has_std" ]
    ];
    dependencies = {
      derive_builder_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".derive_builder_core."0.20.1" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".des."0.8.1" = overridableMkRustCrate (profileName: rec {
    name = "des";
    version = "0.8.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ffdd80ce8ce993de27e9f063a444a4d53ce8e8db4c1f00cc03af5ad5a9867a1e"; };
    features = builtins.concatLists [
      [ "zeroize" ]
    ];
    dependencies = {
      cipher = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cipher."0.4.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".digest."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "digest";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d3dd60d1080a57a05ab032377049e0591415d2b31afd7028356dbf3cc6dcb066"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "std" ]
    ];
    dependencies = {
      generic_array = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" = overridableMkRustCrate (profileName: rec {
    name = "digest";
    version = "0.10.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9ed9a281f7bc9b7576e61468ba615a66a5c8cfdff42420a70aa82701a3b1e292"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "block-buffer" ]
      [ "const-oid" ]
      [ "core-api" ]
      [ "default" ]
      [ "mac" ]
      [ "oid" ]
      [ "std" ]
      [ "subtle" ]
    ];
    dependencies = {
      block_buffer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".block-buffer."0.10.4" { inherit profileName; }).out;
      const_oid = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".const-oid."0.9.6" { inherit profileName; }).out;
      crypto_common = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crypto-common."0.1.6" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.6.1" { inherit profileName; }).out;
    };
  });
  
  "unknown".directory."0.10.4" = overridableMkRustCrate (profileName: rec {
    name = "directory";
    version = "0.10.4";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    features = builtins.concatLists [
      [ "enterprise" ]
      [ "test_mode" ]
    ];
    dependencies = {
      ahash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.8.11" { inherit profileName; }).out;
      argon2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".argon2."0.5.3" { inherit profileName; }).out;
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.83" { profileName = "__noProfile"; }).out;
      base64 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.22.1" { inherit profileName; }).out;
      deadpool = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".deadpool."0.10.0" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.31" { inherit profileName; }).out;
      jmap_proto = (rustPackages."unknown".jmap_proto."0.10.4" { inherit profileName; }).out;
      ldap3 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ldap3."0.11.5" { inherit profileName; }).out;
      lru_cache = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lru-cache."0.1.2" { inherit profileName; }).out;
      mail_builder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mail-builder."0.3.2" { inherit profileName; }).out;
      mail_parser = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mail-parser."0.9.4" { inherit profileName; }).out;
      mail_send = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mail-send."0.4.9" { inherit profileName; }).out;
      md5 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".md5."0.7.0" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.3" { inherit profileName; }).out;
      password_hash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".password-hash."0.5.0" { inherit profileName; }).out;
      pbkdf2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pbkdf2."0.12.2" { inherit profileName; }).out;
      proc_macros = (buildRustPackages."unknown".proc_macros."0.1.0" { profileName = "__noProfile"; }).out;
      pwhash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pwhash."1.0.0" { inherit profileName; }).out;
      regex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.11.0" { inherit profileName; }).out;
      reqwest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".reqwest."0.12.8" { inherit profileName; }).out;
      rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.23.14" { inherit profileName; }).out;
      rustls_pki_types = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pki-types."1.9.0" { inherit profileName; }).out;
      scrypt = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scrypt."0.11.0" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
      serde_json = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.128" { inherit profileName; }).out;
      sha1 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha1."0.10.6" { inherit profileName; }).out;
      sha2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" { inherit profileName; }).out;
      smtp_proto = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smtp-proto."0.1.5" { inherit profileName; }).out;
      store = (rustPackages."unknown".store."0.10.4" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
      tokio_rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-rustls."0.26.0" { inherit profileName; }).out;
      totp_rs = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".totp-rs."5.6.0" { inherit profileName; }).out;
      trc = (rustPackages."unknown".trc."0.10.4" { inherit profileName; }).out;
      utils = (rustPackages."unknown".utils."0.10.4" { inherit profileName; }).out;
    };
    devDependencies = {
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dirs-next."2.0.0" = overridableMkRustCrate (profileName: rec {
    name = "dirs-next";
    version = "2.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b98cf8ebf19c3d1b223e151f99a4f9f0690dca41414773390fc824184ac833e1"; };
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      dirs_sys_next = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".dirs-sys-next."0.1.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dirs-sys-next."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "dirs-sys-next";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4ebda144c4fe02d1f7ea1a7d9641b6fc6b580adcfa024ae48797ecdeb6825b4d"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "redox" then "redox_users" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_users."0.4.6" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "winapi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".displaydoc."0.2.5" = overridableMkRustCrate (profileName: rec {
    name = "displaydoc";
    version = "0.2.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "97369cbbc041bc366949bc74d34658d6cda5621039731c6310521892a3a20ae0"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dlv-list."0.5.2" = overridableMkRustCrate (profileName: rec {
    name = "dlv-list";
    version = "0.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "442039f5147480ba31067cb00ada1adae6892028e40e45fc5de7b7df6dcc1b5f"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "const_random" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".const-random."0.1.18" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dns-update."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "dns-update";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "14b0a9ca156a0285b2768b7fcb368b231e7736d3c13eef604c5c4203057bed33"; };
    dependencies = {
      hickory_client = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hickory-client."0.24.1" { inherit profileName; }).out;
      reqwest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".reqwest."0.12.8" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
      serde_json = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.128" { inherit profileName; }).out;
      serde_urlencoded = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_urlencoded."0.7.1" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".doc-comment."0.3.3" = overridableMkRustCrate (profileName: rec {
    name = "doc-comment";
    version = "0.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fea41bba32d969b513997752735605054bc0dfa92b4c56bf1189f2e174be7a10"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dsa."0.6.3" = overridableMkRustCrate (profileName: rec {
    name = "dsa";
    version = "0.6.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "48bc224a9084ad760195584ce5abb3c2c34a225fa312a128ad245a6b412b7689"; };
    dependencies = {
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" { inherit profileName; }).out;
      num_bigint = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-bigint-dig."0.8.4" { inherit profileName; }).out;
      num_traits = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.19" { inherit profileName; }).out;
      pkcs8 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pkcs8."0.10.2" { inherit profileName; }).out;
      rfc6979 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rfc6979."0.4.0" { inherit profileName; }).out;
      sha2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" { inherit profileName; }).out;
      signature = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".signature."2.2.0" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.8.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dyn-clone."1.0.17" = overridableMkRustCrate (profileName: rec {
    name = "dyn-clone";
    version = "1.0.17";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0d6ef0072f8a535281e4876be788938b528e9a1d43900b82c2569af7da799125"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".eax."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "eax";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9954fabd903b82b9d7a68f65f97dc96dd9ad368e40ccc907a7c19d53e6bfac28"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "getrandom" ]
    ];
    dependencies = {
      aead = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aead."0.5.2" { inherit profileName; }).out;
      cipher = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cipher."0.4.4" { inherit profileName; }).out;
      cmac = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cmac."0.7.2" { inherit profileName; }).out;
      ctr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ctr."0.9.2" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.6.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ecb."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "ecb";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1a8bfa975b1aec2145850fcaa1c6fe269a16578c44705a532ae3edc92b8881c7"; };
    features = builtins.concatLists [
      [ "block-padding" ]
      [ "default" ]
    ];
    dependencies = {
      cipher = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cipher."0.4.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ecdsa."0.16.9" = overridableMkRustCrate (profileName: rec {
    name = "ecdsa";
    version = "0.16.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ee27f32b5c5292967d2d4a9d7f1e0b0aed2c15daded5a60300e4abb9d8020bca"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "arithmetic" ]
      [ "default" ]
      [ "der" ]
      [ "digest" ]
      [ "hazmat" ]
      [ "pem" ]
      [ "pkcs8" ]
      [ "rfc6979" ]
      [ "signing" ]
      [ "spki" ]
      [ "std" ]
      [ "verifying" ]
    ];
    dependencies = {
      der = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".der."0.7.9" { inherit profileName; }).out;
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" { inherit profileName; }).out;
      elliptic_curve = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".elliptic-curve."0.13.8" { inherit profileName; }).out;
      rfc6979 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rfc6979."0.4.0" { inherit profileName; }).out;
      signature = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".signature."2.2.0" { inherit profileName; }).out;
      spki = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".spki."0.7.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ece."2.3.1" = overridableMkRustCrate (profileName: rec {
    name = "ece";
    version = "2.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c2ea1d2f2cc974957a4e2575d8e5bb494549bab66338d6320c2789abcfff5746"; };
    features = builtins.concatLists [
      [ "backend-openssl" ]
      [ "default" ]
      [ "hkdf" ]
      [ "lazy_static" ]
      [ "openssl" ]
      [ "serde" ]
      [ "serializable-keys" ]
      [ "sha2" ]
    ];
    dependencies = {
      base64 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.21.7" { inherit profileName; }).out;
      byteorder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" { inherit profileName; }).out;
      hex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" { inherit profileName; }).out;
      hkdf = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hkdf."0.12.4" { inherit profileName; }).out;
      lazy_static = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.5.0" { inherit profileName; }).out;
      once_cell = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.20.1" { inherit profileName; }).out;
      openssl = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".openssl."0.10.66" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
      sha2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.64" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ed25519."2.2.3" = overridableMkRustCrate (profileName: rec {
    name = "ed25519";
    version = "2.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "115531babc129696a58c64a4fef0a8bf9e9698629fb97e9e40767d235cfbcd53"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "std" ]
    ];
    dependencies = {
      pkcs8 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pkcs8."0.10.2" { inherit profileName; }).out;
      signature = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".signature."2.2.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ed25519-dalek."2.1.1" = overridableMkRustCrate (profileName: rec {
    name = "ed25519-dalek";
    version = "2.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4a3daa8e81a3963a60642bcc1f90a670680bd4a77535faa384e9d1c79d620871"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "fast" ]
      [ "rand_core" ]
      [ "std" ]
      [ "zeroize" ]
    ];
    dependencies = {
      curve25519_dalek = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".curve25519-dalek."4.1.3" { inherit profileName; }).out;
      ed25519 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ed25519."2.2.3" { inherit profileName; }).out;
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
      sha2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.6.1" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.8.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".either."1.13.0" = overridableMkRustCrate (profileName: rec {
    name = "either";
    version = "1.13.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "60b1af1c220855b6ceac025d3f6ecdd2b7c4894bfe9cd9bda4fbb4bc7c0d4cf0"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") "default")
      [ "use_std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".elasticsearch."8.5.0-alpha.1" = overridableMkRustCrate (profileName: rec {
    name = "elasticsearch";
    version = "8.5.0-alpha.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "40d9bd57d914cc66ce878f098f63ed7b5d5b64c30644a5adb950b008f874a6c6"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic") "rustls-tls")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic" then "base64" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.11.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic" then "bytes" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.7.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic" then "dyn_clone" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".dyn-clone."1.0.17" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic" then "lazy_static" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.5.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic" then "percent_encoding" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic" then "reqwest" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".reqwest."0.11.27" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic" then "serde" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic" then "serde_json" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.128" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic" then "serde_with" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_with."1.14.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic" then "url" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.5.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic" then "void" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".void."1.0.2" { inherit profileName; }).out;
    };
    buildDependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic" then "rustc_version" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc_version."0.2.3" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".elliptic-curve."0.13.8" = overridableMkRustCrate (profileName: rec {
    name = "elliptic-curve";
    version = "0.13.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b5e6043086bf7973472e0c7dff2142ea0b680d30e18d9cc40f267efbf222bd47"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "arithmetic" ]
      [ "digest" ]
      [ "ecdh" ]
      [ "ff" ]
      [ "group" ]
      [ "hazmat" ]
      [ "pem" ]
      [ "pkcs8" ]
      [ "sec1" ]
      [ "std" ]
    ];
    dependencies = {
      base16ct = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base16ct."0.2.0" { inherit profileName; }).out;
      crypto_bigint = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crypto-bigint."0.5.5" { inherit profileName; }).out;
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" { inherit profileName; }).out;
      ff = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ff."0.13.0" { inherit profileName; }).out;
      generic_array = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" { inherit profileName; }).out;
      group = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".group."0.13.0" { inherit profileName; }).out;
      hkdf = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hkdf."0.12.4" { inherit profileName; }).out;
      pem_rfc7468 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pem-rfc7468."0.7.0" { inherit profileName; }).out;
      pkcs8 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pkcs8."0.10.2" { inherit profileName; }).out;
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; }).out;
      sec1 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sec1."0.7.3" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.6.1" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.8.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ena."0.14.3" = overridableMkRustCrate (profileName: rec {
    name = "ena";
    version = "0.14.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3d248bdd43ce613d87415282f69b9bb99d947d290b10962dd6c56233312c2ad5"; };
    dependencies = {
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.22" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".encode_unicode."0.3.6" = overridableMkRustCrate (profileName: rec {
    name = "encode_unicode";
    version = "0.3.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a357d28ed41a50f9c765dbfe56cbc04a64e53e5fc58ba79fbc34c10ef3df831f"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".encode_unicode."1.0.0" = overridableMkRustCrate (profileName: rec {
    name = "encode_unicode";
    version = "1.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "34aa73646ffb006b8f5147f3dc182bd4bcb190227ce861fc4a4844bf8e3cb2c0"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".encoding_rs."0.8.34" = overridableMkRustCrate (profileName: rec {
    name = "encoding_rs";
    version = "0.8.34";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b45de904aa0b010bce2ab45264d0631681847fa7b6f2eaa7dab7619943bc4f59"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
    ];
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".endian-type."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "endian-type";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c34f04666d835ff5d62e058c3995147c06f42fe86ff053337632bca83e42702d"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".enum-as-inner."0.6.1" = overridableMkRustCrate (profileName: rec {
    name = "enum-as-inner";
    version = "0.6.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a1e6a265c649f3f5979b601d26f1d05ada116434c87741c9493cb56218f76cbc"; };
    dependencies = {
      heck = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".heck."0.5.0" { inherit profileName; }).out;
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".equivalent."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "equivalent";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".errno."0.3.9" = overridableMkRustCrate (profileName: rec {
    name = "errno";
    version = "0.3.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "534c5cf6194dfab3db3242765c03bbe257cf92f22b38f6bc0c58d59108a820ba"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") "std")
    ];
    dependencies = {
      ${ if (rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") && (hostPlatform.isUnix || hostPlatform.parsed.kernel.name == "hermit" || hostPlatform.parsed.kernel.name == "wasi") then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") && hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.52.0" { inherit profileName; }).out;
    };
  });
  
  "unknown".event_macro."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "event_macro";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fallible-iterator."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "fallible-iterator";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4443176a9f2c162692bd3d352d745ef9413eec5782a80d8fd6f8a1ac692a07f7"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres") "default")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fallible-iterator."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "fallible-iterator";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2acce4a10f12dc2fb14a218589d4f1f62ef011b2d0cc4b3cb1bba8e94da14649"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fallible-streaming-iterator."0.1.9" = overridableMkRustCrate (profileName: rec {
    name = "fallible-streaming-iterator";
    version = "0.1.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7360491ce676a36bf9bb3c56c1aa791658183a54d2744120f27285738d90465a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fancy-regex."0.13.0" = overridableMkRustCrate (profileName: rec {
    name = "fancy-regex";
    version = "0.13.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "531e46835a22af56d1e3b66f04844bed63158bc094a628bec1d321d9b4c44bf2"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "perf" ]
      [ "std" ]
      [ "unicode" ]
    ];
    dependencies = {
      bit_set = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bit-set."0.5.3" { inherit profileName; }).out;
      regex_automata = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-automata."0.4.8" { inherit profileName; }).out;
      regex_syntax = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.8.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".farmhash."1.1.5" = overridableMkRustCrate (profileName: rec {
    name = "farmhash";
    version = "1.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f35ce9c8fb9891c75ceadbc330752951a4e369b50af10775955aeb9af3eee34b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fast-float."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "fast-float";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "95765f67b4b18863968b4a1bd5bb576f732b29a4a28c7cd84c09fa3e2875f33c"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ff."0.13.0" = overridableMkRustCrate (profileName: rec {
    name = "ff";
    version = "0.13.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ded41244b729663b1e574f1b4fb731469f69f79c17667b5d776b16cda0479449"; };
    features = builtins.concatLists [
      [ "alloc" ]
    ];
    dependencies = {
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.6.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fiat-crypto."0.2.9" = overridableMkRustCrate (profileName: rec {
    name = "fiat-crypto";
    version = "0.2.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "28dea519a9695b9977216879a3ebfddf92f1c08c05d984f8996aecd6ecdc811d"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fixedbitset."0.4.2" = overridableMkRustCrate (profileName: rec {
    name = "fixedbitset";
    version = "0.4.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0ce7134b9999ecaf8bcd65542e436736ef32ddca1b3e06094cb6ec5755203b80"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".flate2."1.0.34" = overridableMkRustCrate (profileName: rec {
    name = "flate2";
    version = "1.0.34";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a1b589b4dc103969ad3cf85c950899926ec64300a1a46d76c03a6072957036f0"; };
    features = builtins.concatLists [
      [ "any_impl" ]
      [ "any_zlib" ]
      [ "default" ]
      [ "libz-sys" ]
      [ "miniz_oxide" ]
      [ "rust_backend" ]
      [ "zlib" ]
    ];
    dependencies = {
      crc32fast = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc32fast."1.4.2" { inherit profileName; }).out;
      libz_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libz-sys."1.1.20" { inherit profileName; }).out;
      miniz_oxide = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".miniz_oxide."0.8.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" = overridableMkRustCrate (profileName: rec {
    name = "fnv";
    version = "1.0.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "foreign-types";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f6f339eb8adc052cd2ca78910fda869aefa38d22d5cb648e6485e4d3fc06f3b1"; };
    dependencies = {
      foreign_types_shared = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types-shared."0.1.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".foreign-types-shared."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "foreign-types-shared";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".form-data."0.5.5" = overridableMkRustCrate (profileName: rec {
    name = "form-data";
    version = "0.5.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5c9f1255b81bd56192c67475eefa322f44b85440030547cea7664fd5dc248964"; };
    features = builtins.concatLists [
      [ "sync" ]
    ];
    dependencies = {
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.7.2" { inherit profileName; }).out;
      http = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."1.1.0" { inherit profileName; }).out;
      httparse = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".httparse."1.9.5" { inherit profileName; }).out;
      memchr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.4" { inherit profileName; }).out;
      mime = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mime."0.3.17" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.64" { inherit profileName; }).out;
      tracing = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".form_urlencoded."1.2.1" = overridableMkRustCrate (profileName: rec {
    name = "form_urlencoded";
    version = "1.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e13624c2627564efccf4934284bdd98cbaa14e79b0b5a141218e507b3a823456"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      percent_encoding = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".foundationdb."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "foundationdb";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "020bf4ae7238dbdb1ff01e9f981db028515cf66883c461e29faedfea130b2728"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") "default")
      (lib.optional (rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") "embedded-fdb-include")
      (lib.optional (rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") "fdb-7_1")
      (lib.optional (rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") "serde")
      (lib.optional (rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") "serde_bytes")
      (lib.optional (rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") "serde_json")
      (lib.optional (rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") "uuid")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" then "async_recursion" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-recursion."1.1.1" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" then "async_trait" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.83" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" then "foundationdb_macros" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".foundationdb-macros."0.3.0" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" then "foundationdb_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".foundationdb-sys."0.9.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" then "futures" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.31" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" then "memchr" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" then "rand" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" then "serde" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" then "serde_bytes" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_bytes."0.11.15" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" then "serde_json" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.128" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" then "static_assertions" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" then "uuid" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".uuid."1.10.0" { inherit profileName; }).out;
    };
    buildDependencies = {
      ${ if rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" then "foundationdb_gen" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".foundationdb-gen."0.9.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".foundationdb-gen."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "foundationdb-gen";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "36878d54a76a48e794d0fe89be2096ab5968b071e7ec25f7becfe7846f55fa77"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") "embedded-fdb-include")
      (lib.optional (rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") "fdb-7_1")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" then "xml" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".xml-rs."0.8.22" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".foundationdb-macros."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "foundationdb-macros";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f8db6653cbc621a3810d95d55bd342be3e71181d6df21a4eb29ef986202d3f9c"; };
    dependencies = {
      ${ if rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" then "try_map" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".try_map."0.3.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".foundationdb-sys."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "foundationdb-sys";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ace2f49db8614b7d7e3b656a12e0059b5fbd0a4da3410b1797374bec3db269fa"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") "embedded-fdb-include")
      (lib.optional (rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") "fdb-7_1")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
    };
    buildDependencies = {
      ${ if rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" then "bindgen" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bindgen."0.69.4" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".frunk."0.4.3" = overridableMkRustCrate (profileName: rec {
    name = "frunk";
    version = "0.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "874b6a17738fc273ec753618bac60ddaeac48cb1d7684c3e7bd472e57a28b817"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "alloc")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "default")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "frunk_proc_macros")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "proc-macros")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "validated")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "frunk_core" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".frunk_core."0.4.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "frunk_derives" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".frunk_derives."0.4.3" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "frunk_proc_macros" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".frunk_proc_macros."0.1.3" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "serde" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".frunk_core."0.4.3" = overridableMkRustCrate (profileName: rec {
    name = "frunk_core";
    version = "0.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3529a07095650187788833d585c219761114005d5976185760cf794d265b6a5c"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "alloc")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "serde" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".frunk_derives."0.4.3" = overridableMkRustCrate (profileName: rec {
    name = "frunk_derives";
    version = "0.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e99b8b3c28ae0e84b604c75f721c21dc77afb3706076af5e8216d15fd1deaae3"; };
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "frunk_proc_macro_helpers" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".frunk_proc_macro_helpers."0.1.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".frunk_proc_macro_helpers."0.1.3" = overridableMkRustCrate (profileName: rec {
    name = "frunk_proc_macro_helpers";
    version = "0.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "05a956ef36c377977e512e227dcad20f68c2786ac7a54dacece3746046fea5ce"; };
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "frunk_core" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".frunk_core."0.4.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".frunk_proc_macros."0.1.3" = overridableMkRustCrate (profileName: rec {
    name = "frunk_proc_macros";
    version = "0.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "67e86c2c9183662713fea27ea527aad20fb15fee635a71081ff91bf93df4dc51"; };
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "frunk_core" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".frunk_core."0.4.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "frunk_proc_macro_helpers" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".frunk_proc_macro_helpers."0.1.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".funty."2.0.0" = overridableMkRustCrate (profileName: rec {
    name = "funty";
    version = "2.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e6d5a32815ae3f33302d95fdcb2ce17862f8c65363dcfd29360480ba1001fc9c"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures."0.3.31" = overridableMkRustCrate (profileName: rec {
    name = "futures";
    version = "0.3.31";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "65bc07b1a8bc7c85c5f2e110c476c7389b4554ba72af57d8445ea63a576b0876"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "async-await" ]
      [ "default" ]
      [ "executor" ]
      [ "futures-executor" ]
      [ "std" ]
    ];
    dependencies = {
      futures_channel = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.31" { inherit profileName; }).out;
      futures_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" { inherit profileName; }).out;
      futures_executor = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-executor."0.3.31" { inherit profileName; }).out;
      futures_io = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.31" { inherit profileName; }).out;
      futures_sink = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.31" { inherit profileName; }).out;
      futures_task = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-task."0.3.31" { inherit profileName; }).out;
      futures_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.31" = overridableMkRustCrate (profileName: rec {
    name = "futures-channel";
    version = "0.3.31";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2dff15bf788c671c1934e366d07e30c1814a8ef514e1af724a602e8a2fbe1b10"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "futures-sink" ]
      [ "sink" ]
      [ "std" ]
    ];
    dependencies = {
      futures_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" { inherit profileName; }).out;
      futures_sink = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.31" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" = overridableMkRustCrate (profileName: rec {
    name = "futures-core";
    version = "0.3.31";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "05f29059c0c2090612e8d742178b0580d2dc940c837851ad723096f87af6663e"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-executor."0.3.31" = overridableMkRustCrate (profileName: rec {
    name = "futures-executor";
    version = "0.3.31";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1e28d1d997f585e54aebc3f97d39e72338912123a67330d723fdbb564d646c9f"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      futures_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" { inherit profileName; }).out;
      futures_task = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-task."0.3.31" { inherit profileName; }).out;
      futures_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.31" = overridableMkRustCrate (profileName: rec {
    name = "futures-io";
    version = "0.3.31";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9e5c1b78ca4aae1ac06c48a526a655760685149f0d465d21f37abfe57ce075c6"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-macro."0.3.31" = overridableMkRustCrate (profileName: rec {
    name = "futures-macro";
    version = "0.3.31";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "162ee34ebcb7c64a8abebc059ce0fee27c2262618d7b60ed8faf72fef13c3650"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.31" = overridableMkRustCrate (profileName: rec {
    name = "futures-sink";
    version = "0.3.31";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e575fab7d1e0dcb8d0c7bcf9a63ee213816ab51902e6d244a95819acacf1d4f7"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-task."0.3.31" = overridableMkRustCrate (profileName: rec {
    name = "futures-task";
    version = "0.3.31";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f90f7dce0722e95104fcb095585910c0977252f286e354b5e3bd38902cd99988"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" = overridableMkRustCrate (profileName: rec {
    name = "futures-util";
    version = "0.3.31";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9fa08315bb612088cc391249efdc3bc77536f16c91f6cf495e6fbe85b20a4a81"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "async-await" ]
      [ "async-await-macro" ]
      [ "channel" ]
      [ "default" ]
      [ "futures-channel" ]
      [ "futures-io" ]
      [ "futures-macro" ]
      [ "futures-sink" ]
      [ "io" ]
      [ "memchr" ]
      [ "sink" ]
      [ "slab" ]
      [ "std" ]
    ];
    dependencies = {
      futures_channel = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.31" { inherit profileName; }).out;
      futures_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" { inherit profileName; }).out;
      futures_io = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.31" { inherit profileName; }).out;
      futures_macro = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-macro."0.3.31" { profileName = "__noProfile"; }).out;
      futures_sink = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.31" { inherit profileName; }).out;
      futures_task = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-task."0.3.31" { inherit profileName; }).out;
      memchr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.4" { inherit profileName; }).out;
      pin_project_lite = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.14" { inherit profileName; }).out;
      pin_utils = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-utils."0.1.0" { inherit profileName; }).out;
      slab = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fxhash."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "fxhash";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c31b6d751ae2c7f11320402d34e41349dd1016f8d5d45e48c4312bc8625af50c"; };
    dependencies = {
      byteorder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" = overridableMkRustCrate (profileName: rec {
    name = "generic-array";
    version = "0.14.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "85649ca51fd72272d7821adaf274ad91c288277713d9c18820d8499a7ff69e9a"; };
    features = builtins.concatLists [
      [ "more_lengths" ]
      [ "zeroize" ]
    ];
    dependencies = {
      typenum = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".typenum."1.17.0" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.8.1" { inherit profileName; }).out;
    };
    buildDependencies = {
      version_check = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.5" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".generic-array."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "generic-array";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "96512db27971c2c3eece70a1e106fbe6c87760234e31e8f7e5634912fe52794a"; };
    dependencies = {
      typenum = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".typenum."1.17.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gethostname."0.4.3" = overridableMkRustCrate (profileName: rec {
    name = "gethostname";
    version = "0.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0176e0459c2e4a1fe232f984bca6890e681076abb9934f6cea7c326f3fc47818"; };
    dependencies = {
      ${ if !hostPlatform.isWindows then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "windows_targets" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.48.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.15" = overridableMkRustCrate (profileName: rec {
    name = "getrandom";
    version = "0.2.15";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c4567c8db10ae91089c99af84c68c38da3ec2f087c3f82960bcdbf3656b6f4d7"; };
    features = builtins.concatLists [
      [ "js" ]
      [ "js-sys" ]
      [ "std" ]
      [ "wasm-bindgen" ]
    ];
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if (hostPlatform.parsed.cpu.name == "wasm32" || hostPlatform.parsed.cpu.name == "wasm64") && hostPlatform.parsed.kernel.name == "unknown" then "js_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.70" { inherit profileName; }).out;
      ${ if hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "wasi" then "wasi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasi."0.11.0+wasi-snapshot-preview1" { inherit profileName; }).out;
      ${ if (hostPlatform.parsed.cpu.name == "wasm32" || hostPlatform.parsed.cpu.name == "wasm64") && hostPlatform.parsed.kernel.name == "unknown" then "wasm_bindgen" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.93" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ghash."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "ghash";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f0d8a4362ccb29cb0b265253fb0a2728f592895ee6854fd9bc13f2ffda266ff1"; };
    dependencies = {
      opaque_debug = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".opaque-debug."0.3.1" { inherit profileName; }).out;
      polyval = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".polyval."0.6.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gimli."0.31.1" = overridableMkRustCrate (profileName: rec {
    name = "gimli";
    version = "0.31.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "07e28edb80900c19c28f1072f2e8aeca7fa06b23cd4169cefe1af5aa3260783f"; };
    features = builtins.concatLists [
      [ "read" ]
      [ "read-core" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".glob."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "glob";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d2fabcfbdc87f4758337ca535fb41a6d701b65693ce38287d856d1674551ec9b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".group."0.13.0" = overridableMkRustCrate (profileName: rec {
    name = "group";
    version = "0.13.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f0f9ef7462f7c099f518d754361858f86d8a07af53ba9af0fe635bbccb151a63"; };
    features = builtins.concatLists [
      [ "alloc" ]
    ];
    dependencies = {
      ff = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ff."0.13.0" { inherit profileName; }).out;
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.6.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".h2."0.3.26" = overridableMkRustCrate (profileName: rec {
    name = "h2";
    version = "0.3.26";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "81fe527a889e1532da5c525686d96d4c2e74cdd345badf8dfef9f6b39dd5f5e8"; };
    features = builtins.concatLists [
      [ "stream" ]
    ];
    dependencies = {
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.7.2" { inherit profileName; }).out;
      fnv = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; }).out;
      futures_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" { inherit profileName; }).out;
      futures_sink = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.31" { inherit profileName; }).out;
      futures_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" { inherit profileName; }).out;
      http = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.12" { inherit profileName; }).out;
      indexmap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."2.6.0" { inherit profileName; }).out;
      slab = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.9" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
      tokio_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-util."0.7.12" { inherit profileName; }).out;
      tracing = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".h2."0.4.6" = overridableMkRustCrate (profileName: rec {
    name = "h2";
    version = "0.4.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "524e8ac6999421f49a846c2d4411f337e53497d8ec55d67753beffa43c5d9205"; };
    dependencies = {
      atomic_waker = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".atomic-waker."1.1.2" { inherit profileName; }).out;
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.7.2" { inherit profileName; }).out;
      fnv = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; }).out;
      futures_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" { inherit profileName; }).out;
      futures_sink = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.31" { inherit profileName; }).out;
      http = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."1.1.0" { inherit profileName; }).out;
      indexmap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."2.6.0" { inherit profileName; }).out;
      slab = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.9" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
      tokio_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-util."0.7.12" { inherit profileName; }).out;
      tracing = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.12.3" = overridableMkRustCrate (profileName: rec {
    name = "hashbrown";
    version = "0.12.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8a9ee70c43aaf417c914396645a0fa852624801b24ebb7ae78fe8272889ac888"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "ahash")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "default")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "inline-more")
      [ "raw" ]
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "ahash" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.7.8" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.14.5" = overridableMkRustCrate (profileName: rec {
    name = "hashbrown";
    version = "0.14.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e5274423e17b7c9fc20b6e7e208532f9b19825d82dfd615708b70edd83df41f1"; };
    features = builtins.concatLists [
      [ "ahash" ]
      [ "allocator-api2" ]
      [ "default" ]
      [ "inline-more" ]
      [ "raw" ]
    ];
    dependencies = {
      ahash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.8.11" { inherit profileName; }).out;
      allocator_api2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".allocator-api2."0.2.18" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.15.0" = overridableMkRustCrate (profileName: rec {
    name = "hashbrown";
    version = "0.15.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1e087f84d4f86bf4b218b927129862374b72199ae7d8657835f1e89000eea4fb"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hashlink."0.9.1" = overridableMkRustCrate (profileName: rec {
    name = "hashlink";
    version = "0.9.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6ba4ff7128dee98c7dc9794b6a411377e1404dba1c97deb8d1a55297bd25d8af"; };
    dependencies = {
      hashbrown = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.14.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".heck."0.4.1" = overridableMkRustCrate (profileName: rec {
    name = "heck";
    version = "0.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "95505c38b4572b2d910cecb0281560f54b440a19336cbbcb27bf6ce6adc6f5a8"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".heck."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "heck";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2304e00983f87ffb38b55b444b5e3b60a884b5d30c0fca7d82fe33449bbe55ea"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hermit-abi."0.3.9" = overridableMkRustCrate (profileName: rec {
    name = "hermit-abi";
    version = "0.3.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d231dfb89cfffdbc30e7fc41579ed6066ad03abda9e567ccafae602b97ec5024"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hermit-abi."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "hermit-abi";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fbf6a919d6cf397374f7dfeeea91d974c7c0a7221d0d0f4f20d859d329e53fcc"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" = overridableMkRustCrate (profileName: rec {
    name = "hex";
    version = "0.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hickory-client."0.24.1" = overridableMkRustCrate (profileName: rec {
    name = "hickory-client";
    version = "0.24.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bab9683b08d8f8957a857b0236455d80e1886eaa8c6178af556aa7871fb61b55"; };
    features = builtins.concatLists [
      [ "dns-over-https" ]
      [ "dns-over-https-rustls" ]
      [ "dns-over-rustls" ]
      [ "dns-over-tls" ]
      [ "dnssec" ]
      [ "dnssec-ring" ]
      [ "rustls" ]
    ];
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      data_encoding = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".data-encoding."2.6.0" { inherit profileName; }).out;
      futures_channel = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.31" { inherit profileName; }).out;
      futures_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" { inherit profileName; }).out;
      hickory_proto = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hickory-proto."0.24.1" { inherit profileName; }).out;
      once_cell = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.20.1" { inherit profileName; }).out;
      radix_trie = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".radix_trie."0.2.1" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.21.12" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.64" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
      tracing = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hickory-proto."0.24.1" = overridableMkRustCrate (profileName: rec {
    name = "hickory-proto";
    version = "0.24.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "07698b8420e2f0d6447a436ba999ec85d8fbf2a398bbd737b82cac4a2e96e512"; };
    features = builtins.concatLists [
      [ "bytes" ]
      [ "dns-over-https" ]
      [ "dns-over-https-rustls" ]
      [ "dns-over-rustls" ]
      [ "dns-over-tls" ]
      [ "dnssec" ]
      [ "dnssec-ring" ]
      [ "h2" ]
      [ "http" ]
      [ "ring" ]
      [ "rustls" ]
      [ "rustls-pemfile" ]
      [ "text-parsing" ]
      [ "tokio" ]
      [ "tokio-runtime" ]
      [ "tokio-rustls" ]
    ];
    dependencies = {
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.83" { profileName = "__noProfile"; }).out;
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.7.2" { inherit profileName; }).out;
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      data_encoding = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".data-encoding."2.6.0" { inherit profileName; }).out;
      enum_as_inner = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".enum-as-inner."0.6.1" { profileName = "__noProfile"; }).out;
      futures_channel = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.31" { inherit profileName; }).out;
      futures_io = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.31" { inherit profileName; }).out;
      futures_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" { inherit profileName; }).out;
      h2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".h2."0.3.26" { inherit profileName; }).out;
      http = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.12" { inherit profileName; }).out;
      idna = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".idna."0.4.0" { inherit profileName; }).out;
      ipnet = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ipnet."2.10.1" { inherit profileName; }).out;
      once_cell = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.20.1" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      ring = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.16.20" { inherit profileName; }).out;
      rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.21.12" { inherit profileName; }).out;
      rustls_pemfile = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pemfile."1.0.4" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.64" { inherit profileName; }).out;
      tinyvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinyvec."1.8.0" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
      tokio_rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-rustls."0.24.1" { inherit profileName; }).out;
      tracing = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
      url = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.5.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hickory-resolver."0.24.1" = overridableMkRustCrate (profileName: rec {
    name = "hickory-resolver";
    version = "0.24.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "28757f23aa75c98f254cf0405e6d8c25b831b32921b050a66692427679b1f243"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "dns-over-rustls" ]
      [ "dns-over-tls" ]
      [ "dnssec" ]
      [ "dnssec-ring" ]
      [ "ipconfig" ]
      [ "resolv-conf" ]
      [ "rustls" ]
      [ "system-config" ]
      [ "tokio" ]
      [ "tokio-runtime" ]
      [ "tokio-rustls" ]
    ];
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      futures_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" { inherit profileName; }).out;
      hickory_proto = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hickory-proto."0.24.1" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "ipconfig" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ipconfig."0.3.2" { inherit profileName; }).out;
      lru_cache = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lru-cache."0.1.2" { inherit profileName; }).out;
      once_cell = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.20.1" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.3" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      resolv_conf = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".resolv-conf."0.7.0" { inherit profileName; }).out;
      rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.21.12" { inherit profileName; }).out;
      smallvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.13.2" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.64" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
      tokio_rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-rustls."0.24.1" { inherit profileName; }).out;
      tracing = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hkdf."0.12.4" = overridableMkRustCrate (profileName: rec {
    name = "hkdf";
    version = "0.12.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7b5f8eb2ad728638ea2c7d47a21db23b7b58a72ed6a38256b8a1849f15fbbdf7"; };
    dependencies = {
      hmac = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hmac."0.12.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hmac."0.10.1" = overridableMkRustCrate (profileName: rec {
    name = "hmac";
    version = "0.10.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c1441c6b1e930e2817404b5046f1f989899143a12bf92de603b69f4e0aee1e15"; };
    dependencies = {
      crypto_mac = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crypto-mac."0.10.0" { inherit profileName; }).out;
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.9.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hmac."0.12.1" = overridableMkRustCrate (profileName: rec {
    name = "hmac";
    version = "0.12.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6c49c37c09c17a53d937dfbb742eb3a961d65a994e6bcdcf37e7399d0cc8ab5e"; };
    features = builtins.concatLists [
      [ "reset" ]
    ];
    dependencies = {
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".home."0.5.9" = overridableMkRustCrate (profileName: rec {
    name = "home";
    version = "0.5.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e3d1354bf6b7235cb4a0576c2619fd4ed18183f689b12b006a0ee7329eeff9a5"; };
    dependencies = {
      ${ if (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" || rootFeatures' ? "tests/s3") && hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.52.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hostname."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "hostname";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3c731c3e10504cc8ed35cfe2f1db4c9274c3d35fa486e3b31df46f068ef3e867"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      ${ if hostPlatform.isUnix || hostPlatform.parsed.kernel.name == "redox" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
      match_cfg = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".match_cfg."0.1.0" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "windows" then "winapi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hostname."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "hostname";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f9c7c7c8ac16c798734b8a24560c1362120597c40d5e1459f09498f8f6c8f2ba"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if hostPlatform.isUnix || hostPlatform.parsed.kernel.name == "redox" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "windows" then "windows" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows."0.52.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".http."0.2.12" = overridableMkRustCrate (profileName: rec {
    name = "http";
    version = "0.2.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "601cbb57e577e2f5ef5be8e7b83f0f63994f25aa94d673e54a92d5c516d101f1"; };
    dependencies = {
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.7.2" { inherit profileName; }).out;
      fnv = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; }).out;
      itoa = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.11" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".http."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "http";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "21b9ddb458710bc376481b842f5da65cdf31522de232c1ca8146abce2a358258"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.7.2" { inherit profileName; }).out;
      fnv = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; }).out;
      itoa = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.11" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".http-body."0.4.6" = overridableMkRustCrate (profileName: rec {
    name = "http-body";
    version = "0.4.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7ceab25649e9960c0311ea418d17bee82c0dcec1bd053b5f9a66e265a693bed2"; };
    dependencies = {
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.7.2" { inherit profileName; }).out;
      http = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.12" { inherit profileName; }).out;
      pin_project_lite = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.14" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".http-body."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "http-body";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1efedce1fb8e6913f23e0c92de8e62cd5b772a67e7b3946df930a62566c93184"; };
    dependencies = {
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.7.2" { inherit profileName; }).out;
      http = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."1.1.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".http-body-util."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "http-body-util";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "793429d76616a256bcb62c2a2ec2bed781c8307e797e2598c50010f2bee2544f"; };
    dependencies = {
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.7.2" { inherit profileName; }).out;
      futures_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" { inherit profileName; }).out;
      http = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."1.1.0" { inherit profileName; }).out;
      http_body = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body."1.0.1" { inherit profileName; }).out;
      pin_project_lite = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.14" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".httparse."1.9.5" = overridableMkRustCrate (profileName: rec {
    name = "httparse";
    version = "1.9.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7d71d3574edd2771538b901e6549113b4006ece66150fb69c0fb6d9a2adae946"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".httpdate."1.0.3" = overridableMkRustCrate (profileName: rec {
    name = "httpdate";
    version = "1.0.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "df3b46402a9d5adb4c86a0cf463f42e19994e3ee891101b1841f30a545cb49a9"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".human-size."0.4.3" = overridableMkRustCrate (profileName: rec {
    name = "human-size";
    version = "0.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9994b79e8c1a39b3166c63ae7823bb2b00831e2a96a31399c50fe69df408eaeb"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hyper."0.14.30" = overridableMkRustCrate (profileName: rec {
    name = "hyper";
    version = "0.14.30";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a152ddd61dfaec7273fe8419ab357f33aee0d914c5f4efbf0d96fa749eea5ec9"; };
    features = builtins.concatLists [
      [ "client" ]
      [ "h2" ]
      [ "http1" ]
      [ "http2" ]
      [ "runtime" ]
      [ "socket2" ]
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3") "stream")
      [ "tcp" ]
    ];
    dependencies = {
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.7.2" { inherit profileName; }).out;
      futures_channel = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.31" { inherit profileName; }).out;
      futures_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" { inherit profileName; }).out;
      futures_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" { inherit profileName; }).out;
      h2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".h2."0.3.26" { inherit profileName; }).out;
      http = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.12" { inherit profileName; }).out;
      http_body = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body."0.4.6" { inherit profileName; }).out;
      httparse = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".httparse."1.9.5" { inherit profileName; }).out;
      httpdate = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".httpdate."1.0.3" { inherit profileName; }).out;
      itoa = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.11" { inherit profileName; }).out;
      pin_project_lite = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.14" { inherit profileName; }).out;
      socket2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".socket2."0.5.7" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
      tower_service = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-service."0.3.3" { inherit profileName; }).out;
      tracing = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
      want = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".want."0.3.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hyper."1.4.1" = overridableMkRustCrate (profileName: rec {
    name = "hyper";
    version = "1.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "50dfd22e0e76d0f662d429a5f80fcaf3855009297eab6a0a9f8543834744ba05"; };
    features = builtins.concatLists [
      [ "client" ]
      [ "default" ]
      [ "http1" ]
      [ "http2" ]
      [ "server" ]
    ];
    dependencies = {
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.7.2" { inherit profileName; }).out;
      futures_channel = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.31" { inherit profileName; }).out;
      futures_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" { inherit profileName; }).out;
      h2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".h2."0.4.6" { inherit profileName; }).out;
      http = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."1.1.0" { inherit profileName; }).out;
      http_body = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body."1.0.1" { inherit profileName; }).out;
      httparse = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".httparse."1.9.5" { inherit profileName; }).out;
      httpdate = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".httpdate."1.0.3" { inherit profileName; }).out;
      itoa = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.11" { inherit profileName; }).out;
      pin_project_lite = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.14" { inherit profileName; }).out;
      smallvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.13.2" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
      want = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".want."0.3.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hyper-rustls."0.24.2" = overridableMkRustCrate (profileName: rec {
    name = "hyper-rustls";
    version = "0.24.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ec3efd23720e2049821a693cbc7e65ea87c72f1c58ff2f9522ff332b1491e590"; };
    dependencies = {
      futures_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" { inherit profileName; }).out;
      http = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.12" { inherit profileName; }).out;
      hyper = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper."0.14.30" { inherit profileName; }).out;
      rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.21.12" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
      tokio_rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-rustls."0.24.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hyper-rustls."0.27.3" = overridableMkRustCrate (profileName: rec {
    name = "hyper-rustls";
    version = "0.27.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "08afdbb5c31130e3034af566421053ab03787c640246a446327f550d11bcb333"; };
    features = builtins.concatLists [
      [ "http1" ]
      [ "http2" ]
      [ "ring" ]
      [ "tls12" ]
      [ "webpki-roots" ]
      [ "webpki-tokio" ]
    ];
    dependencies = {
      futures_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" { inherit profileName; }).out;
      http = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."1.1.0" { inherit profileName; }).out;
      hyper = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper."1.4.1" { inherit profileName; }).out;
      hyper_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper-util."0.1.9" { inherit profileName; }).out;
      rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.23.14" { inherit profileName; }).out;
      pki_types = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pki-types."1.9.0" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
      tokio_rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-rustls."0.26.0" { inherit profileName; }).out;
      tower_service = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-service."0.3.3" { inherit profileName; }).out;
      webpki_roots = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webpki-roots."0.26.6" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hyper-timeout."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "hyper-timeout";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3203a961e5c83b6f5498933e78b6b263e208c197b63e9c6c53cc82ffd3f63793"; };
    dependencies = {
      hyper = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper."1.4.1" { inherit profileName; }).out;
      hyper_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper-util."0.1.9" { inherit profileName; }).out;
      pin_project_lite = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.14" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
      tower_service = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-service."0.3.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hyper-util."0.1.9" = overridableMkRustCrate (profileName: rec {
    name = "hyper-util";
    version = "0.1.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "41296eb09f183ac68eec06e03cdbea2e759633d4067b2f6552fc2e009bcad08b"; };
    features = builtins.concatLists [
      [ "client" ]
      [ "client-legacy" ]
      [ "default" ]
      [ "http1" ]
      [ "http2" ]
      [ "server" ]
      [ "server-auto" ]
      [ "service" ]
      [ "tokio" ]
    ];
    dependencies = {
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.7.2" { inherit profileName; }).out;
      futures_channel = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.31" { inherit profileName; }).out;
      futures_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" { inherit profileName; }).out;
      http = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."1.1.0" { inherit profileName; }).out;
      http_body = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body."1.0.1" { inherit profileName; }).out;
      hyper = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper."1.4.1" { inherit profileName; }).out;
      pin_project_lite = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.14" { inherit profileName; }).out;
      socket2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".socket2."0.5.7" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
      tower_service = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-service."0.3.3" { inherit profileName; }).out;
      tracing = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".iana-time-zone."0.1.61" = overridableMkRustCrate (profileName: rec {
    name = "iana-time-zone";
    version = "0.1.61";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "235e081f3925a06703c2d0117ea8b91f042756fd6e7a6e5d901e8ca1a996b220"; };
    features = builtins.concatLists [
      [ "fallback" ]
    ];
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "android" then "android_system_properties" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".android_system_properties."0.1.5" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" then "core_foundation_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.7" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "haiku" then "iana_time_zone_haiku" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".iana-time-zone-haiku."0.1.2" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "wasm32" && hostPlatform.parsed.kernel.name == "unknown" then "js_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.70" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "wasm32" && hostPlatform.parsed.kernel.name == "unknown" then "wasm_bindgen" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.93" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "windows" then "windows_core" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-core."0.52.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".iana-time-zone-haiku."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "iana-time-zone-haiku";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f"; };
    buildDependencies = {
      cc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.1.25" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".icu_collections."1.5.0" = overridableMkRustCrate (profileName: rec {
    name = "icu_collections";
    version = "1.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "db2fa452206ebee18c4b5c2274dbf1de17008e874b4dc4f0aea9d01ca79e4526"; };
    dependencies = {
      displaydoc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".displaydoc."0.2.5" { profileName = "__noProfile"; }).out;
      yoke = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".yoke."0.7.4" { inherit profileName; }).out;
      zerofrom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zerofrom."0.1.4" { inherit profileName; }).out;
      zerovec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zerovec."0.10.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".icu_locid."1.5.0" = overridableMkRustCrate (profileName: rec {
    name = "icu_locid";
    version = "1.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "13acbb8371917fc971be86fc8057c41a64b521c184808a698c02acc242dbf637"; };
    features = builtins.concatLists [
      [ "zerovec" ]
    ];
    dependencies = {
      displaydoc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".displaydoc."0.2.5" { profileName = "__noProfile"; }).out;
      litemap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".litemap."0.7.3" { inherit profileName; }).out;
      tinystr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinystr."0.7.6" { inherit profileName; }).out;
      writeable = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".writeable."0.5.5" { inherit profileName; }).out;
      zerovec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zerovec."0.10.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".icu_locid_transform."1.5.0" = overridableMkRustCrate (profileName: rec {
    name = "icu_locid_transform";
    version = "1.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "01d11ac35de8e40fdeda00d9e1e9d92525f3f9d887cdd7aa81d727596788b54e"; };
    features = builtins.concatLists [
      [ "compiled_data" ]
    ];
    dependencies = {
      displaydoc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".displaydoc."0.2.5" { profileName = "__noProfile"; }).out;
      icu_locid = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".icu_locid."1.5.0" { inherit profileName; }).out;
      icu_locid_transform_data = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".icu_locid_transform_data."1.5.0" { inherit profileName; }).out;
      icu_provider = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".icu_provider."1.5.0" { inherit profileName; }).out;
      tinystr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinystr."0.7.6" { inherit profileName; }).out;
      zerovec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zerovec."0.10.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".icu_locid_transform_data."1.5.0" = overridableMkRustCrate (profileName: rec {
    name = "icu_locid_transform_data";
    version = "1.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fdc8ff3388f852bede6b579ad4e978ab004f139284d7b28715f773507b946f6e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".icu_normalizer."1.5.0" = overridableMkRustCrate (profileName: rec {
    name = "icu_normalizer";
    version = "1.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "19ce3e0da2ec68599d193c93d088142efd7f9c5d6fc9b803774855747dc6a84f"; };
    features = builtins.concatLists [
      [ "compiled_data" ]
      [ "default" ]
    ];
    dependencies = {
      displaydoc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".displaydoc."0.2.5" { profileName = "__noProfile"; }).out;
      icu_collections = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".icu_collections."1.5.0" { inherit profileName; }).out;
      icu_normalizer_data = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".icu_normalizer_data."1.5.0" { inherit profileName; }).out;
      icu_properties = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".icu_properties."1.5.1" { inherit profileName; }).out;
      icu_provider = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".icu_provider."1.5.0" { inherit profileName; }).out;
      smallvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.13.2" { inherit profileName; }).out;
      utf16_iter = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".utf16_iter."1.0.5" { inherit profileName; }).out;
      utf8_iter = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".utf8_iter."1.0.4" { inherit profileName; }).out;
      write16 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".write16."1.0.0" { inherit profileName; }).out;
      zerovec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zerovec."0.10.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".icu_normalizer_data."1.5.0" = overridableMkRustCrate (profileName: rec {
    name = "icu_normalizer_data";
    version = "1.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f8cafbf7aa791e9b22bec55a167906f9e1215fd475cd22adfcf660e03e989516"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".icu_properties."1.5.1" = overridableMkRustCrate (profileName: rec {
    name = "icu_properties";
    version = "1.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "93d6020766cfc6302c15dbbc9c8778c37e62c14427cb7f6e601d849e092aeef5"; };
    features = builtins.concatLists [
      [ "compiled_data" ]
      [ "default" ]
    ];
    dependencies = {
      displaydoc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".displaydoc."0.2.5" { profileName = "__noProfile"; }).out;
      icu_collections = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".icu_collections."1.5.0" { inherit profileName; }).out;
      icu_locid_transform = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".icu_locid_transform."1.5.0" { inherit profileName; }).out;
      icu_properties_data = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".icu_properties_data."1.5.0" { inherit profileName; }).out;
      icu_provider = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".icu_provider."1.5.0" { inherit profileName; }).out;
      tinystr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinystr."0.7.6" { inherit profileName; }).out;
      zerovec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zerovec."0.10.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".icu_properties_data."1.5.0" = overridableMkRustCrate (profileName: rec {
    name = "icu_properties_data";
    version = "1.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "67a8effbc3dd3e4ba1afa8ad918d5684b8868b3b26500753effea8d2eed19569"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".icu_provider."1.5.0" = overridableMkRustCrate (profileName: rec {
    name = "icu_provider";
    version = "1.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6ed421c8a8ef78d3e2dbc98a973be2f3770cb42b606e3ab18d6237c4dfde68d9"; };
    features = builtins.concatLists [
      [ "macros" ]
    ];
    dependencies = {
      displaydoc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".displaydoc."0.2.5" { profileName = "__noProfile"; }).out;
      icu_locid = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".icu_locid."1.5.0" { inherit profileName; }).out;
      icu_provider_macros = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".icu_provider_macros."1.5.0" { profileName = "__noProfile"; }).out;
      stable_deref_trait = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".stable_deref_trait."1.2.0" { inherit profileName; }).out;
      tinystr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinystr."0.7.6" { inherit profileName; }).out;
      writeable = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".writeable."0.5.5" { inherit profileName; }).out;
      yoke = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".yoke."0.7.4" { inherit profileName; }).out;
      zerofrom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zerofrom."0.1.4" { inherit profileName; }).out;
      zerovec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zerovec."0.10.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".icu_provider_macros."1.5.0" = overridableMkRustCrate (profileName: rec {
    name = "icu_provider_macros";
    version = "1.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1ec89e9337638ecdc08744df490b221a7399bf8d164eb52a665454e60e075ad6"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".idea."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "idea";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "075557004419d7f2031b8bb7f44bb43e55a83ca7b63076a8fb8fe75753836477"; };
    features = builtins.concatLists [
      [ "zeroize" ]
    ];
    dependencies = {
      cipher = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cipher."0.4.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ident_case."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "ident_case";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b9e0384b61958566e926dc50660321d12159025e767c18e043daf26b70104c39"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".idna."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "idna";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7d20d6b07bfbc108882d88ed8e37d39636dcc260e15e30c45e6ba089610b917c"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      unicode_bidi = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-bidi."0.3.17" { inherit profileName; }).out;
      unicode_normalization = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-normalization."0.1.24" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".idna."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "idna";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "634d9b1461af396cad843f47fdba5597a4f9e6ddd4bfb6ff5d85028c25cb12f6"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      unicode_bidi = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-bidi."0.3.17" { inherit profileName; }).out;
      unicode_normalization = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-normalization."0.1.24" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".idna."1.0.2" = overridableMkRustCrate (profileName: rec {
    name = "idna";
    version = "1.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bd69211b9b519e98303c015e21a007e293db403b6c85b9b124e133d25e242cdd"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "compiled_data" ]
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      icu_normalizer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".icu_normalizer."1.5.0" { inherit profileName; }).out;
      icu_properties = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".icu_properties."1.5.1" { inherit profileName; }).out;
      smallvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.13.2" { inherit profileName; }).out;
      utf8_iter = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".utf8_iter."1.0.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".imagesize."0.13.0" = overridableMkRustCrate (profileName: rec {
    name = "imagesize";
    version = "0.13.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "edcd27d72f2f071c64249075f42e205ff93c9a4c5f6c6da53e79ed9f9832c285"; };
  });
  
  "unknown".imap."0.10.4" = overridableMkRustCrate (profileName: rec {
    name = "imap";
    version = "0.10.4";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    features = builtins.concatLists [
      [ "test_mode" ]
    ];
    dependencies = {
      ahash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.8.11" { inherit profileName; }).out;
      common = (rustPackages."unknown".common."0.10.4" { inherit profileName; }).out;
      dashmap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".dashmap."6.1.0" { inherit profileName; }).out;
      directory = (rustPackages."unknown".directory."0.10.4" { inherit profileName; }).out;
      imap_proto = (rustPackages."unknown".imap_proto."0.1.0" { inherit profileName; }).out;
      jmap = (rustPackages."unknown".jmap."0.10.4" { inherit profileName; }).out;
      jmap_proto = (rustPackages."unknown".jmap_proto."0.10.4" { inherit profileName; }).out;
      mail_parser = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mail-parser."0.9.4" { inherit profileName; }).out;
      mail_send = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mail-send."0.4.9" { inherit profileName; }).out;
      md5 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".md5."0.7.0" { inherit profileName; }).out;
      nlp = (rustPackages."unknown".nlp."0.10.4" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.3" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.23.14" { inherit profileName; }).out;
      rustls_pemfile = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pemfile."2.2.0" { inherit profileName; }).out;
      store = (rustPackages."unknown".store."0.10.4" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
      tokio_rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-rustls."0.26.0" { inherit profileName; }).out;
      trc = (rustPackages."unknown".trc."0.10.4" { inherit profileName; }).out;
      utils = (rustPackages."unknown".utils."0.10.4" { inherit profileName; }).out;
    };
  });
  
  "unknown".imap_proto."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "imap_proto";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      ahash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.8.11" { inherit profileName; }).out;
      chrono = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".chrono."0.4.38" { inherit profileName; }).out;
      jmap_proto = (rustPackages."unknown".jmap_proto."0.10.4" { inherit profileName; }).out;
      mail_parser = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mail-parser."0.9.4" { inherit profileName; }).out;
      store = (rustPackages."unknown".store."0.10.4" { inherit profileName; }).out;
      trc = (rustPackages."unknown".trc."0.10.4" { inherit profileName; }).out;
    };
    devDependencies = {
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".indexmap."1.9.3" = overridableMkRustCrate (profileName: rec {
    name = "indexmap";
    version = "1.9.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bd070e393353796e801d209ad339e89596eb4c8d430d18ede6a1cced8fafbd99"; };
    dependencies = {
      hashbrown = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.12.3" { inherit profileName; }).out;
    };
    buildDependencies = {
      autocfg = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.4.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".indexmap."2.6.0" = overridableMkRustCrate (profileName: rec {
    name = "indexmap";
    version = "2.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "707907fe3c25f5424cce2cb7e1cbcafee6bdbe735ca90ef77c29e84591e5b9da"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      equivalent = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".equivalent."1.0.1" { inherit profileName; }).out;
      hashbrown = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.15.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".indicatif."0.17.8" = overridableMkRustCrate (profileName: rec {
    name = "indicatif";
    version = "0.17.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "763a5a8f45087d6bcea4222e7b72c291a054edf80e4ef6efd2a4979878c7bea3"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "unicode-width" ]
    ];
    dependencies = {
      console = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".console."0.15.8" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "instant" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.13" { inherit profileName; }).out;
      number_prefix = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".number_prefix."0.4.0" { inherit profileName; }).out;
      portable_atomic = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".portable-atomic."1.9.0" { inherit profileName; }).out;
      unicode_width = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-width."0.1.14" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".infer."0.16.0" = overridableMkRustCrate (profileName: rec {
    name = "infer";
    version = "0.16.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bc150e5ce2330295b8616ce0e3f53250e53af31759a9dbedad1621ba29151847"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "cfb" ]
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cfb = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfb."0.7.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".inout."0.1.3" = overridableMkRustCrate (profileName: rec {
    name = "inout";
    version = "0.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a0c10553d664a4d0bcff9f4215d0aac67a639cc68ef660840afe309b807bc9f5"; };
    features = builtins.concatLists [
      [ "block-padding" ]
      [ "std" ]
    ];
    dependencies = {
      block_padding = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".block-padding."0.3.3" { inherit profileName; }).out;
      generic_array = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".instant."0.1.13" = overridableMkRustCrate (profileName: rec {
    name = "instant";
    version = "0.1.13";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e0242819d153cba4b4b05a5a8f2a7e9bbf97b6055b2a002b395c96b5ff3c0222"; };
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ipconfig."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "ipconfig";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b58db92f96b720de98181bbbe63c831e87005ab460c1bf306eb2622b4707997f"; };
    features = builtins.concatLists [
      [ "computer" ]
      [ "default" ]
      [ "winreg" ]
    ];
    dependencies = {
      ${ if hostPlatform.isWindows then "socket2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".socket2."0.5.7" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "widestring" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".widestring."1.1.0" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "winreg" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winreg."0.50.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ipnet."2.10.1" = overridableMkRustCrate (profileName: rec {
    name = "ipnet";
    version = "2.10.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ddc24109865250148c2e0f3d25d4f0f479571723792d3802153c60922a4fb708"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".is-terminal."0.4.13" = overridableMkRustCrate (profileName: rec {
    name = "is-terminal";
    version = "0.4.13";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "261f68e344040fbd0edea105bef17c66edf46f984ddb1115b775ce31be948f4b"; };
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "hermit" then "hermit_abi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hermit-abi."0.4.0" { inherit profileName; }).out;
      ${ if hostPlatform.isUnix || hostPlatform.parsed.kernel.name == "wasi" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.52.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".is_terminal_polyfill."1.70.1" = overridableMkRustCrate (profileName: rec {
    name = "is_terminal_polyfill";
    version = "1.70.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7943c866cc5cd64cbc25b2e01621d07fa8eb2a1a23160ee81ce38704e97b8ecf"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.5" = overridableMkRustCrate (profileName: rec {
    name = "itertools";
    version = "0.10.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b0fd2260e829bddf4cb6ea802289de2f86d6a7a690192fbe91b3f46e0f2c8473"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "use_alloc" ]
      [ "use_std" ]
    ];
    dependencies = {
      either = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.13.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".itertools."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "itertools";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b1c173a5686ce8bfa551b3563d0c2170bf24ca44da99c7ca4bfdab5418c3fe57"; };
    features = builtins.concatLists [
      [ "use_alloc" ]
      [ "use_std" ]
    ];
    dependencies = {
      either = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.13.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".itertools."0.12.1" = overridableMkRustCrate (profileName: rec {
    name = "itertools";
    version = "0.12.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ba291022dbbd398a455acf126c1e341954079855bc60dfdda641363bd6922569"; };
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" || rootFeatures' ? "tests/rocks" then "either" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.13.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".itertools."0.13.0" = overridableMkRustCrate (profileName: rec {
    name = "itertools";
    version = "0.13.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "413ee7dfc52ee1a4949ceeb7dbc8a33f2d6c088194d9f922fb8318faf1f01186"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "use_alloc" ]
      [ "use_std" ]
    ];
    dependencies = {
      either = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.13.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.11" = overridableMkRustCrate (profileName: rec {
    name = "itoa";
    version = "1.0.11";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "49f1f14873335454500d59611f1cf4a4b0f786f9ac11f4312a78e4cf2566695b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jemalloc-sys."0.5.4+5.3.0-patched" = overridableMkRustCrate (profileName: rec {
    name = "jemalloc-sys";
    version = "0.5.4+5.3.0-patched";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ac6c1946e1cea1788cbfde01c993b52a10e2da07f4bac608228d1bed20bfebf2"; };
    features = builtins.concatLists [
      [ "background_threads_runtime_support" ]
    ];
    dependencies = {
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
    };
    buildDependencies = {
      cc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.1.25" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jemallocator."0.5.4" = overridableMkRustCrate (profileName: rec {
    name = "jemallocator";
    version = "0.5.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a0de374a9f8e63150e6f5e8a60cc14c668226d7a347d8aee1a45766e3c4dd3bc"; };
    features = builtins.concatLists [
      [ "background_threads_runtime_support" ]
      [ "default" ]
    ];
    dependencies = {
      jemalloc_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".jemalloc-sys."0.5.4+5.3.0-patched" { inherit profileName; }).out;
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jieba-rs."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "jieba-rs";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c1e2b0210dc78b49337af9e49d7ae41a39dceac6e5985613f1cf7763e2f76a25"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "default-dict" ]
    ];
    dependencies = {
      cedarwood = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cedarwood."0.4.6" { inherit profileName; }).out;
      derive_builder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".derive_builder."0.20.1" { inherit profileName; }).out;
      fxhash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fxhash."0.2.1" { inherit profileName; }).out;
      lazy_static = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.5.0" { inherit profileName; }).out;
      phf = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".phf."0.11.2" { inherit profileName; }).out;
      regex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.11.0" { inherit profileName; }).out;
    };
    buildDependencies = {
      phf_codegen = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".phf_codegen."0.11.2" { profileName = "__noProfile"; }).out;
    };
  });
  
  "unknown".jmap."0.10.4" = overridableMkRustCrate (profileName: rec {
    name = "jmap";
    version = "0.10.4";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    features = builtins.concatLists [
      [ "enterprise" ]
      [ "test_mode" ]
    ];
    dependencies = {
      aes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aes."0.8.4" { inherit profileName; }).out;
      aes_gcm = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aes-gcm."0.10.3" { inherit profileName; }).out;
      aes_gcm_siv = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aes-gcm-siv."0.11.1" { inherit profileName; }).out;
      async_stream = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-stream."0.3.6" { inherit profileName; }).out;
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.83" { profileName = "__noProfile"; }).out;
      base64 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.22.1" { inherit profileName; }).out;
      bincode = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bincode."1.3.3" { inherit profileName; }).out;
      cbc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cbc."0.1.2" { inherit profileName; }).out;
      chrono = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".chrono."0.4.38" { inherit profileName; }).out;
      common = (rustPackages."unknown".common."0.10.4" { inherit profileName; }).out;
      dashmap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".dashmap."6.1.0" { inherit profileName; }).out;
      directory = (rustPackages."unknown".directory."0.10.4" { inherit profileName; }).out;
      form_data = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".form-data."0.5.5" { inherit profileName; }).out;
      form_urlencoded = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".form_urlencoded."1.2.1" { inherit profileName; }).out;
      futures_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" { inherit profileName; }).out;
      hkdf = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hkdf."0.12.4" { inherit profileName; }).out;
      http_body_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body-util."0.1.2" { inherit profileName; }).out;
      hyper = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper."1.4.1" { inherit profileName; }).out;
      hyper_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper-util."0.1.9" { inherit profileName; }).out;
      jmap_proto = (rustPackages."unknown".jmap_proto."0.10.4" { inherit profileName; }).out;
      lz4_flex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lz4_flex."0.11.3" { inherit profileName; }).out;
      mail_auth = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mail-auth."0.5.0" { inherit profileName; }).out;
      mail_builder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mail-builder."0.3.2" { inherit profileName; }).out;
      mail_parser = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mail-parser."0.9.4" { inherit profileName; }).out;
      mail_send = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mail-send."0.4.9" { inherit profileName; }).out;
      memory_stats = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memory-stats."1.2.0" { inherit profileName; }).out;
      mime = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mime."0.3.17" { inherit profileName; }).out;
      nlp = (rustPackages."unknown".nlp."0.10.4" { inherit profileName; }).out;
      p256 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".p256."0.13.2" { inherit profileName; }).out;
      pkcs8 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pkcs8."0.10.2" { inherit profileName; }).out;
      quick_xml = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quick-xml."0.36.2" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      rasn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rasn."0.10.6" { inherit profileName; }).out;
      rasn_cms = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rasn-cms."0.10.6" { inherit profileName; }).out;
      rasn_pkix = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rasn-pkix."0.10.6" { inherit profileName; }).out;
      reqwest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".reqwest."0.12.8" { inherit profileName; }).out;
      rev_lines = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rev_lines."0.3.0" { inherit profileName; }).out;
      rsa = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rsa."0.9.6" { inherit profileName; }).out;
      sequoia_openpgp = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sequoia-openpgp."1.21.2" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
      serde_json = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.128" { inherit profileName; }).out;
      sha1 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha1."0.10.6" { inherit profileName; }).out;
      sha2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" { inherit profileName; }).out;
      sieve = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sieve-rs."0.5.2" { inherit profileName; }).out;
      smtp = (rustPackages."unknown".smtp."0.10.4" { inherit profileName; }).out;
      smtp_proto = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smtp-proto."0.1.5" { inherit profileName; }).out;
      store = (rustPackages."unknown".store."0.10.4" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
      tokio_tungstenite = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-tungstenite."0.24.0" { inherit profileName; }).out;
      trc = (rustPackages."unknown".trc."0.10.4" { inherit profileName; }).out;
      tungstenite = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tungstenite."0.24.0" { inherit profileName; }).out;
      utils = (rustPackages."unknown".utils."0.10.4" { inherit profileName; }).out;
      x509_parser = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".x509-parser."0.16.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jmap-client."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "jmap-client";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "12c697483ad894a8184d0fd61848e057f86b16642049993b3e6a80c959dbc90a"; };
    features = builtins.concatLists [
      [ "async" ]
      [ "async-stream" ]
      [ "debug" ]
      [ "default" ]
      [ "futures-util" ]
      [ "rustls" ]
      [ "tokio" ]
      [ "tokio-tungstenite" ]
      [ "websockets" ]
    ];
    dependencies = {
      ahash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.8.11" { inherit profileName; }).out;
      async_stream = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-stream."0.3.6" { inherit profileName; }).out;
      base64 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.13.1" { inherit profileName; }).out;
      chrono = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".chrono."0.4.38" { inherit profileName; }).out;
      futures_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" { inherit profileName; }).out;
      maybe_async = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".maybe-async."0.2.10" { profileName = "__noProfile"; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.3" { inherit profileName; }).out;
      reqwest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".reqwest."0.11.27" { inherit profileName; }).out;
      rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.22.4" { inherit profileName; }).out;
      rustls_pki_types = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pki-types."1.9.0" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
      serde_json = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.128" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
      tokio_tungstenite = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-tungstenite."0.21.0" { inherit profileName; }).out;
    };
  });
  
  "unknown".jmap_proto."0.10.4" = overridableMkRustCrate (profileName: rec {
    name = "jmap_proto";
    version = "0.10.4";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      ahash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.8.11" { inherit profileName; }).out;
      fast_float = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fast-float."0.2.0" { inherit profileName; }).out;
      mail_parser = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mail-parser."0.9.4" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
      serde_json = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.128" { inherit profileName; }).out;
      store = (rustPackages."unknown".store."0.10.4" { inherit profileName; }).out;
      trc = (rustPackages."unknown".trc."0.10.4" { inherit profileName; }).out;
      utils = (rustPackages."unknown".utils."0.10.4" { inherit profileName; }).out;
    };
    devDependencies = {
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jobserver."0.1.32" = overridableMkRustCrate (profileName: rec {
    name = "jobserver";
    version = "0.1.32";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "48d1dbcbbeb6a7fec7e059840aa538bd62aaccf972c7346c4d9d2059312853d0"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.70" = overridableMkRustCrate (profileName: rec {
    name = "js-sys";
    version = "0.3.70";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1868808506b929d7b0cfa8f75951347aa71bb21144b7791bae35d9bccfcfe37a"; };
    dependencies = {
      wasm_bindgen = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.93" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".keyed_priority_queue."0.4.2" = overridableMkRustCrate (profileName: rec {
    name = "keyed_priority_queue";
    version = "0.4.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4ee7893dab2e44ae5f9d0173f26ff4aa327c10b01b06a72b52dd9405b628640d"; };
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "indexmap" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."2.6.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".konst."0.3.9" = overridableMkRustCrate (profileName: rec {
    name = "konst";
    version = "0.3.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "50a0ba6de5f7af397afff922f22c149ff605c766cd3269cf6c1cd5e466dbe3b9"; };
    dependencies = {
      const_panic = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".const_panic."0.2.10" { inherit profileName; }).out;
      konst_kernel = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".konst_kernel."0.3.9" { inherit profileName; }).out;
      typewit = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".typewit."1.9.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".konst_kernel."0.3.9" = overridableMkRustCrate (profileName: rec {
    name = "konst_kernel";
    version = "0.3.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "be0a455a1719220fd6adf756088e1c69a85bf14b6a9e24537a5cc04f503edb2b"; };
    features = builtins.concatLists [
      [ "__for_konst" ]
      [ "rust_1_64" ]
    ];
    dependencies = {
      typewit = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".typewit."1.9.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lalrpop."0.20.2" = overridableMkRustCrate (profileName: rec {
    name = "lalrpop";
    version = "0.20.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "55cb077ad656299f160924eb2912aa147d7339ea7d69e1b5517326fdcec3c1ca"; };
    dependencies = {
      ascii_canvas = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ascii-canvas."3.0.0" { inherit profileName; }).out;
      bit_set = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bit-set."0.5.3" { inherit profileName; }).out;
      ena = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ena."0.14.3" { inherit profileName; }).out;
      itertools = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.11.0" { inherit profileName; }).out;
      lalrpop_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lalrpop-util."0.20.2" { inherit profileName; }).out;
      petgraph = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".petgraph."0.6.5" { inherit profileName; }).out;
      regex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.11.0" { inherit profileName; }).out;
      regex_syntax = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.8.5" { inherit profileName; }).out;
      string_cache = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".string_cache."0.8.7" { inherit profileName; }).out;
      term = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".term."0.7.0" { inherit profileName; }).out;
      tiny_keccak = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tiny-keccak."2.0.2" { inherit profileName; }).out;
      unicode_xid = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-xid."0.2.6" { inherit profileName; }).out;
      walkdir = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".walkdir."2.5.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lalrpop-util."0.20.2" = overridableMkRustCrate (profileName: rec {
    name = "lalrpop-util";
    version = "0.20.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "507460a910eb7b32ee961886ff48539633b788a36b65692b95f225b844c82553"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
      [ "unicode" ]
    ];
    dependencies = {
      regex_automata = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-automata."0.4.8" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.5.0" = overridableMkRustCrate (profileName: rec {
    name = "lazy_static";
    version = "1.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe"; };
    features = builtins.concatLists [
      [ "spin" ]
      [ "spin_no_std" ]
    ];
    dependencies = {
      spin = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".spin."0.9.8" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lazycell."1.3.0" = overridableMkRustCrate (profileName: rec {
    name = "lazycell";
    version = "1.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lber."0.4.2" = overridableMkRustCrate (profileName: rec {
    name = "lber";
    version = "0.4.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2df7f9fd9f64cf8f59e1a4a0753fe7d575a5b38d3d7ac5758dcee9357d83ef0a"; };
    dependencies = {
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.7.2" { inherit profileName; }).out;
      nom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".nom."7.1.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ldap3."0.11.5" = overridableMkRustCrate (profileName: rec {
    name = "ldap3";
    version = "0.11.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "166199a8207874a275144c8a94ff6eed5fcbf5c52303e4d9b4d53a0c7ac76554"; };
    features = builtins.concatLists [
      [ "ring" ]
      [ "rustls" ]
      [ "rustls-native-certs" ]
      [ "tls-rustls" ]
      [ "tokio-rustls" ]
      [ "x509-parser" ]
    ];
    dependencies = {
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.83" { profileName = "__noProfile"; }).out;
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.7.2" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.31" { inherit profileName; }).out;
      futures_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" { inherit profileName; }).out;
      lazy_static = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.5.0" { inherit profileName; }).out;
      lber = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lber."0.4.2" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.22" { inherit profileName; }).out;
      nom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".nom."7.1.3" { inherit profileName; }).out;
      percent_encoding = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.1" { inherit profileName; }).out;
      ring = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.16.20" { inherit profileName; }).out;
      rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.21.12" { inherit profileName; }).out;
      rustls_native_certs = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-native-certs."0.6.3" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.64" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
      tokio_rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-rustls."0.24.1" { inherit profileName; }).out;
      tokio_stream = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-stream."0.1.16" { inherit profileName; }).out;
      tokio_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-util."0.7.12" { inherit profileName; }).out;
      url = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.5.2" { inherit profileName; }).out;
      x509_parser = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".x509-parser."0.15.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" = overridableMkRustCrate (profileName: rec {
    name = "libc";
    version = "0.2.159";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "561d97a539a36e26a9a5fad1ea11a3039a67714694aaa379433e580854bc3dc5"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "extra_traits" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libloading."0.8.5" = overridableMkRustCrate (profileName: rec {
    name = "libloading";
    version = "0.8.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4979f22fdb869068da03c9f7528f8297c6fd2606bc3a4affe42e6a823fdb8da4"; };
    dependencies = {
      ${ if (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" || rootFeatures' ? "tests/mysql" || rootFeatures' ? "tests/rocks") && hostPlatform.isUnix then "cfg_if" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" || rootFeatures' ? "tests/mysql" || rootFeatures' ? "tests/rocks") && hostPlatform.isWindows then "windows_targets" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.52.6" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libm."0.2.8" = overridableMkRustCrate (profileName: rec {
    name = "libm";
    version = "0.2.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4ec2a862134d2a7d32d7983ddcdd1c4923530833c9f2ea1a44fc5fa473989058"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libredox."0.1.3" = overridableMkRustCrate (profileName: rec {
    name = "libredox";
    version = "0.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c0ff37bd590ca25063e35af745c343cb7a0271906fb7b37e4813e8f79f00268d"; };
    features = builtins.concatLists [
      [ "call" ]
      [ "std" ]
    ];
    dependencies = {
      bitflags = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.6.0" { inherit profileName; }).out;
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".librocksdb-sys."0.16.0+8.10.0" = overridableMkRustCrate (profileName: rec {
    name = "librocksdb-sys";
    version = "0.16.0+8.10.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ce3d60bc059831dc1c83903fb45c103f75db65c5a7bf22272764d9cc683e348c"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/rocks") "bzip2")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/rocks") "bzip2-sys")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/rocks") "default")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/rocks") "libz-sys")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/rocks") "lz4")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/rocks") "lz4-sys")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/rocks") "snappy")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/rocks") "static")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/rocks") "zlib")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/rocks") "zstd")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/rocks") "zstd-sys")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/rocks" then "bzip2_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bzip2-sys."0.1.11+1.0.8" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/rocks" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/rocks" then "libz_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libz-sys."1.1.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/rocks" then "lz4_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lz4-sys."1.11.1+lz4-1.10.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/rocks" then "zstd_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zstd-sys."2.0.13+zstd.1.5.6" { inherit profileName; }).out;
    };
    buildDependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/rocks" then "bindgen" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bindgen."0.69.4" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/rocks" then "cc" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.1.25" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/rocks" then "glob" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".glob."0.3.1" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libsqlite3-sys."0.30.1" = overridableMkRustCrate (profileName: rec {
    name = "libsqlite3-sys";
    version = "0.30.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2e99fb7a497b1e3339bc746195567ed8d3e24945ecd636e3619d20b9de9e9149"; };
    features = builtins.concatLists [
      [ "bundled" ]
      [ "bundled_bindings" ]
      [ "cc" ]
      [ "default" ]
      [ "min_sqlite_version_3_14_0" ]
      [ "pkg-config" ]
      [ "vcpkg" ]
    ];
    buildDependencies = {
      cc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.1.25" { profileName = "__noProfile"; }).out;
      pkg_config = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.31" { profileName = "__noProfile"; }).out;
      vcpkg = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".vcpkg."0.2.15" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libz-sys."1.1.20" = overridableMkRustCrate (profileName: rec {
    name = "libz-sys";
    version = "1.1.20";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d2d16453e800a8cf6dd2fc3eb4bc99b786a9b90c663b8559a5b1a041bf89e472"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/rocks") "static")
    ];
    buildDependencies = {
      cc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.1.25" { profileName = "__noProfile"; }).out;
      pkg_config = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.31" { profileName = "__noProfile"; }).out;
      vcpkg = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".vcpkg."0.2.15" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".linked-hash-map."0.5.6" = overridableMkRustCrate (profileName: rec {
    name = "linked-hash-map";
    version = "0.5.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0717cef1bc8b636c6e1c1bbdefc09e6322da8a9321966e8928ef80d20f7f770f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".linux-raw-sys."0.4.14" = overridableMkRustCrate (profileName: rec {
    name = "linux-raw-sys";
    version = "0.4.14";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "78b3ae25bc7c8c38cec158d1f2757ee79e9b3740fbc7ccf0e59e4b08d793fa89"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") "elf")
      (lib.optional (rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") "errno")
      (lib.optional (rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") "general")
      (lib.optional (rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") "ioctl")
      (lib.optional (rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") "no_std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".litemap."0.7.3" = overridableMkRustCrate (profileName: rec {
    name = "litemap";
    version = "0.7.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "643cb0b8d4fcc284004d5fd0d67ccf61dfffadb7f75e1e71bc420f4688a3a704"; };
    features = builtins.concatLists [
      [ "alloc" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lock_api."0.4.12" = overridableMkRustCrate (profileName: rec {
    name = "lock_api";
    version = "0.4.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "07af8b9cdd281b7915f413fa73f29ebd5d55d0d3f0155584dade1ff18cea1b17"; };
    features = builtins.concatLists [
      [ "atomic_usize" ]
      [ "default" ]
    ];
    dependencies = {
      scopeguard = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scopeguard."1.2.0" { inherit profileName; }).out;
    };
    buildDependencies = {
      autocfg = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.4.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lockfree-object-pool."0.1.6" = overridableMkRustCrate (profileName: rec {
    name = "lockfree-object-pool";
    version = "0.1.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9374ef4228402d4b7e403e5838cb880d9ee663314b0a900d5a6aabf0c213552e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".log."0.4.22" = overridableMkRustCrate (profileName: rec {
    name = "log";
    version = "0.4.22";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a7a70ba024b9dc04c27ea2f0c0548feb474ec5c54bba33a7f72f873a39d07b24"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lru."0.12.4" = overridableMkRustCrate (profileName: rec {
    name = "lru";
    version = "0.12.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "37ee39891760e7d94734f6f63fedc29a2e4a152f836120753a72503f09fcf904"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "default")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "hashbrown")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "hashbrown" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.14.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lru-cache."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "lru-cache";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "31e24f1ad8321ca0e8a1e0ac13f23cb668e6f5466c2c57319f6a5cf1cc8e3b1c"; };
    dependencies = {
      linked_hash_map = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".linked-hash-map."0.5.6" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lz4-sys."1.11.1+lz4-1.10.0" = overridableMkRustCrate (profileName: rec {
    name = "lz4-sys";
    version = "1.11.1+lz4-1.10.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6bd8c0d6c6ed0cd30b3652886bb8711dc4bb01d637a68105a3d5158039b418e6"; };
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/rocks" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
    };
    buildDependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/rocks" then "cc" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.1.25" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lz4_flex."0.11.3" = overridableMkRustCrate (profileName: rec {
    name = "lz4_flex";
    version = "0.11.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "75761162ae2b0e580d7e7c390558127e5f01b4194debd6221fd8c207fc80e3f5"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lzma-rs."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "lzma-rs";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "297e814c836ae64db86b36cf2a557ba54368d03f6afcd7d947c266692f71115e"; };
    features = builtins.concatLists [
      [ "raw_decoder" ]
      [ "stream" ]
    ];
    dependencies = {
      byteorder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" { inherit profileName; }).out;
      crc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc."3.2.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".mail-auth."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "mail-auth";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "aaee4c38f4df428c6732f3d5472a013fa248d2772f48c8932295b32c683a23c4"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "generate" ]
      [ "rand" ]
      [ "ring" ]
      [ "rsa" ]
      [ "rustls-pemfile" ]
      [ "test" ]
    ];
    dependencies = {
      ahash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.8.11" { inherit profileName; }).out;
      flate2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".flate2."1.0.34" { inherit profileName; }).out;
      hickory_resolver = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hickory-resolver."0.24.1" { inherit profileName; }).out;
      lru_cache = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lru-cache."0.1.2" { inherit profileName; }).out;
      mail_builder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mail-builder."0.3.2" { inherit profileName; }).out;
      mail_parser = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mail-parser."0.9.4" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.3" { inherit profileName; }).out;
      quick_xml = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quick-xml."0.36.2" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      ring = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.17.8" { inherit profileName; }).out;
      rsa = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rsa."0.9.6" { inherit profileName; }).out;
      rustls_pemfile = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pemfile."2.2.0" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
      serde_json = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.128" { inherit profileName; }).out;
      zip = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zip."2.2.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".mail-builder."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "mail-builder";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "25f5871d5270ed80f2ee750b95600c8d69b05f8653ad3be913b2ad2e924fefcb"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "gethostname" ]
      [ "ludicrous_mode" ]
    ];
    dependencies = {
      gethostname = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gethostname."0.4.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".mail-parser."0.9.4" = overridableMkRustCrate (profileName: rec {
    name = "mail-parser";
    version = "0.9.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "93c3b9e5d8b17faf573330bbc43b37d6e918c0a3bf8a88e7d0a220ebc84af9fc"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "encoding_rs" ]
      [ "full_encoding" ]
      [ "ludicrous_mode" ]
      [ "serde" ]
      [ "serde_support" ]
    ];
    dependencies = {
      encoding_rs = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".encoding_rs."0.8.34" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".mail-send."0.4.9" = overridableMkRustCrate (profileName: rec {
    name = "mail-send";
    version = "0.4.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7a575d25cf00ed68e5790b473b29242a47e991c6187785d47b45e31fc5816554"; };
    features = builtins.concatLists [
      [ "cram-md5" ]
      [ "md5" ]
      [ "ring" ]
      [ "tls12" ]
    ];
    dependencies = {
      base64 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.22.1" { inherit profileName; }).out;
      gethostname = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gethostname."0.4.3" { inherit profileName; }).out;
      md5 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".md5."0.7.0" { inherit profileName; }).out;
      rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.23.14" { inherit profileName; }).out;
      rustls_pki_types = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pki-types."1.9.0" { inherit profileName; }).out;
      smtp_proto = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smtp-proto."0.1.5" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
      tokio_rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-rustls."0.26.0" { inherit profileName; }).out;
      webpki_roots = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webpki-roots."0.26.6" { inherit profileName; }).out;
    };
  });
  
  "unknown".mail-server."0.10.4" = overridableMkRustCrate (profileName: rec {
    name = "mail-server";
    version = "0.10.4";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default") "default")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic") "elastic")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/enterprise") "enterprise")
      (lib.optional (rootFeatures' ? "mail-server/foundationdb") "foundationdb")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql") "mysql")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres") "postgres")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis") "redis")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/rocks") "rocks")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3") "s3")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/sqlite") "sqlite")
    ];
    dependencies = {
      common = (rustPackages."unknown".common."0.10.4" { inherit profileName; }).out;
      directory = (rustPackages."unknown".directory."0.10.4" { inherit profileName; }).out;
      imap = (rustPackages."unknown".imap."0.10.4" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.abi.name == "msvc") then "jemallocator" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".jemallocator."0.5.4" { inherit profileName; }).out;
      jmap = (rustPackages."unknown".jmap."0.10.4" { inherit profileName; }).out;
      jmap_proto = (rustPackages."unknown".jmap_proto."0.10.4" { inherit profileName; }).out;
      managesieve = (rustPackages."unknown".managesieve."0.10.4" { inherit profileName; }).out;
      pop3 = (rustPackages."unknown".pop3."0.10.4" { inherit profileName; }).out;
      smtp = (rustPackages."unknown".smtp."0.10.4" { inherit profileName; }).out;
      store = (rustPackages."unknown".store."0.10.4" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
      trc = (rustPackages."unknown".trc."0.10.4" { inherit profileName; }).out;
      utils = (rustPackages."unknown".utils."0.10.4" { inherit profileName; }).out;
    };
  });
  
  "unknown".managesieve."0.10.4" = overridableMkRustCrate (profileName: rec {
    name = "managesieve";
    version = "0.10.4";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    features = builtins.concatLists [
      [ "enterprise" ]
      [ "test_mode" ]
    ];
    dependencies = {
      ahash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.8.11" { inherit profileName; }).out;
      bincode = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bincode."1.3.3" { inherit profileName; }).out;
      common = (rustPackages."unknown".common."0.10.4" { inherit profileName; }).out;
      directory = (rustPackages."unknown".directory."0.10.4" { inherit profileName; }).out;
      imap = (rustPackages."unknown".imap."0.10.4" { inherit profileName; }).out;
      imap_proto = (rustPackages."unknown".imap_proto."0.1.0" { inherit profileName; }).out;
      jmap = (rustPackages."unknown".jmap."0.10.4" { inherit profileName; }).out;
      jmap_proto = (rustPackages."unknown".jmap_proto."0.10.4" { inherit profileName; }).out;
      mail_parser = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mail-parser."0.9.4" { inherit profileName; }).out;
      mail_send = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mail-send."0.4.9" { inherit profileName; }).out;
      md5 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".md5."0.7.0" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.3" { inherit profileName; }).out;
      rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.23.14" { inherit profileName; }).out;
      rustls_pemfile = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pemfile."2.2.0" { inherit profileName; }).out;
      sieve = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sieve-rs."0.5.2" { inherit profileName; }).out;
      store = (rustPackages."unknown".store."0.10.4" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
      tokio_rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-rustls."0.26.0" { inherit profileName; }).out;
      trc = (rustPackages."unknown".trc."0.10.4" { inherit profileName; }).out;
      utils = (rustPackages."unknown".utils."0.10.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".maplit."1.0.2" = overridableMkRustCrate (profileName: rec {
    name = "maplit";
    version = "1.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3e2e65a1a2e43cfcb47a895c4c8b10d1f4a61097f9f254f183aee60cad9c651d"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".match_cfg."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "match_cfg";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ffbee8634e0d45d258acb448e7eaab3fce7a0a467395d4d9f228e3c1f01fb2e4"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "use_core" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".matchit."0.7.3" = overridableMkRustCrate (profileName: rec {
    name = "matchit";
    version = "0.7.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0e7465ac9959cc2b1404e8e2367b43684a6d13790fe23056cc8c6c5a6b7bcb94"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".maybe-async."0.2.10" = overridableMkRustCrate (profileName: rec {
    name = "maybe-async";
    version = "0.2.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5cf92c10c7e361d6b99666ec1c6f9805b0bea2c3bd8c78dc6fe98ac5bd78db11"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".md-5."0.9.1" = overridableMkRustCrate (profileName: rec {
    name = "md-5";
    version = "0.9.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7b5a279bb9607f9f53c22d496eade00d138d1bdcccd07d74650387cf94942a15"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      block_buffer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".block-buffer."0.9.0" { inherit profileName; }).out;
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.9.0" { inherit profileName; }).out;
      opaque_debug = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".opaque-debug."0.3.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".md-5."0.10.6" = overridableMkRustCrate (profileName: rec {
    name = "md-5";
    version = "0.10.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d89e7ee0cfbedfc4da3340218492196241d89eefb6dab27de5df917a6d2e78cf"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "oid" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".md5."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "md5";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "490cc448043f947bae3cbee9c203358d62dbee0db12107a74be5c30ccfd09771"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.4" = overridableMkRustCrate (profileName: rec {
    name = "memchr";
    version = "2.7.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".memoffset."0.7.1" = overridableMkRustCrate (profileName: rec {
    name = "memoffset";
    version = "0.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5de893c32cde5f383baa4c04c5d6dbdd735cfd4a794b0debdb2bb1b421da5ff4"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    buildDependencies = {
      autocfg = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.4.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".memory-stats."1.2.0" = overridableMkRustCrate (profileName: rec {
    name = "memory-stats";
    version = "1.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c73f5c649995a115e1a0220b35e4df0a1294500477f97a91d0660fb5abeb574a"; };
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "freebsd" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "windows" then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.52.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".memsec."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "memsec";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c797b9d6bb23aab2fc369c65f871be49214f5c759af65bde26ffaaa2b646b492"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".mime."0.3.17" = overridableMkRustCrate (profileName: rec {
    name = "mime";
    version = "0.3.17";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6877bb514081ee2a7ff5ef9de3281f14a4dd4bceac4c09388074a6b5df8a139a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".mime_guess."2.0.5" = overridableMkRustCrate (profileName: rec {
    name = "mime_guess";
    version = "2.0.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f7c44f8e672c00fe5308fa235f821cb4198414e1c77935c1ab6948d3fd78550e"; };
    dependencies = {
      mime = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mime."0.3.17" { inherit profileName; }).out;
      unicase = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicase."2.7.0" { inherit profileName; }).out;
    };
    buildDependencies = {
      unicase = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".unicase."2.7.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".minimal-lexical."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "minimal-lexical";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "68354c5c6bd36d73ff3feceb05efa59b6acb7626617f4962be322a825e61f79a"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".miniz_oxide."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "miniz_oxide";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e2d80299ef12ff69b16a84bb182e3b9df68b5a91574d3d4fa6e41b65deec4df1"; };
    features = builtins.concatLists [
      [ "with-alloc" ]
    ];
    dependencies = {
      adler2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".adler2."2.0.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".mio."0.8.11" = overridableMkRustCrate (profileName: rec {
    name = "mio";
    version = "0.8.11";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a4a650543ca06a924e8b371db273b2756685faae30f8487da1b56505a8f78b0c"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "default")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "log")
      [ "net" ]
      [ "os-ext" ]
      [ "os-poll" ]
    ];
    dependencies = {
      ${ if hostPlatform.isUnix || hostPlatform.parsed.kernel.name == "wasi" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.22" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "wasi" then "wasi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasi."0.11.0+wasi-snapshot-preview1" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".mysql-common-derive."0.31.1" = overridableMkRustCrate (profileName: rec {
    name = "mysql-common-derive";
    version = "0.31.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "afe0450cc9344afff34915f8328600ab5ae19260802a334d0f72d2d5bdda3bfe"; };
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "darling" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".darling."0.20.10" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "heck" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".heck."0.4.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "num_bigint" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-bigint."0.4.6" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "proc_macro_crate" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."3.2.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "proc_macro_error" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-error."1.0.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "termcolor" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".termcolor."1.4.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "thiserror" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.64" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".mysql_async."0.34.1" = overridableMkRustCrate (profileName: rec {
    name = "mysql_async";
    version = "0.34.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fbfe87d7e35cb72363326216cc1712b865d8d4f70abf3b2d2e6b251fb6b2f427"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "bigdecimal")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "binlog")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "default-rustls")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "derive")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "frunk")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "rust_decimal")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "rustls")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "rustls-pemfile")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "rustls-tls")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "time")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "tokio-rustls")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "webpki")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "webpki-roots")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "bytes" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.7.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "crossbeam" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam."0.8.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "flate2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".flate2."1.0.34" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "futures_core" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "futures_sink" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.31" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "futures_util" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "keyed_priority_queue" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".keyed_priority_queue."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "lazy_static" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.5.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "lru" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lru."0.12.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "mio" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mio."0.8.11" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "mysql_common" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mysql_common."0.32.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "once_cell" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.20.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "pem" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pem."3.0.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "percent_encoding" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "pin_project" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."1.1.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "rand" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "rustls" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.22.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "rustls_pemfile" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pemfile."2.2.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "serde" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "serde_json" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.128" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "socket2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".socket2."0.5.7" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "thiserror" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.64" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "tokio" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "tokio_rustls" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-rustls."0.25.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "tokio_util" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-util."0.7.12" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "twox_hash" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".twox-hash."1.6.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "url" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.5.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "webpki" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webpki."0.22.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "webpki_roots" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webpki-roots."0.26.6" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".mysql_common."0.32.4" = overridableMkRustCrate (profileName: rec {
    name = "mysql_common";
    version = "0.32.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "478b0ff3f7d67b79da2b96f56f334431aef65e15ba4b29dd74a4236e29582bdc"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "bigdecimal")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "binlog")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "bitvec")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "derive")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "frunk")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "mysql-common-derive")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "rust_decimal")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "time")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "base64" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.21.7" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "bigdecimal" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bigdecimal."0.4.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.6.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "bitvec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitvec."1.0.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "btoi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".btoi."0.4.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "byteorder" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "bytes" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.7.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "crc32fast" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc32fast."1.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "flate2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".flate2."1.0.34" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "frunk" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".frunk."0.4.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "lazy_static" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.5.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "mysql_common_derive" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".mysql-common-derive."0.31.1" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "num_bigint" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-bigint."0.4.6" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "num_traits" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.19" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "rand" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "regex" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.11.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "rust_decimal" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rust_decimal."1.36.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "saturating" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".saturating."0.1.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "serde" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "serde_json" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.128" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "sha1" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha1."0.10.6" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "sha2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "smallvec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.13.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "thiserror" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.64" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "time" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".time."0.3.36" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "uuid" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".uuid."1.10.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "zstd" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zstd."0.13.2" { inherit profileName; }).out;
    };
    buildDependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "bindgen" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bindgen."0.70.1" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "cc" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.1.25" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "cmake" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cmake."0.1.51" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "subprocess" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".subprocess."0.2.9" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".new_debug_unreachable."1.0.6" = overridableMkRustCrate (profileName: rec {
    name = "new_debug_unreachable";
    version = "1.0.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "650eef8c711430f1a879fdd01d4745a7deea475becfb90269c06775983bbf086"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nibble_vec."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "nibble_vec";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "77a5d83df9f36fe23f0c3648c6bbb8b0298bb5f1939c8f2704431371f4b84d43"; };
    dependencies = {
      smallvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.13.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nix."0.26.4" = overridableMkRustCrate (profileName: rec {
    name = "nix";
    version = "0.26.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "598beaf3cc6fdd9a5dfb1630c2800c7acd31df7aaf0f565796fba2b53ca1af1b"; };
    features = builtins.concatLists [
      [ "acct" ]
      [ "aio" ]
      [ "default" ]
      [ "dir" ]
      [ "env" ]
      [ "event" ]
      [ "feature" ]
      [ "fs" ]
      [ "hostname" ]
      [ "inotify" ]
      [ "ioctl" ]
      [ "kmod" ]
      [ "memoffset" ]
      [ "mman" ]
      [ "mount" ]
      [ "mqueue" ]
      [ "net" ]
      [ "personality" ]
      [ "pin-utils" ]
      [ "poll" ]
      [ "process" ]
      [ "pthread" ]
      [ "ptrace" ]
      [ "quota" ]
      [ "reboot" ]
      [ "resource" ]
      [ "sched" ]
      [ "signal" ]
      [ "socket" ]
      [ "term" ]
      [ "time" ]
      [ "ucontext" ]
      [ "uio" ]
      [ "user" ]
      [ "zerocopy" ]
    ];
    dependencies = {
      bitflags = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.kernel.name == "redox") then "memoffset" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memoffset."0.7.1" { inherit profileName; }).out;
      pin_utils = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-utils."0.1.0" { inherit profileName; }).out;
    };
  });
  
  "unknown".nlp."0.10.4" = overridableMkRustCrate (profileName: rec {
    name = "nlp";
    version = "0.10.4";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "nlp/test_mode") "test_mode")
    ];
    dependencies = {
      ahash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.8.11" { inherit profileName; }).out;
      bincode = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bincode."1.3.3" { inherit profileName; }).out;
      farmhash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".farmhash."1.1.5" { inherit profileName; }).out;
      jieba_rs = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".jieba-rs."0.7.0" { inherit profileName; }).out;
      lru_cache = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lru-cache."0.1.2" { inherit profileName; }).out;
      nohash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".nohash."0.2.0" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.3" { inherit profileName; }).out;
      phf = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".phf."0.11.2" { inherit profileName; }).out;
      psl = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".psl."2.1.55" { inherit profileName; }).out;
      rust_stemmers = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rust-stemmers."1.2.0" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
      siphasher = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".siphasher."1.0.1" { inherit profileName; }).out;
      tinysegmenter = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinysegmenter."0.1.1" { inherit profileName; }).out;
      whatlang = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".whatlang."0.16.4" { inherit profileName; }).out;
      xxhash_rust = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".xxhash-rust."0.8.12" { inherit profileName; }).out;
    };
    devDependencies = {
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nohash."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "nohash";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a0f889fb66f7acdf83442c35775764b51fed3c606ab9cee51500dbde2cf528ca"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nom."7.1.3" = overridableMkRustCrate (profileName: rec {
    name = "nom";
    version = "7.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d273983c5a657a70a3e8f2a01329822f3b8c8172b73826411a55751e404a0a4a"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      memchr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.4" { inherit profileName; }).out;
      minimal_lexical = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".minimal-lexical."0.2.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-bigint."0.4.6" = overridableMkRustCrate (profileName: rec {
    name = "num-bigint";
    version = "0.4.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a5e44f723f1133c9deac646763579fdb3ac745e418f2a7af9cd0c431da1f20b9"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      num_integer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-integer."0.1.46" { inherit profileName; }).out;
      num_traits = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.19" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-bigint-dig."0.8.4" = overridableMkRustCrate (profileName: rec {
    name = "num-bigint-dig";
    version = "0.8.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dc84195820f291c7697304f3cbdadd1cb7199c0efc917ff5eafd71225c136151"; };
    features = builtins.concatLists [
      [ "i128" ]
      [ "prime" ]
      [ "rand" ]
      [ "u64_digit" ]
      [ "zeroize" ]
    ];
    dependencies = {
      byteorder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" { inherit profileName; }).out;
      lazy_static = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.5.0" { inherit profileName; }).out;
      libm = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libm."0.2.8" { inherit profileName; }).out;
      num_integer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-integer."0.1.46" { inherit profileName; }).out;
      num_iter = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-iter."0.1.45" { inherit profileName; }).out;
      num_traits = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.19" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      smallvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.13.2" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.8.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-conv."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "num-conv";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "51d515d32fb182ee37cda2ccdcb92950d6a3c2893aa280e540671c2cd0f3b1d9"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-integer."0.1.46" = overridableMkRustCrate (profileName: rec {
    name = "num-integer";
    version = "0.1.46";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7969661fd2958a5cb096e56c8e1ad0444ac2bbcd0061bd28660485a44879858f"; };
    features = builtins.concatLists [
      [ "i128" ]
      [ "std" ]
    ];
    dependencies = {
      num_traits = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.19" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-iter."0.1.45" = overridableMkRustCrate (profileName: rec {
    name = "num-iter";
    version = "0.1.45";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1429034a0490724d0075ebb2bc9e875d6503c3cf69e235a8941aa757d83ef5bf"; };
    dependencies = {
      num_integer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-integer."0.1.46" { inherit profileName; }).out;
      num_traits = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.19" { inherit profileName; }).out;
    };
    buildDependencies = {
      autocfg = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.4.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.19" = overridableMkRustCrate (profileName: rec {
    name = "num-traits";
    version = "0.2.19";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "i128" ]
      [ "libm" ]
      [ "std" ]
    ];
    dependencies = {
      libm = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libm."0.2.8" { inherit profileName; }).out;
    };
    buildDependencies = {
      autocfg = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.4.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.16.0" = overridableMkRustCrate (profileName: rec {
    name = "num_cpus";
    version = "1.16.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4161fcb6d602d4d2081af7c3a45852d875a03dd337a6bfdd6e06407b61342a43"; };
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "hermit" then "hermit_abi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hermit-abi."0.3.9" { inherit profileName; }).out;
      ${ if !hostPlatform.isWindows then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".number_prefix."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "number_prefix";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "830b246a0e5f20af87141b25c173cd1b609bd7779a4617d6ec582abaf90870f3"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".object."0.36.5" = overridableMkRustCrate (profileName: rec {
    name = "object";
    version = "0.36.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "aedf0a2d09c573ed1d8d85b30c119153926a2b36dce0ab28322c09a117a4683e"; };
    features = builtins.concatLists [
      [ "archive" ]
      [ "coff" ]
      [ "elf" ]
      [ "macho" ]
      [ "pe" ]
      [ "read_core" ]
      [ "unaligned" ]
      [ "xcoff" ]
    ];
    dependencies = {
      memchr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".oid-registry."0.6.1" = overridableMkRustCrate (profileName: rec {
    name = "oid-registry";
    version = "0.6.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9bedf36ffb6ba96c2eb7144ef6270557b52e54b20c0a8e1eb2ff99a6c6959bff"; };
    features = builtins.concatLists [
      [ "crypto" ]
      [ "default" ]
      [ "kdf" ]
      [ "nist_algs" ]
      [ "pkcs1" ]
      [ "pkcs12" ]
      [ "pkcs7" ]
      [ "pkcs9" ]
      [ "registry" ]
      [ "x509" ]
      [ "x962" ]
    ];
    dependencies = {
      asn1_rs = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".asn1-rs."0.5.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".oid-registry."0.7.1" = overridableMkRustCrate (profileName: rec {
    name = "oid-registry";
    version = "0.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a8d8034d9489cdaf79228eb9f6a3b8d7bb32ba00d6645ebd48eef4077ceb5bd9"; };
    features = builtins.concatLists [
      [ "crypto" ]
      [ "default" ]
      [ "kdf" ]
      [ "nist_algs" ]
      [ "pkcs1" ]
      [ "pkcs12" ]
      [ "pkcs7" ]
      [ "pkcs9" ]
      [ "registry" ]
      [ "x509" ]
      [ "x962" ]
    ];
    dependencies = {
      asn1_rs = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".asn1-rs."0.6.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".once_cell."1.20.1" = overridableMkRustCrate (profileName: rec {
    name = "once_cell";
    version = "1.20.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "82881c4be219ab5faaf2ad5e5e5ecdff8c66bd7402ca3160975c93b24961afd1"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "race" ]
      [ "std" ]
    ];
    dependencies = {
      portable_atomic = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".portable-atomic."1.9.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".opaque-debug."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "opaque-debug";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c08d65885ee38876c4f86fa503fb49d7b507c2b62552df7c70b2fce627e06381"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".openssl."0.10.66" = overridableMkRustCrate (profileName: rec {
    name = "openssl";
    version = "0.10.66";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9529f4786b70a3e8c61e11179af17ab6188ad8d0ded78c5529441ed39d4bd9c1"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      bitflags = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.6.0" { inherit profileName; }).out;
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      foreign_types = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" { inherit profileName; }).out;
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
      once_cell = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.20.1" { inherit profileName; }).out;
      openssl_macros = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".openssl-macros."0.1.1" { profileName = "__noProfile"; }).out;
      ffi = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".openssl-sys."0.9.103" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".openssl-macros."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "openssl-macros";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a948666b637a0f465e8564c73e89d4dde00d72d4d473cc972f390fc3dcee7d9c"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".openssl-probe."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "openssl-probe";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ff011a302c396a5197692431fc1948019154afc178baf7d8e37367442a4601cf"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".openssl-sys."0.9.103" = overridableMkRustCrate (profileName: rec {
    name = "openssl-sys";
    version = "0.9.103";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7f9e8deee91df40a943c71b917e5874b951d32a802526c85721ce3b776c929d6"; };
    dependencies = {
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
    };
    buildDependencies = {
      cc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.1.25" { profileName = "__noProfile"; }).out;
      pkg_config = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.31" { profileName = "__noProfile"; }).out;
      vcpkg = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".vcpkg."0.2.15" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".opentelemetry."0.25.0" = overridableMkRustCrate (profileName: rec {
    name = "opentelemetry";
    version = "0.25.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "803801d3d3b71cd026851a53f974ea03df3d179cb758b260136a6c9e22e196af"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "logs" ]
      [ "metrics" ]
      [ "pin-project-lite" ]
      [ "trace" ]
    ];
    dependencies = {
      futures_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" { inherit profileName; }).out;
      futures_sink = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.31" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "wasm32" && !(hostPlatform.parsed.kernel.name == "wasi") then "js_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.70" { inherit profileName; }).out;
      once_cell = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.20.1" { inherit profileName; }).out;
      pin_project_lite = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.14" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.64" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".opentelemetry-http."0.25.0" = overridableMkRustCrate (profileName: rec {
    name = "opentelemetry-http";
    version = "0.25.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "88d8c2b76e5f7848a289aa9666dbe56b16f8a22a4c5246ef37a14941818d2913"; };
    features = builtins.concatLists [
      [ "reqwest" ]
    ];
    dependencies = {
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.83" { profileName = "__noProfile"; }).out;
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.7.2" { inherit profileName; }).out;
      http = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."1.1.0" { inherit profileName; }).out;
      opentelemetry = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".opentelemetry."0.25.0" { inherit profileName; }).out;
      reqwest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".reqwest."0.12.8" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".opentelemetry-otlp."0.25.0" = overridableMkRustCrate (profileName: rec {
    name = "opentelemetry-otlp";
    version = "0.25.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "596b1719b3cab83addb20bcbffdf21575279d9436d9ccccfe651a3bf0ab5ab06"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "grpc-tonic" ]
      [ "http" ]
      [ "http-proto" ]
      [ "logs" ]
      [ "metrics" ]
      [ "opentelemetry-http" ]
      [ "prost" ]
      [ "reqwest" ]
      [ "reqwest-client" ]
      [ "tokio" ]
      [ "tonic" ]
      [ "trace" ]
    ];
    dependencies = {
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.83" { profileName = "__noProfile"; }).out;
      futures_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" { inherit profileName; }).out;
      http = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."1.1.0" { inherit profileName; }).out;
      opentelemetry = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".opentelemetry."0.25.0" { inherit profileName; }).out;
      opentelemetry_http = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".opentelemetry-http."0.25.0" { inherit profileName; }).out;
      opentelemetry_proto = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".opentelemetry-proto."0.25.0" { inherit profileName; }).out;
      opentelemetry_sdk = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".opentelemetry_sdk."0.25.0" { inherit profileName; }).out;
      prost = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".prost."0.13.3" { inherit profileName; }).out;
      reqwest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".reqwest."0.12.8" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.64" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
      tonic = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tonic."0.12.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".opentelemetry-proto."0.25.0" = overridableMkRustCrate (profileName: rec {
    name = "opentelemetry-proto";
    version = "0.25.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2c43620e8f93359eb7e627a3b16ee92d8585774986f24f2ab010817426c5ce61"; };
    features = builtins.concatLists [
      [ "gen-tonic" ]
      [ "gen-tonic-messages" ]
      [ "logs" ]
      [ "metrics" ]
      [ "prost" ]
      [ "tonic" ]
      [ "trace" ]
    ];
    dependencies = {
      opentelemetry = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".opentelemetry."0.25.0" { inherit profileName; }).out;
      opentelemetry_sdk = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".opentelemetry_sdk."0.25.0" { inherit profileName; }).out;
      prost = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".prost."0.13.3" { inherit profileName; }).out;
      tonic = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tonic."0.12.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".opentelemetry-semantic-conventions."0.25.0" = overridableMkRustCrate (profileName: rec {
    name = "opentelemetry-semantic-conventions";
    version = "0.25.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9b8e442487022a943e2315740e443dc5ee95fd541c18f509a5a6251b408a9f95"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".opentelemetry_sdk."0.25.0" = overridableMkRustCrate (profileName: rec {
    name = "opentelemetry_sdk";
    version = "0.25.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e0da0d6b47a3dbc6e9c9e36a0520e25cf943e046843818faaa3f87365a548c82"; };
    features = builtins.concatLists [
      [ "async-trait" ]
      [ "default" ]
      [ "glob" ]
      [ "logs" ]
      [ "metrics" ]
      [ "percent-encoding" ]
      [ "rand" ]
      [ "serde_json" ]
      [ "trace" ]
    ];
    dependencies = {
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.83" { profileName = "__noProfile"; }).out;
      futures_channel = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.31" { inherit profileName; }).out;
      futures_executor = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-executor."0.3.31" { inherit profileName; }).out;
      futures_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" { inherit profileName; }).out;
      glob = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".glob."0.3.1" { inherit profileName; }).out;
      once_cell = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.20.1" { inherit profileName; }).out;
      opentelemetry = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".opentelemetry."0.25.0" { inherit profileName; }).out;
      percent_encoding = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.1" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      serde_json = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.128" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.64" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ordered-multimap."0.7.3" = overridableMkRustCrate (profileName: rec {
    name = "ordered-multimap";
    version = "0.7.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "49203cdcae0030493bad186b28da2fa25645fa276a51b6fec8010d281e02ef79"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3") "default")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "dlv_list" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".dlv-list."0.5.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "hashbrown" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.14.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".p256."0.13.2" = overridableMkRustCrate (profileName: rec {
    name = "p256";
    version = "0.13.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c9863ad85fa8f4460f9c48cb909d38a0d689dba1f6f6988a5e3e0d31071bcd4b"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "arithmetic" ]
      [ "default" ]
      [ "digest" ]
      [ "ecdh" ]
      [ "ecdsa" ]
      [ "ecdsa-core" ]
      [ "pem" ]
      [ "pkcs8" ]
      [ "sha2" ]
      [ "sha256" ]
      [ "std" ]
    ];
    dependencies = {
      ecdsa_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ecdsa."0.16.9" { inherit profileName; }).out;
      elliptic_curve = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".elliptic-curve."0.13.8" { inherit profileName; }).out;
      primeorder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".primeorder."0.13.6" { inherit profileName; }).out;
      sha2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".p384."0.13.0" = overridableMkRustCrate (profileName: rec {
    name = "p384";
    version = "0.13.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "70786f51bcc69f6a4c0360e063a4cac5419ef7c5cd5b3c99ad70f3be5ba79209"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "arithmetic" ]
      [ "default" ]
      [ "digest" ]
      [ "ecdh" ]
      [ "ecdsa" ]
      [ "ecdsa-core" ]
      [ "pem" ]
      [ "pkcs8" ]
      [ "sha2" ]
      [ "sha384" ]
      [ "std" ]
    ];
    dependencies = {
      ecdsa_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ecdsa."0.16.9" { inherit profileName; }).out;
      elliptic_curve = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".elliptic-curve."0.13.8" { inherit profileName; }).out;
      primeorder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".primeorder."0.13.6" { inherit profileName; }).out;
      sha2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".p521."0.13.3" = overridableMkRustCrate (profileName: rec {
    name = "p521";
    version = "0.13.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0fc9e2161f1f215afdfce23677034ae137bbd45016a880c2eb3ba8eb95f085b2"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "arithmetic" ]
      [ "default" ]
      [ "digest" ]
      [ "ecdh" ]
      [ "ecdsa" ]
      [ "ecdsa-core" ]
      [ "getrandom" ]
      [ "pem" ]
      [ "pkcs8" ]
      [ "rand_core" ]
      [ "sha512" ]
      [ "std" ]
    ];
    dependencies = {
      base16ct = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base16ct."0.2.0" { inherit profileName; }).out;
      ecdsa_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ecdsa."0.16.9" { inherit profileName; }).out;
      elliptic_curve = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".elliptic-curve."0.13.8" { inherit profileName; }).out;
      primeorder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".primeorder."0.13.6" { inherit profileName; }).out;
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; }).out;
      sha2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.3" = overridableMkRustCrate (profileName: rec {
    name = "parking_lot";
    version = "0.12.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f1bf18183cf54e8d6059647fc3063646a1801cf30896933ec2311622cc4b9a27"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      lock_api = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lock_api."0.4.12" { inherit profileName; }).out;
      parking_lot_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot_core."0.9.10" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parking_lot_core."0.9.10" = overridableMkRustCrate (profileName: rec {
    name = "parking_lot_core";
    version = "0.9.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1e401f977ab385c9e4e3ab30627d6f26d00e2c73eef317493c4ec6d468726cf8"; };
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "redox" then "syscall" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.5.7" { inherit profileName; }).out;
      smallvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.13.2" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "windows_targets" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.52.6" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".password-hash."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "password-hash";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "346f04948ba92c43e8469c1ee6736c7563d71012b17d40745260fe106aac2166"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "rand_core" ]
      [ "std" ]
    ];
    dependencies = {
      base64ct = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64ct."1.6.0" { inherit profileName; }).out;
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.6.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".paste."1.0.15" = overridableMkRustCrate (profileName: rec {
    name = "paste";
    version = "1.0.15";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pbkdf2."0.12.2" = overridableMkRustCrate (profileName: rec {
    name = "pbkdf2";
    version = "0.12.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f8ed6a7761f76e3b9f92dfb0a60a6a6477c61024b775147ff0973a02653abaf2"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "hmac" ]
      [ "password-hash" ]
      [ "sha2" ]
      [ "simple" ]
    ];
    dependencies = {
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" { inherit profileName; }).out;
      hmac = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hmac."0.12.1" { inherit profileName; }).out;
      password_hash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".password-hash."0.5.0" { inherit profileName; }).out;
      sha2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pem."3.0.4" = overridableMkRustCrate (profileName: rec {
    name = "pem";
    version = "3.0.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8e459365e590736a54c3fa561947c84837534b8e9af6fc5bf781307e82658fae"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      base64 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.22.1" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pem-rfc7468."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "pem-rfc7468";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "88b39c9bfcfc231068454382784bb460aae594343fb030d46e9f50a645418412"; };
    features = builtins.concatLists [
      [ "alloc" ]
    ];
    dependencies = {
      base64ct = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64ct."1.6.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.1" = overridableMkRustCrate (profileName: rec {
    name = "percent-encoding";
    version = "2.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e3148f5046208a5d56bcfc03053e3ca6334e51da8dfb19b6cdc8b306fae3283e"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".petgraph."0.6.5" = overridableMkRustCrate (profileName: rec {
    name = "petgraph";
    version = "0.6.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b4c5cc86750666a3ed20bdaf5ca2a0344f9c67674cae0515bec2da16fbaa47db"; };
    dependencies = {
      fixedbitset = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fixedbitset."0.4.2" { inherit profileName; }).out;
      indexmap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."2.6.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".phf."0.11.2" = overridableMkRustCrate (profileName: rec {
    name = "phf";
    version = "0.11.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ade2d8b8f33c7333b51bcf0428d37e217e9f32192ae4772156f65063b8ce03dc"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "macros" ]
      [ "phf_macros" ]
      [ "std" ]
    ];
    dependencies = {
      phf_macros = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".phf_macros."0.11.2" { profileName = "__noProfile"; }).out;
      phf_shared = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".phf_shared."0.11.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".phf_codegen."0.11.2" = overridableMkRustCrate (profileName: rec {
    name = "phf_codegen";
    version = "0.11.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e8d39688d359e6b34654d328e262234662d16cc0f60ec8dcbe5e718709342a5a"; };
    dependencies = {
      phf_generator = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".phf_generator."0.11.2" { inherit profileName; }).out;
      phf_shared = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".phf_shared."0.11.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".phf_generator."0.11.2" = overridableMkRustCrate (profileName: rec {
    name = "phf_generator";
    version = "0.11.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "48e4cc64c2ad9ebe670cb8fd69dd50ae301650392e81c05f9bfcb2d5bdbc24b0"; };
    dependencies = {
      phf_shared = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".phf_shared."0.11.2" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".phf_macros."0.11.2" = overridableMkRustCrate (profileName: rec {
    name = "phf_macros";
    version = "0.11.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3444646e286606587e49f3bcf1679b8cef1dc2c5ecc29ddacaffc305180d464b"; };
    dependencies = {
      phf_generator = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".phf_generator."0.11.2" { inherit profileName; }).out;
      phf_shared = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".phf_shared."0.11.2" { inherit profileName; }).out;
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".phf_shared."0.10.0" = overridableMkRustCrate (profileName: rec {
    name = "phf_shared";
    version = "0.10.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b6796ad771acdc0123d2a88dc428b5e38ef24456743ddb1744ed628f9815c096"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      siphasher = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".siphasher."0.3.11" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".phf_shared."0.11.2" = overridableMkRustCrate (profileName: rec {
    name = "phf_shared";
    version = "0.11.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "90fcb95eef784c2ac79119d1dd819e162b5da872ce6f3c3abe1e8ca1c082f72b"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      siphasher = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".siphasher."0.3.11" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pin-project."1.1.5" = overridableMkRustCrate (profileName: rec {
    name = "pin-project";
    version = "1.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b6bf43b791c5b9e34c3d182969b4abb522f9343702850a2e57f460d00d09b4b3"; };
    dependencies = {
      pin_project_internal = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-internal."1.1.5" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pin-project-internal."1.1.5" = overridableMkRustCrate (profileName: rec {
    name = "pin-project-internal";
    version = "1.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2f38a4412a78282e09a2cf38d195ea5420d15ba0602cb375210efbc877243965"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.14" = overridableMkRustCrate (profileName: rec {
    name = "pin-project-lite";
    version = "0.2.14";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bda66fc9667c18cb2758a2ac84d1167245054bcf85d5d1aaa6923f45801bdd02"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pin-utils."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "pin-utils";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pkcs1."0.7.5" = overridableMkRustCrate (profileName: rec {
    name = "pkcs1";
    version = "0.7.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c8ffb9f10fa047879315e6625af03c164b16962a5368d724ed16323b68ace47f"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "pem" ]
      [ "pkcs8" ]
      [ "std" ]
      [ "zeroize" ]
    ];
    dependencies = {
      der = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".der."0.7.9" { inherit profileName; }).out;
      pkcs8 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pkcs8."0.10.2" { inherit profileName; }).out;
      spki = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".spki."0.7.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pkcs8."0.10.2" = overridableMkRustCrate (profileName: rec {
    name = "pkcs8";
    version = "0.10.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f950b2377845cebe5cf8b5165cb3cc1a5e0fa5cfa3e1f7f55707d8fd82e0a7b7"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "pem" ]
      [ "std" ]
    ];
    dependencies = {
      der = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".der."0.7.9" { inherit profileName; }).out;
      spki = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".spki."0.7.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.31" = overridableMkRustCrate (profileName: rec {
    name = "pkg-config";
    version = "0.3.31";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "953ec861398dccce10c670dfeaf3ec4911ca479e9c02154b3a215178c5f566f2"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".polyval."0.6.2" = overridableMkRustCrate (profileName: rec {
    name = "polyval";
    version = "0.6.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9d1fe60d06143b2430aa532c94cfe9e29783047f06c0d7fd359a9a51b729fa25"; };
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "aarch64" || hostPlatform.parsed.cpu.name == "x86_64" || hostPlatform.parsed.cpu.name == "i686" then "cpufeatures" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.14" { inherit profileName; }).out;
      opaque_debug = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".opaque-debug."0.3.1" { inherit profileName; }).out;
      universal_hash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".universal-hash."0.5.1" { inherit profileName; }).out;
    };
  });
  
  "unknown".pop3."0.10.4" = overridableMkRustCrate (profileName: rec {
    name = "pop3";
    version = "0.10.4";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    features = builtins.concatLists [
      [ "test_mode" ]
    ];
    dependencies = {
      common = (rustPackages."unknown".common."0.10.4" { inherit profileName; }).out;
      directory = (rustPackages."unknown".directory."0.10.4" { inherit profileName; }).out;
      imap = (rustPackages."unknown".imap."0.10.4" { inherit profileName; }).out;
      jmap = (rustPackages."unknown".jmap."0.10.4" { inherit profileName; }).out;
      jmap_proto = (rustPackages."unknown".jmap_proto."0.10.4" { inherit profileName; }).out;
      mail_parser = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mail-parser."0.9.4" { inherit profileName; }).out;
      mail_send = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mail-send."0.4.9" { inherit profileName; }).out;
      rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.23.14" { inherit profileName; }).out;
      store = (rustPackages."unknown".store."0.10.4" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
      tokio_rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-rustls."0.26.0" { inherit profileName; }).out;
      trc = (rustPackages."unknown".trc."0.10.4" { inherit profileName; }).out;
      utils = (rustPackages."unknown".utils."0.10.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".portable-atomic."1.9.0" = overridableMkRustCrate (profileName: rec {
    name = "portable-atomic";
    version = "1.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cc9c68a3f6da06753e9335d63e27f6b9754dd1920d941135b7ea8224f141adb2"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "fallback" ]
      [ "require-cas" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".postgres-protocol."0.6.7" = overridableMkRustCrate (profileName: rec {
    name = "postgres-protocol";
    version = "0.6.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "acda0ebdebc28befa84bee35e651e4c5f09073d668c7aed4cf7e23c3cda84b23"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" then "base64" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.22.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" then "byteorder" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" then "bytes" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.7.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" then "fallible_iterator" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fallible-iterator."0.2.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" then "hmac" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hmac."0.12.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" then "md5" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".md-5."0.10.6" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" then "memchr" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" then "rand" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" then "sha2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" then "stringprep" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".stringprep."0.1.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".postgres-types."0.2.8" = overridableMkRustCrate (profileName: rec {
    name = "postgres-types";
    version = "0.2.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f66ea23a2d0e5734297357705193335e0a957696f34bed2f2faefacb2fec336f"; };
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" then "bytes" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.7.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" then "fallible_iterator" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fallible-iterator."0.2.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" then "postgres_protocol" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".postgres-protocol."0.6.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".powerfmt."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "powerfmt";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "439ee305def115ba05938db6eb1644ff94165c5ab5e9420d1c1bcedbba909391"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ppv-lite86."0.2.20" = overridableMkRustCrate (profileName: rec {
    name = "ppv-lite86";
    version = "0.2.20";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "77957b295656769bb8ad2b6a6b09d897d94f05c41b069aede1fcdaa675eaea04"; };
    features = builtins.concatLists [
      [ "simd" ]
      [ "std" ]
    ];
    dependencies = {
      zerocopy = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zerocopy."0.7.35" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".precomputed-hash."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "precomputed-hash";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "925383efa346730478fb4838dbe9137d2a47675ad789c546d150a6e1dd4ab31c"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".prettyplease."0.2.22" = overridableMkRustCrate (profileName: rec {
    name = "prettyplease";
    version = "0.2.22";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "479cf940fbbb3426c32c5d5176f62ad57549a0bb84773423ba8be9d089f5faba"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") "verbatim")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".prettytable-rs."0.10.0" = overridableMkRustCrate (profileName: rec {
    name = "prettytable-rs";
    version = "0.10.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "eea25e07510aa6ab6547308ebe3c036016d162b8da920dbb079e3ba8acf3d95a"; };
    features = builtins.concatLists [
      [ "csv" ]
      [ "default" ]
      [ "win_crlf" ]
    ];
    dependencies = {
      csv = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".csv."1.3.0" { inherit profileName; }).out;
      encode_unicode = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".encode_unicode."1.0.0" { inherit profileName; }).out;
      is_terminal = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".is-terminal."0.4.13" { inherit profileName; }).out;
      lazy_static = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.5.0" { inherit profileName; }).out;
      term = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".term."0.7.0" { inherit profileName; }).out;
      unicode_width = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-width."0.1.14" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".primeorder."0.13.6" = overridableMkRustCrate (profileName: rec {
    name = "primeorder";
    version = "0.13.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "353e1ca18966c16d9deb1c69278edbc5f194139612772bd9537af60ac231e1e6"; };
    dependencies = {
      elliptic_curve = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".elliptic-curve."0.13.8" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".privdrop."0.5.4" = overridableMkRustCrate (profileName: rec {
    name = "privdrop";
    version = "0.5.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9bc12de3935536ed9b69488faea4450a298dac44179b54f71806e63f55034bf9"; };
    dependencies = {
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
      nix = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.26.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."3.2.0" = overridableMkRustCrate (profileName: rec {
    name = "proc-macro-crate";
    version = "3.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8ecf48c7ca261d60b74ab1a7b20da18bede46776b2e55535cb958eb595c5fa7b"; };
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "toml_edit" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml_edit."0.22.22" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".proc-macro-error."1.0.4" = overridableMkRustCrate (profileName: rec {
    name = "proc-macro-error";
    version = "1.0.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "da25490ff9892aab3fcf7c36f08cfb902dd3e71ca0f9f9517bea02a73a5ce38c"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "default")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "syn")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "syn-error")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "proc_macro_error_attr" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-error-attr."1.0.4" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
    buildDependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "version_check" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.5" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".proc-macro-error-attr."1.0.4" = overridableMkRustCrate (profileName: rec {
    name = "proc-macro-error-attr";
    version = "1.0.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a1be40180e52ecc98ad80b184934baf3d0d29f979574e439af5a55274b35f869"; };
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
    };
    buildDependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "version_check" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.5" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" = overridableMkRustCrate (profileName: rec {
    name = "proc-macro2";
    version = "1.0.86";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5e719e8df665df0d1c8fbfd238015744736151d4445ec0836b8e628aae103b77"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "proc-macro" ]
    ];
    dependencies = {
      unicode_ident = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-ident."1.0.13" { inherit profileName; }).out;
    };
  });
  
  "unknown".proc_macros."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "proc_macros";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".prometheus."0.13.4" = overridableMkRustCrate (profileName: rec {
    name = "prometheus";
    version = "0.13.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3d33c28a30771f7f96db69893f78b857f7450d7e0237e9c8fc6427a81bae7ed1"; };
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      fnv = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; }).out;
      lazy_static = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.5.0" { inherit profileName; }).out;
      memchr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.4" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.3" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.64" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".prost."0.13.3" = overridableMkRustCrate (profileName: rec {
    name = "prost";
    version = "0.13.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7b0487d90e047de87f984913713b85c601c05609aad5b0df4b4573fbf69aa13f"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "derive" ]
      [ "std" ]
    ];
    dependencies = {
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.7.2" { inherit profileName; }).out;
      prost_derive = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".prost-derive."0.13.3" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".prost-derive."0.13.3" = overridableMkRustCrate (profileName: rec {
    name = "prost-derive";
    version = "0.13.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e9552f850d5f0964a4e4d0bf306459ac29323ddfbae05e35a7c0d35cb0803cc5"; };
    dependencies = {
      anyhow = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.89" { inherit profileName; }).out;
      itertools = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.13.0" { inherit profileName; }).out;
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".proxy-header."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "proxy-header";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dc1493f63ddddfba840c3169e997c2905d09538ace72d64e84af6324c6e0e065"; };
    features = builtins.concatLists [
      [ "tokio" ]
    ];
    dependencies = {
      pin_project_lite = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.14" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".psl."2.1.55" = overridableMkRustCrate (profileName: rec {
    name = "psl";
    version = "2.1.55";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ce9398ad066421139b2e3afe16ea46772ffda30bd9ba57554dc035df5e26edc8"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "helpers" ]
    ];
    dependencies = {
      psl_types = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".psl-types."2.0.11" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".psl-types."2.0.11" = overridableMkRustCrate (profileName: rec {
    name = "psl-types";
    version = "2.0.11";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "33cb294fe86a74cbcf50d4445b37da762029549ebeea341421c7c70370f86cac"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ptr_meta."0.1.4" = overridableMkRustCrate (profileName: rec {
    name = "ptr_meta";
    version = "0.1.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0738ccf7ea06b608c10564b31debd4f5bc5e197fc8bfe088f68ae5ce81e7a4f1"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "ptr_meta_derive" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".ptr_meta_derive."0.1.4" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ptr_meta_derive."0.1.4" = overridableMkRustCrate (profileName: rec {
    name = "ptr_meta_derive";
    version = "0.1.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "16b845dbfca988fa33db069c0e230574d15a3088f147a87b64c7589eb662c9ac"; };
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pwhash."1.0.0" = overridableMkRustCrate (profileName: rec {
    name = "pwhash";
    version = "1.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "419a3ad8fa9f9d445e69d9b185a24878ae6e6f55c96e4512f4a0e28cd3bc5c56"; };
    dependencies = {
      blowfish = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".blowfish."0.7.0" { inherit profileName; }).out;
      byteorder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" { inherit profileName; }).out;
      hmac = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hmac."0.10.1" { inherit profileName; }).out;
      md5 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".md-5."0.9.1" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      sha1 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha-1."0.9.8" { inherit profileName; }).out;
      sha2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.9.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".quick-error."1.2.3" = overridableMkRustCrate (profileName: rec {
    name = "quick-error";
    version = "1.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a1d01941d82fa2ab50be1e79e6714289dd7cde78eba4c074bc5a4374f650dfe0"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".quick-xml."0.32.0" = overridableMkRustCrate (profileName: rec {
    name = "quick-xml";
    version = "0.32.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1d3a6e5838b60e0e8fa7a43f22ade549a37d61f8bdbe636d0d7816191de969c2"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3") "default")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3") "serde")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3") "serialize")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "memchr" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "serde" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".quick-xml."0.36.2" = overridableMkRustCrate (profileName: rec {
    name = "quick-xml";
    version = "0.36.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f7649a7b4df05aed9ea7ec6f628c67c9953a43869b8bc50929569b2999d443fe"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      memchr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".quinn."0.11.5" = overridableMkRustCrate (profileName: rec {
    name = "quinn";
    version = "0.11.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8c7c5fdde3cdae7203427dc4f0a68fe0ed09833edc525a03456b153b79828684"; };
    features = builtins.concatLists [
      [ "ring" ]
      [ "runtime-tokio" ]
      [ "rustls" ]
    ];
    dependencies = {
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.7.2" { inherit profileName; }).out;
      pin_project_lite = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.14" { inherit profileName; }).out;
      proto = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quinn-proto."0.11.8" { inherit profileName; }).out;
      udp = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quinn-udp."0.5.5" { inherit profileName; }).out;
      rustc_hash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hash."2.0.0" { inherit profileName; }).out;
      rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.23.14" { inherit profileName; }).out;
      socket2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".socket2."0.5.7" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.64" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
      tracing = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".quinn-proto."0.11.8" = overridableMkRustCrate (profileName: rec {
    name = "quinn-proto";
    version = "0.11.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fadfaed2cd7f389d0161bb73eeb07b7b78f8691047a6f3e73caaeae55310a4a6"; };
    features = builtins.concatLists [
      [ "ring" ]
      [ "rustls" ]
    ];
    dependencies = {
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.7.2" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      ring = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.17.8" { inherit profileName; }).out;
      rustc_hash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hash."2.0.0" { inherit profileName; }).out;
      rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.23.14" { inherit profileName; }).out;
      slab = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.9" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.64" { inherit profileName; }).out;
      tinyvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinyvec."1.8.0" { inherit profileName; }).out;
      tracing = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".quinn-udp."0.5.5" = overridableMkRustCrate (profileName: rec {
    name = "quinn-udp";
    version = "0.5.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4fe68c2e9e1a1234e218683dbdf9f9dfcb094113c5ac2b938dfcb9bab4c4140b"; };
    features = builtins.concatLists [
      [ "tracing" ]
    ];
    dependencies = {
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "once_cell" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.20.1" { inherit profileName; }).out;
      socket2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".socket2."0.5.7" { inherit profileName; }).out;
      tracing = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.59.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" = overridableMkRustCrate (profileName: rec {
    name = "quote";
    version = "1.0.37";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b5b9d34b8991d19d98081b46eacdd8eb58c6f2b201139f7c5f643cc155a633af"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "proc-macro" ]
    ];
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".r2d2."0.8.10" = overridableMkRustCrate (profileName: rec {
    name = "r2d2";
    version = "0.8.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "51de85fb3fb6524929c8a2eb85e6b6d363de4e8c48f9e2c2eac4944abc181c93"; };
    dependencies = {
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.22" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.3" { inherit profileName; }).out;
      scheduled_thread_pool = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scheduled-thread-pool."0.2.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".radium."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "radium";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dc33ff2d4973d518d823d61aa239014831e521c75da58e3df4840d3f47749d09"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".radix_trie."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "radix_trie";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c069c179fcdc6a2fe24d8d18305cf085fdbd4f922c041943e203685d6a1c58fd"; };
    dependencies = {
      endian_type = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".endian-type."0.1.2" { inherit profileName; }).out;
      nibble_vec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".nibble_vec."0.1.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" = overridableMkRustCrate (profileName: rec {
    name = "rand";
    version = "0.8.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "getrandom" ]
      [ "libc" ]
      [ "rand_chacha" ]
      [ "small_rng" ]
      [ "std" ]
      [ "std_rng" ]
    ];
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
      rand_chacha = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_chacha."0.3.1" { inherit profileName; }).out;
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_chacha."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "rand_chacha";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      ppv_lite86 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ppv-lite86."0.2.20" { inherit profileName; }).out;
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" = overridableMkRustCrate (profileName: rec {
    name = "rand_core";
    version = "0.6.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "getrandom" ]
      [ "std" ]
    ];
    dependencies = {
      getrandom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.15" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rasn."0.10.6" = overridableMkRustCrate (profileName: rec {
    name = "rasn";
    version = "0.10.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "76def3a472085e40dae01e4eeb106f2ed70f8c7dabe041faed1668a00ee143ef"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "macros" ]
      [ "rasn-derive" ]
    ];
    dependencies = {
      arrayvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.6" { inherit profileName; }).out;
      bitvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitvec."1.0.1" { inherit profileName; }).out;
      nom_bitvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitvec-nom2."0.2.1" { inherit profileName; }).out;
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.7.2" { inherit profileName; }).out;
      chrono = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".chrono."0.4.38" { inherit profileName; }).out;
      either = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.13.0" { inherit profileName; }).out;
      konst = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".konst."0.3.9" { inherit profileName; }).out;
      nom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".nom."7.1.3" { inherit profileName; }).out;
      num_bigint = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-bigint."0.4.6" { inherit profileName; }).out;
      num_integer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-integer."0.1.46" { inherit profileName; }).out;
      num_traits = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.19" { inherit profileName; }).out;
      once_cell = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.20.1" { inherit profileName; }).out;
      rasn_derive = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".rasn-derive."0.10.6" { profileName = "__noProfile"; }).out;
      snafu = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".snafu."0.7.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rasn-cms."0.10.6" = overridableMkRustCrate (profileName: rec {
    name = "rasn-cms";
    version = "0.10.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "09d45b1b6c0bfb41d1023246a3853a82d158d7e6690698ad4acac009f2f09380"; };
    dependencies = {
      rasn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rasn."0.10.6" { inherit profileName; }).out;
      rasn_pkix = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rasn-pkix."0.10.6" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rasn-derive."0.10.6" = overridableMkRustCrate (profileName: rec {
    name = "rasn-derive";
    version = "0.10.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "48d1fd02e16232e942b5e7ce305b447c550d09a9146255a3e8a2cf62a0e2ac2d"; };
    dependencies = {
      either = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.13.0" { inherit profileName; }).out;
      itertools = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.5" { inherit profileName; }).out;
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      rayon = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rayon."1.10.0" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
      uuid = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".uuid."1.10.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rasn-pkix."0.10.6" = overridableMkRustCrate (profileName: rec {
    name = "rasn-pkix";
    version = "0.10.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6c825c4183e8f4db9bd772206d7d0fa10f3df35b6ed5bcb8f6cb50fd1166f8e9"; };
    dependencies = {
      rasn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rasn."0.10.6" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rayon."1.10.0" = overridableMkRustCrate (profileName: rec {
    name = "rayon";
    version = "1.10.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b418a60154510ca1a002a752ca9714984e21e4241e804d32555251faf8b78ffa"; };
    dependencies = {
      either = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.13.0" { inherit profileName; }).out;
      rayon_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rayon-core."1.12.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rayon-core."1.12.1" = overridableMkRustCrate (profileName: rec {
    name = "rayon-core";
    version = "1.12.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1465873a3dfdaa8ae7cb14b4383657caab0b3e8a0aa9ae8e04b044854c8dfce2"; };
    dependencies = {
      crossbeam_deque = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-deque."0.8.5" { inherit profileName; }).out;
      crossbeam_utils = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.20" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rcgen."0.12.1" = overridableMkRustCrate (profileName: rec {
    name = "rcgen";
    version = "0.12.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "48406db8ac1f3cbc7dcdb56ec355343817958a356ff430259bb07baf7607e1e1"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "pem" ]
      [ "ring" ]
    ];
    dependencies = {
      pem = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pem."3.0.4" { inherit profileName; }).out;
      ring = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.17.8" { inherit profileName; }).out;
      time = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".time."0.3.36" { inherit profileName; }).out;
      yasna = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".yasna."0.5.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rcgen."0.13.1" = overridableMkRustCrate (profileName: rec {
    name = "rcgen";
    version = "0.13.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "54077e1872c46788540de1ea3d7f4ccb1983d12f9aa909b234468676c1a36779"; };
    features = builtins.concatLists [
      [ "crypto" ]
      [ "default" ]
      [ "pem" ]
      [ "ring" ]
    ];
    dependencies = {
      pem = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pem."3.0.4" { inherit profileName; }).out;
      ring = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.17.8" { inherit profileName; }).out;
      pki_types = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pki-types."1.9.0" { inherit profileName; }).out;
      time = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".time."0.3.36" { inherit profileName; }).out;
      yasna = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".yasna."0.5.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".redis."0.26.1" = overridableMkRustCrate (profileName: rec {
    name = "redis";
    version = "0.26.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e902a69d09078829137b4a5d9d082e0490393537badd7c91a3d69d14639e115f"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") "acl")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") "aio")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") "async-trait")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") "bytes")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") "cluster")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") "cluster-async")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") "crc16")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") "default")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") "futures")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") "futures-util")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") "geospatial")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") "keep-alive")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") "log")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") "pin-project-lite")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") "rand")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") "rustls")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") "rustls-native-certs")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") "rustls-pemfile")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") "rustls-pki-types")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") "script")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") "sha1_smol")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") "socket2")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") "streams")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") "tls-rustls")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") "tls-rustls-insecure")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") "tls-rustls-webpki-roots")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") "tokio")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") "tokio-comp")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") "tokio-rustls")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") "tokio-rustls-comp")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") "tokio-util")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") "webpki-roots")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis" then "arc_swap" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".arc-swap."1.7.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis" then "async_trait" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.83" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis" then "bytes" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.7.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis" then "combine" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".combine."4.6.7" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis" then "crc16" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc16."0.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis" then "futures" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.31" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis" then "futures_util" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis" then "itoa" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.11" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.22" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis" then "num_bigint" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-bigint."0.4.6" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis" then "percent_encoding" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis" then "pin_project_lite" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.14" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis" then "rand" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis" then "rustls" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.23.14" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis" then "rustls_native_certs" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-native-certs."0.7.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis" then "rustls_pemfile" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pemfile."2.2.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis" then "rustls_pki_types" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pki-types."1.9.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis" then "ryu" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ryu."1.0.18" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis" then "sha1_smol" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha1_smol."1.0.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis" then "socket2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".socket2."0.5.7" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis" then "tokio" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis" then "tokio_rustls" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-rustls."0.26.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis" then "tokio_util" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-util."0.7.12" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis" then "url" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.5.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis" then "webpki_roots" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webpki-roots."0.26.6" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.5.7" = overridableMkRustCrate (profileName: rec {
    name = "redox_syscall";
    version = "0.5.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9b6dfecf2c74bce2466cabf93f6664d6998a69eb21e39f4207930065b27b771f"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "userspace" ]
    ];
    dependencies = {
      bitflags = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.6.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".redox_users."0.4.6" = overridableMkRustCrate (profileName: rec {
    name = "redox_users";
    version = "0.4.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ba009ff324d1fc1b900bd1fdb31564febe58a8ccc8a6fdbb93b543d33b13ca43"; };
    dependencies = {
      getrandom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.15" { inherit profileName; }).out;
      libredox = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libredox."0.1.3" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.64" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".regex."1.11.0" = overridableMkRustCrate (profileName: rec {
    name = "regex";
    version = "1.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "38200e5ee88914975b69f657f0801b6f6dccafd44fd9326302a4aaeecfacb1d8"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "perf" ]
      [ "perf-backtrack" ]
      [ "perf-cache" ]
      [ "perf-dfa" ]
      [ "perf-inline" ]
      [ "perf-literal" ]
      [ "perf-onepass" ]
      [ "std" ]
      [ "unicode" ]
      [ "unicode-age" ]
      [ "unicode-bool" ]
      [ "unicode-case" ]
      [ "unicode-gencat" ]
      [ "unicode-perl" ]
      [ "unicode-script" ]
      [ "unicode-segment" ]
    ];
    dependencies = {
      aho_corasick = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aho-corasick."1.1.3" { inherit profileName; }).out;
      memchr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.4" { inherit profileName; }).out;
      regex_automata = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-automata."0.4.8" { inherit profileName; }).out;
      regex_syntax = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.8.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".regex-automata."0.4.8" = overridableMkRustCrate (profileName: rec {
    name = "regex-automata";
    version = "0.4.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "368758f23274712b504848e9d5a6f010445cc8b87a7cdb4d7cbee666c1288da3"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "dfa" ]
      [ "dfa-build" ]
      [ "dfa-onepass" ]
      [ "dfa-search" ]
      [ "hybrid" ]
      [ "meta" ]
      [ "nfa" ]
      [ "nfa-backtrack" ]
      [ "nfa-pikevm" ]
      [ "nfa-thompson" ]
      [ "perf" ]
      [ "perf-inline" ]
      [ "perf-literal" ]
      [ "perf-literal-multisubstring" ]
      [ "perf-literal-substring" ]
      [ "std" ]
      [ "syntax" ]
      [ "unicode" ]
      [ "unicode-age" ]
      [ "unicode-bool" ]
      [ "unicode-case" ]
      [ "unicode-gencat" ]
      [ "unicode-perl" ]
      [ "unicode-script" ]
      [ "unicode-segment" ]
      [ "unicode-word-boundary" ]
    ];
    dependencies = {
      aho_corasick = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aho-corasick."1.1.3" { inherit profileName; }).out;
      memchr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.4" { inherit profileName; }).out;
      regex_syntax = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.8.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.8.5" = overridableMkRustCrate (profileName: rec {
    name = "regex-syntax";
    version = "0.8.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2b15c43186be67a4fd63bee50d0303afffcef381492ebe2c5d87f324e1b8815c"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
      [ "unicode" ]
      [ "unicode-age" ]
      [ "unicode-bool" ]
      [ "unicode-case" ]
      [ "unicode-gencat" ]
      [ "unicode-perl" ]
      [ "unicode-script" ]
      [ "unicode-segment" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rend."0.4.2" = overridableMkRustCrate (profileName: rec {
    name = "rend";
    version = "0.4.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "71fe3824f5629716b1589be05dacd749f6aa084c87e00e016714a8cdfccc997c"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "bytecheck")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "bytecheck" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytecheck."0.6.12" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".reqwest."0.11.27" = overridableMkRustCrate (profileName: rec {
    name = "reqwest";
    version = "0.11.27";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dd67538700a17451e7cba03ac727fb961abb7607553461627b97de0b89cf4a62"; };
    features = builtins.concatLists [
      [ "__rustls" ]
      [ "__tls" ]
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic") "async-compression")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic") "gzip")
      [ "hyper-rustls" ]
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic") "json")
      [ "rustls" ]
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic") "rustls-tls")
      [ "rustls-tls-webpki-roots" ]
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic") "serde_json")
      [ "stream" ]
      [ "tokio-rustls" ]
      [ "tokio-util" ]
      [ "wasm-streams" ]
      [ "webpki-roots" ]
    ];
    dependencies = {
      ${ if (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic") && !(hostPlatform.parsed.cpu.name == "wasm32") then "async_compression" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-compression."0.4.13" { inherit profileName; }).out;
      base64 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.21.7" { inherit profileName; }).out;
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.7.2" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "encoding_rs" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".encoding_rs."0.8.34" { inherit profileName; }).out;
      futures_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" { inherit profileName; }).out;
      futures_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "h2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".h2."0.3.26" { inherit profileName; }).out;
      http = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.12" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "http_body" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body."0.4.6" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "hyper" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper."0.14.30" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "hyper_rustls" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper-rustls."0.24.2" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "ipnet" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ipnet."2.10.1" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "js_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.70" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.22" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "mime" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mime."0.3.17" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "once_cell" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.20.1" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "percent_encoding" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.1" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "pin_project_lite" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.14" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "rustls" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.21.12" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "rustls_pemfile" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pemfile."1.0.4" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
      serde_json = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.128" { inherit profileName; }).out;
      serde_urlencoded = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_urlencoded."0.7.1" { inherit profileName; }).out;
      sync_wrapper = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sync_wrapper."0.1.2" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "darwin" then "system_configuration" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".system-configuration."0.5.1" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "tokio" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "tokio_rustls" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-rustls."0.24.1" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "tokio_util" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-util."0.7.12" { inherit profileName; }).out;
      tower_service = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-service."0.3.3" { inherit profileName; }).out;
      url = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.5.2" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.93" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen_futures" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.43" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_streams" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-streams."0.4.1" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.70" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "webpki_roots" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webpki-roots."0.25.4" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "winreg" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winreg."0.50.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".reqwest."0.12.8" = overridableMkRustCrate (profileName: rec {
    name = "reqwest";
    version = "0.12.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f713147fbe92361e52392c73b8c9e48c04c6625bce969ef54dc901e58e042a7b"; };
    features = builtins.concatLists [
      [ "__rustls" ]
      [ "__rustls-ring" ]
      [ "__tls" ]
      [ "blocking" ]
      [ "h2" ]
      [ "http2" ]
      [ "multipart" ]
      [ "rustls-tls-webpki-roots" ]
      [ "stream" ]
    ];
    dependencies = {
      base64 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.22.1" { inherit profileName; }).out;
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.7.2" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "futures_channel" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.31" { inherit profileName; }).out;
      futures_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" { inherit profileName; }).out;
      futures_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "h2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".h2."0.4.6" { inherit profileName; }).out;
      http = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."1.1.0" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "http_body" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body."1.0.1" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "http_body_util" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body-util."0.1.2" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "hyper" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper."1.4.1" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "hyper_rustls" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper-rustls."0.27.3" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "hyper_util" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper-util."0.1.9" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "ipnet" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ipnet."2.10.1" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "js_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.70" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.22" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "mime" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mime."0.3.17" { inherit profileName; }).out;
      mime_guess = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mime_guess."2.0.5" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "once_cell" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.20.1" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "percent_encoding" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.1" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "pin_project_lite" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.14" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "quinn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quinn."0.11.5" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "rustls" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.23.14" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "rustls_pemfile" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pemfile."2.2.0" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "rustls_pki_types" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pki-types."1.9.0" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "serde_json" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.128" { inherit profileName; }).out;
      serde_urlencoded = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_urlencoded."0.7.1" { inherit profileName; }).out;
      sync_wrapper = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sync_wrapper."1.0.1" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "tokio" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "tokio_rustls" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-rustls."0.26.0" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "tokio_util" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-util."0.7.12" { inherit profileName; }).out;
      tower_service = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-service."0.3.3" { inherit profileName; }).out;
      url = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.5.2" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.93" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen_futures" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.43" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_streams" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-streams."0.4.1" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.70" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "webpki_roots" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webpki-roots."0.26.6" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "windows_registry" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-registry."0.2.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".resolv-conf."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "resolv-conf";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "52e44394d2086d010551b14b53b1f24e31647570cd1deb0379e2c21b329aba00"; };
    features = builtins.concatLists [
      [ "hostname" ]
      [ "system" ]
    ];
    dependencies = {
      hostname = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hostname."0.3.1" { inherit profileName; }).out;
      quick_error = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quick-error."1.2.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rev_lines."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "rev_lines";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ed62916ac7a5ccbf13fa5e1d303029ff015600fee841756dfc134a1ac62bf05f"; };
    dependencies = {
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.64" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rfc6979."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "rfc6979";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f8dd2a808d456c4a54e300a23e9f5a67e122c3024119acbfd73e3bf664491cb2"; };
    dependencies = {
      hmac = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hmac."0.12.1" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.6.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ring."0.16.20" = overridableMkRustCrate (profileName: rec {
    name = "ring";
    version = "0.16.20";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3053cf52e236a3ed746dfc745aa9cacf1b791d846bdaf412f60a8d7d6e17c8fc"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "dev_urandom_fallback" ]
      [ "once_cell" ]
      [ "std" ]
    ];
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "linux" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "illumos" || hostPlatform.parsed.kernel.name == "netbsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "solaris" then "once_cell" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.20.1" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" || (hostPlatform.parsed.cpu.name == "aarch64" || hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l") && (hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "fuchsia" || hostPlatform.parsed.kernel.name == "linux") then "spin" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".spin."0.5.2" { inherit profileName; }).out;
      untrusted = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".untrusted."0.7.1" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "wasm32" && hostPlatform.parsed.vendor.name == "unknown" && hostPlatform.parsed.kernel.name == "unknown" && hostPlatform.parsed.abi.name == "" then "web_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.70" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "windows" then "winapi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; }).out;
    };
    buildDependencies = {
      cc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.1.25" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ring."0.17.8" = overridableMkRustCrate (profileName: rec {
    name = "ring";
    version = "0.17.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c17fa4cb658e3583423e915b9f3acc01cceaee1860e33d59ebae66adc3a2dc0d"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "dev_urandom_fallback" ]
    ];
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      getrandom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.15" { inherit profileName; }).out;
      ${ if (hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "linux") && (hostPlatform.parsed.cpu.name == "aarch64" || hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l") then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "aarch64" || hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" then "spin" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".spin."0.9.8" { inherit profileName; }).out;
      untrusted = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".untrusted."0.9.0" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.kernel.name == "windows" then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.52.0" { inherit profileName; }).out;
    };
    buildDependencies = {
      cc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.1.25" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ripemd."0.1.3" = overridableMkRustCrate (profileName: rec {
    name = "ripemd";
    version = "0.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bd124222d17ad93a644ed9d011a40f4fb64aa54275c08cc216524a9ea82fb09f"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "oid" ]
      [ "std" ]
    ];
    dependencies = {
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rkyv."0.7.45" = overridableMkRustCrate (profileName: rec {
    name = "rkyv";
    version = "0.7.45";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9008cd6385b9e161d8229e1f6549dd23c3d022f132a2ea37ac3a10ac4935779b"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "alloc")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "hashbrown")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "size_32")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "bitvec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitvec."1.0.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "bytecheck" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytecheck."0.6.12" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "bytes" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.7.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "hashbrown" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.12.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "ptr_meta" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ptr_meta."0.1.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "rend" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rend."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "rkyv_derive" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".rkyv_derive."0.7.45" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "seahash" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".seahash."4.1.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "tinyvec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinyvec."1.8.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "uuid" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".uuid."1.10.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rkyv_derive."0.7.45" = overridableMkRustCrate (profileName: rec {
    name = "rkyv_derive";
    version = "0.7.45";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "503d1d27590a2b0a3a4ca4c94755aa2875657196ecbf401a42eff41d7de532c0"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".roaring."0.10.6" = overridableMkRustCrate (profileName: rec {
    name = "roaring";
    version = "0.10.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8f4b84ba6e838ceb47b41de5194a60244fac43d9fe03b71dbe8c5a201081d6d1"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      bytemuck = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.18.0" { inherit profileName; }).out;
      byteorder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rocksdb."0.22.0" = overridableMkRustCrate (profileName: rec {
    name = "rocksdb";
    version = "0.22.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6bd13e55d6d7b8cd0ea569161127567cd587676c99f4472f779a0279aa60a7a7"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/rocks") "bzip2")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/rocks") "default")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/rocks") "lz4")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/rocks") "multi-threaded-cf")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/rocks") "snappy")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/rocks") "zlib")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/rocks") "zstd")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/rocks" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/rocks" then "librocksdb_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".librocksdb-sys."0.16.0+8.10.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rpassword."7.3.1" = overridableMkRustCrate (profileName: rec {
    name = "rpassword";
    version = "7.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "80472be3c897911d0137b2d2b9055faf6eeac5b14e324073d83bc17b191d7e3f"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
      rtoolbox = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rtoolbox."0.0.2" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rsa."0.9.6" = overridableMkRustCrate (profileName: rec {
    name = "rsa";
    version = "0.9.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5d0e5124fcb30e76a7e79bfee683a2746db83784b86289f6251b54b7950a0dfc"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "pem" ]
      [ "std" ]
      [ "u64_digit" ]
    ];
    dependencies = {
      const_oid = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".const-oid."0.9.6" { inherit profileName; }).out;
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" { inherit profileName; }).out;
      num_bigint = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-bigint-dig."0.8.4" { inherit profileName; }).out;
      num_integer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-integer."0.1.46" { inherit profileName; }).out;
      num_traits = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.19" { inherit profileName; }).out;
      pkcs1 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pkcs1."0.7.5" { inherit profileName; }).out;
      pkcs8 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pkcs8."0.10.2" { inherit profileName; }).out;
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; }).out;
      signature = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".signature."2.2.0" { inherit profileName; }).out;
      spki = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".spki."0.7.3" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.6.1" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.8.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rtoolbox."0.0.2" = overridableMkRustCrate (profileName: rec {
    name = "rtoolbox";
    version = "0.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c247d24e63230cdb56463ae328478bd5eac8b8faa8c69461a77e8e323afac90e"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rtrb."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "rtrb";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f3f94e84c073f3b85d4012b44722fa8842b9986d741590d4f2636ad0a5b14143"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rusqlite."0.32.1" = overridableMkRustCrate (profileName: rec {
    name = "rusqlite";
    version = "0.32.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7753b721174eb8ff87a9a0e799e2d7bc3749323e773db92e0984debb00019d6e"; };
    features = builtins.concatLists [
      [ "bundled" ]
      [ "modern_sqlite" ]
    ];
    dependencies = {
      bitflags = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.6.0" { inherit profileName; }).out;
      fallible_iterator = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fallible-iterator."0.3.0" { inherit profileName; }).out;
      fallible_streaming_iterator = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fallible-streaming-iterator."0.1.9" { inherit profileName; }).out;
      hashlink = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashlink."0.9.1" { inherit profileName; }).out;
      libsqlite3_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libsqlite3-sys."0.30.1" { inherit profileName; }).out;
      smallvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.13.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rust-ini."0.21.1" = overridableMkRustCrate (profileName: rec {
    name = "rust-ini";
    version = "0.21.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4e310ef0e1b6eeb79169a1171daf9abcb87a2e17c03bee2c4bb100b55c75409f"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "cfg_if" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "ordered_multimap" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ordered-multimap."0.7.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "trim_in_place" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".trim-in-place."0.1.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rust-s3."0.35.0-alpha.2" = overridableMkRustCrate (profileName: rec {
    name = "rust-s3";
    version = "0.35.0-alpha.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ec48e3a4e58d3bc73949db3dda917e8fb0d31d635fbe496084847b8d45049787"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3") "futures")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3") "hyper")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3") "hyper-rustls")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3") "no-verify-ssl")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3") "rustls")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3") "rustls-native-certs")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3") "tokio")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3") "tokio-rustls")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3") "tokio-rustls-tls")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3") "tokio-stream")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3") "with-tokio")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "async_trait" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.83" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "awscreds" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-creds."0.37.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "awsregion" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-region."0.25.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "base64" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.22.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "bytes" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.7.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "cfg_if" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "futures" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.31" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "hex" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "hmac" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hmac."0.12.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "http" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.12" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "hyper" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper."0.14.30" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "hyper_rustls" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper-rustls."0.24.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.22" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "maybe_async" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".maybe-async."0.2.10" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "md5" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".md5."0.7.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "percent_encoding" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "quick_xml" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quick-xml."0.32.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "rustls" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.21.12" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "rustls_native_certs" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-native-certs."0.6.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "serde" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "serde_derive" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.210" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "serde_json" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.128" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "sha2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "thiserror" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.64" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "time" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".time."0.3.36" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "tokio" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "tokio_rustls" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-rustls."0.24.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "tokio_stream" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-stream."0.1.16" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "url" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.5.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rust-stemmers."1.2.0" = overridableMkRustCrate (profileName: rec {
    name = "rust-stemmers";
    version = "1.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e46a2036019fdb888131db7a4c847a1063a7493f971ed94ea82c67eada63ca54"; };
    dependencies = {
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
      serde_derive = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.210" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rust_decimal."1.36.0" = overridableMkRustCrate (profileName: rec {
    name = "rust_decimal";
    version = "1.36.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b082d80e3e3cc52b2ed634388d436fe1f4de6af5786cc2de9ba9737527bdf555"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "default")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "serde")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "arrayvec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.6" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "borsh" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".borsh."1.5.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "bytes" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.7.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "num_traits" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.19" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "rand" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "rkyv" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rkyv."0.7.45" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "serde" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "serde_json" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.128" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustc-demangle."0.1.24" = overridableMkRustCrate (profileName: rec {
    name = "rustc-demangle";
    version = "0.1.24";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "719b953e2095829ee67db738b3bfa9fa368c94900df327b3f07fe6e794d2fe1f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc-hash";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "08d43f7aa6b08d49f382cde6a7982047c3426db949b1424bc4b7ec9ae12c6ce2"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" || rootFeatures' ? "tests/mysql" || rootFeatures' ? "tests/rocks") "default")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" || rootFeatures' ? "tests/mysql" || rootFeatures' ? "tests/rocks") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustc-hash."2.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc-hash";
    version = "2.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "583034fd73374156e66797ed8e5b0d5690409c9226b22d87cb7f19821c05d152"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustc_version."0.2.3" = overridableMkRustCrate (profileName: rec {
    name = "rustc_version";
    version = "0.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "138e3e0acb6c9fb258b19b67cb8abd63c00679d2851805ea151465464fe9030a"; };
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic" then "semver" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".semver."0.9.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustc_version."0.4.1" = overridableMkRustCrate (profileName: rec {
    name = "rustc_version";
    version = "0.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cfcb3a22ef46e85b45de6ee7e79d063319ebb6594faafcf1c225ea92ab6e9b92"; };
    dependencies = {
      semver = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".semver."1.0.23" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rusticata-macros."4.1.0" = overridableMkRustCrate (profileName: rec {
    name = "rusticata-macros";
    version = "4.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "faf0c4a6ece9950b9abdb62b1cfcf2a68b3b67a10ba445b3bb85be2a293d0632"; };
    dependencies = {
      nom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".nom."7.1.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustix."0.38.37" = overridableMkRustCrate (profileName: rec {
    name = "rustix";
    version = "0.38.37";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8acb788b847c24f28525660c4d7758620a7210875711f79e7f663cc152726811"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") "alloc")
      (lib.optional (rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") "fs")
      (lib.optional (rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") "libc-extra-traits")
      (lib.optional (rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.6.0" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") && (hostPlatform.parsed.kernel.name == "linux" && hostPlatform.parsed.cpu.significantByte == "littleEndian" && (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64) || !hostPlatform.isWindows && !(hostPlatform.parsed.kernel.name == "linux" && hostPlatform.parsed.cpu.significantByte == "littleEndian" && (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64)) || hostPlatform.isWindows) then "libc_errno" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".errno."0.3.9" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") && (hostPlatform.parsed.kernel.name == "linux" && hostPlatform.parsed.cpu.significantByte == "littleEndian" && (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64) || !hostPlatform.isWindows && !(hostPlatform.parsed.kernel.name == "linux" && hostPlatform.parsed.cpu.significantByte == "littleEndian" && (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64))) then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") && (hostPlatform.parsed.kernel.name == "linux" && hostPlatform.parsed.cpu.significantByte == "littleEndian" && (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64) || (hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "linux") && !(hostPlatform.parsed.kernel.name == "linux" && hostPlatform.parsed.cpu.significantByte == "littleEndian" && (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64))) then "linux_raw_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".linux-raw-sys."0.4.14" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") && hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.52.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustls."0.21.12" = overridableMkRustCrate (profileName: rec {
    name = "rustls";
    version = "0.21.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3f56a14d1f48b391359b22f731fd4bd7e43c97f3c50eee276f3aa09c94784d3e"; };
    features = builtins.concatLists [
      [ "dangerous_configuration" ]
      [ "default" ]
      [ "log" ]
      [ "logging" ]
      [ "tls12" ]
    ];
    dependencies = {
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.22" { inherit profileName; }).out;
      ring = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.17.8" { inherit profileName; }).out;
      webpki = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-webpki."0.101.7" { inherit profileName; }).out;
      sct = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sct."0.7.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustls."0.22.4" = overridableMkRustCrate (profileName: rec {
    name = "rustls";
    version = "0.22.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bf4ef73721ac7bcd79b2b315da7779d8fc09718c6b3d2d1b2d94850eb8c18432"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "log" ]
      [ "logging" ]
      [ "ring" ]
      [ "tls12" ]
    ];
    dependencies = {
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.22" { inherit profileName; }).out;
      ring = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.17.8" { inherit profileName; }).out;
      pki_types = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pki-types."1.9.0" { inherit profileName; }).out;
      webpki = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-webpki."0.102.8" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.6.1" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.8.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustls."0.23.14" = overridableMkRustCrate (profileName: rec {
    name = "rustls";
    version = "0.23.14";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "415d9944693cb90382053259f89fbb077ea730ad7273047ec63b19bc9b160ba8"; };
    features = builtins.concatLists [
      [ "ring" ]
      [ "std" ]
      [ "tls12" ]
    ];
    dependencies = {
      once_cell = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.20.1" { inherit profileName; }).out;
      ring = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.17.8" { inherit profileName; }).out;
      pki_types = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pki-types."1.9.0" { inherit profileName; }).out;
      webpki = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-webpki."0.102.8" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.6.1" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.8.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustls-native-certs."0.6.3" = overridableMkRustCrate (profileName: rec {
    name = "rustls-native-certs";
    version = "0.6.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a9aace74cb666635c918e9c12bc0d348266037aa8eb599b5cba565709a8dff00"; };
    dependencies = {
      ${ if hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "darwin") then "openssl_probe" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".openssl-probe."0.1.5" { inherit profileName; }).out;
      rustls_pemfile = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pemfile."1.0.4" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "schannel" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".schannel."0.1.24" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "darwin" then "security_framework" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".security-framework."2.11.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustls-native-certs."0.7.3" = overridableMkRustCrate (profileName: rec {
    name = "rustls-native-certs";
    version = "0.7.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e5bfb394eeed242e909609f56089eecfe5fda225042e8b171791b9c95f5931e5"; };
    dependencies = {
      ${ if (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") && hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "darwin") then "openssl_probe" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".openssl-probe."0.1.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis" then "rustls_pemfile" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pemfile."2.2.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis" then "pki_types" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pki-types."1.9.0" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") && hostPlatform.isWindows then "schannel" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".schannel."0.1.24" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") && hostPlatform.parsed.kernel.name == "darwin" then "security_framework" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".security-framework."2.11.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustls-pemfile."1.0.4" = overridableMkRustCrate (profileName: rec {
    name = "rustls-pemfile";
    version = "1.0.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1c74cae0a4cf6ccbbf5f359f08efdf8ee7e1dc532573bf0db71968cb56b1448c"; };
    dependencies = {
      base64 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.21.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustls-pemfile."2.2.0" = overridableMkRustCrate (profileName: rec {
    name = "rustls-pemfile";
    version = "2.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dce314e5fee3f39953d46bb63bb8a46d40c2f8fb7cc5a3b6cab2bde9721d6e50"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      pki_types = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pki-types."1.9.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustls-pki-types."1.9.0" = overridableMkRustCrate (profileName: rec {
    name = "rustls-pki-types";
    version = "1.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0e696e35370c65c9c541198af4543ccd580cf17fc25d8e05c5a242b202488c55"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustls-webpki."0.101.7" = overridableMkRustCrate (profileName: rec {
    name = "rustls-webpki";
    version = "0.101.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8b6275d1ee7a1cd780b64aca7726599a1dbc893b1e64144529e55c3c2f745765"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      ring = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.17.8" { inherit profileName; }).out;
      untrusted = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".untrusted."0.9.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustls-webpki."0.102.8" = overridableMkRustCrate (profileName: rec {
    name = "rustls-webpki";
    version = "0.102.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "64ca1bc8749bd4cf37b5ce386cc146580777b4e8572c7b97baf22c83f444bee9"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "ring" ]
      [ "std" ]
    ];
    dependencies = {
      ring = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.17.8" { inherit profileName; }).out;
      pki_types = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pki-types."1.9.0" { inherit profileName; }).out;
      untrusted = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".untrusted."0.9.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustversion."1.0.17" = overridableMkRustCrate (profileName: rec {
    name = "rustversion";
    version = "1.0.17";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "955d28af4278de8121b7ebeb796b6a45735dc01436d898801014aced2773a3d6"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ryu."1.0.18" = overridableMkRustCrate (profileName: rec {
    name = "ryu";
    version = "1.0.18";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f3cb5ba0dc43242ce17de99c180e96db90b235b8a9fdc9543c96d2209116bd9f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".salsa20."0.10.2" = overridableMkRustCrate (profileName: rec {
    name = "salsa20";
    version = "0.10.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "97a22f5af31f73a954c10289c93e8a50cc23d971e80ee446f1f6f7137a088213"; };
    dependencies = {
      cipher = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cipher."0.4.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".same-file."1.0.6" = overridableMkRustCrate (profileName: rec {
    name = "same-file";
    version = "1.0.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502"; };
    dependencies = {
      ${ if hostPlatform.isWindows then "winapi_util" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-util."0.1.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".saturating."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "saturating";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ece8e78b2f38ec51c51f5d475df0a7187ba5111b2a28bdc761ee05b075d40a71"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".scc."2.2.0" = overridableMkRustCrate (profileName: rec {
    name = "scc";
    version = "2.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "836f1e0f4963ef5288b539b643b35e043e76a32d0f4e47e67febf69576527f50"; };
    dependencies = {
      sdd = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sdd."3.0.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".schannel."0.1.24" = overridableMkRustCrate (profileName: rec {
    name = "schannel";
    version = "0.1.24";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e9aaafd5a2b6e3d657ff009d82fbd630b6bd54dd4eb06f21693925cdf80f9b8b"; };
    dependencies = {
      windows_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.59.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".scheduled-thread-pool."0.2.7" = overridableMkRustCrate (profileName: rec {
    name = "scheduled-thread-pool";
    version = "0.2.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3cbc66816425a074528352f5789333ecff06ca41b36b0b0efdfbb29edc391a19"; };
    dependencies = {
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".scopeguard."1.2.0" = overridableMkRustCrate (profileName: rec {
    name = "scopeguard";
    version = "1.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".scrypt."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "scrypt";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0516a385866c09368f0b5bcd1caff3366aace790fcd46e2bb032697bb172fd1f"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "password-hash" ]
      [ "simple" ]
      [ "std" ]
    ];
    dependencies = {
      password_hash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".password-hash."0.5.0" { inherit profileName; }).out;
      pbkdf2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pbkdf2."0.12.2" { inherit profileName; }).out;
      salsa20 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".salsa20."0.10.2" { inherit profileName; }).out;
      sha2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sct."0.7.1" = overridableMkRustCrate (profileName: rec {
    name = "sct";
    version = "0.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "da046153aa2352493d6cb7da4b6e5c0c057d8a1d0a9aa8560baffdd945acd414"; };
    dependencies = {
      ring = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.17.8" { inherit profileName; }).out;
      untrusted = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".untrusted."0.9.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sdd."3.0.3" = overridableMkRustCrate (profileName: rec {
    name = "sdd";
    version = "3.0.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "60a7b59a5d9b0099720b417b6325d91a52cbf5b3dcb5041d864be53eefa58abc"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".seahash."4.1.0" = overridableMkRustCrate (profileName: rec {
    name = "seahash";
    version = "4.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1c107b6f4780854c8b126e228ea8869f4d7b71260f962fefb57b996b8959ba6b"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "default")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sec1."0.7.3" = overridableMkRustCrate (profileName: rec {
    name = "sec1";
    version = "0.7.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d3e97a565f76233a6003f9f5c54be1d9c5bdfa3eccfb189469f11ec4901c47dc"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "der" ]
      [ "pem" ]
      [ "pkcs8" ]
      [ "point" ]
      [ "std" ]
      [ "subtle" ]
      [ "zeroize" ]
    ];
    dependencies = {
      base16ct = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base16ct."0.2.0" { inherit profileName; }).out;
      der = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".der."0.7.9" { inherit profileName; }).out;
      generic_array = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" { inherit profileName; }).out;
      pkcs8 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pkcs8."0.10.2" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.6.1" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.8.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".security-framework."2.11.1" = overridableMkRustCrate (profileName: rec {
    name = "security-framework";
    version = "2.11.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "897b2245f0b511c87893af39b033e5ca9cce68824c4d7e7630b5a1d339658d02"; };
    features = builtins.concatLists [
      [ "OSX_10_10" ]
      [ "OSX_10_11" ]
      [ "OSX_10_12" ]
      [ "OSX_10_9" ]
      [ "default" ]
    ];
    dependencies = {
      bitflags = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.6.0" { inherit profileName; }).out;
      core_foundation = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.4" { inherit profileName; }).out;
      core_foundation_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.7" { inherit profileName; }).out;
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
      security_framework_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".security-framework-sys."2.12.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".security-framework-sys."2.12.0" = overridableMkRustCrate (profileName: rec {
    name = "security-framework-sys";
    version = "2.12.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ea4a292869320c0272d7bc55a5a6aafaff59b4f63404a003887b679a2e05b4b6"; };
    features = builtins.concatLists [
      [ "OSX_10_10" ]
      [ "OSX_10_11" ]
      [ "OSX_10_12" ]
      [ "OSX_10_9" ]
    ];
    dependencies = {
      core_foundation_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.7" { inherit profileName; }).out;
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".semver."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "semver";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1d7eb9ef2c18661902cc47e535f9bc51b78acd254da71d375c2f6720d9a40403"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic" then "semver_parser" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".semver-parser."0.7.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".semver."1.0.23" = overridableMkRustCrate (profileName: rec {
    name = "semver";
    version = "1.0.23";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "61697e0a1c7e512e84a621326239844a24d8207b4669b41bc18b32ea5cbf988b"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".semver-parser."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "semver-parser";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sequoia-openpgp."1.21.2" = overridableMkRustCrate (profileName: rec {
    name = "sequoia-openpgp";
    version = "1.21.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "13261ee216b44d932ef93b2d4a75d45199bef77864bcc5b77ecfc7bc0ecb02d6"; };
    features = builtins.concatLists [
      [ "allow-experimental-crypto" ]
      [ "allow-variable-time-crypto" ]
      [ "crypto-rust" ]
    ];
    dependencies = {
      aes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aes."0.8.4" { inherit profileName; }).out;
      aes_gcm = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aes-gcm."0.10.3" { inherit profileName; }).out;
      anyhow = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.89" { inherit profileName; }).out;
      base64 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.22.1" { inherit profileName; }).out;
      block_padding = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".block-padding."0.3.3" { inherit profileName; }).out;
      blowfish = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".blowfish."0.9.1" { inherit profileName; }).out;
      buffered_reader = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".buffered-reader."1.3.1" { inherit profileName; }).out;
      camellia = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".camellia."0.1.0" { inherit profileName; }).out;
      cast5 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cast5."0.11.1" { inherit profileName; }).out;
      cfb_mode = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfb-mode."0.8.2" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "wasm32" && hostPlatform.parsed.kernel.name == "unknown" then "chrono" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".chrono."0.4.38" { inherit profileName; }).out;
      cipher = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cipher."0.4.4" { inherit profileName; }).out;
      des = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".des."0.8.1" { inherit profileName; }).out;
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" { inherit profileName; }).out;
      dsa = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".dsa."0.6.3" { inherit profileName; }).out;
      dyn_clone = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".dyn-clone."1.0.17" { inherit profileName; }).out;
      eax = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".eax."0.5.0" { inherit profileName; }).out;
      ecb = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ecb."0.1.2" { inherit profileName; }).out;
      ecdsa = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ecdsa."0.16.9" { inherit profileName; }).out;
      ed25519 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ed25519."2.2.3" { inherit profileName; }).out;
      ed25519_dalek = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ed25519-dalek."2.1.1" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "wasm32" && hostPlatform.parsed.kernel.name == "unknown" then "getrandom" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.15" { inherit profileName; }).out;
      idea = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".idea."0.5.1" { inherit profileName; }).out;
      idna = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".idna."1.0.2" { inherit profileName; }).out;
      lalrpop_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lalrpop-util."0.20.2" { inherit profileName; }).out;
      lazy_static = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.5.0" { inherit profileName; }).out;
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
      md5 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".md-5."0.10.6" { inherit profileName; }).out;
      memsec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memsec."0.7.0" { inherit profileName; }).out;
      num_bigint_dig = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-bigint-dig."0.8.4" { inherit profileName; }).out;
      once_cell = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.20.1" { inherit profileName; }).out;
      p256 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".p256."0.13.2" { inherit profileName; }).out;
      p384 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".p384."0.13.0" { inherit profileName; }).out;
      p521 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".p521."0.13.3" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; }).out;
      regex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.11.0" { inherit profileName; }).out;
      regex_syntax = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.8.5" { inherit profileName; }).out;
      ripemd = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ripemd."0.1.3" { inherit profileName; }).out;
      rsa = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rsa."0.9.6" { inherit profileName; }).out;
      sha1collisiondetection = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha1collisiondetection."0.3.4" { inherit profileName; }).out;
      sha2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.64" { inherit profileName; }).out;
      twofish = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".twofish."0.7.1" { inherit profileName; }).out;
      typenum = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".typenum."1.17.0" { inherit profileName; }).out;
      x25519_dalek = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".x25519-dalek."2.0.1" { inherit profileName; }).out;
      xxhash_rust = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".xxhash-rust."0.8.12" { inherit profileName; }).out;
    };
    buildDependencies = {
      lalrpop = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".lalrpop."0.20.2" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" = overridableMkRustCrate (profileName: rec {
    name = "serde";
    version = "1.0.210";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c8e3592472072e6e22e0a54d5904d9febf8508f65fb8552499a1abc7d1078c3a"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "derive" ]
      [ "rc" ]
      [ "serde_derive" ]
      [ "std" ]
    ];
    dependencies = {
      serde_derive = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.210" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde_bytes."0.11.15" = overridableMkRustCrate (profileName: rec {
    name = "serde_bytes";
    version = "0.11.15";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "387cc504cb06bb40a96c8e04e951fe01854cf6bc921053c954e4a606d9675c6a"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") "default")
      (lib.optional (rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" then "serde" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.210" = overridableMkRustCrate (profileName: rec {
    name = "serde_derive";
    version = "1.0.210";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "243902eda00fad750862fc144cea25caca5e20d615af0a81bee94ca738f1df1f"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.128" = overridableMkRustCrate (profileName: rec {
    name = "serde_json";
    version = "1.0.128";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6ff5456707a1de34e7e37f2a6fd3d3f808c318259cbd01ab6377795054b483d8"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "indexmap" ]
      [ "preserve_order" ]
      [ "raw_value" ]
      [ "std" ]
    ];
    dependencies = {
      indexmap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."2.6.0" { inherit profileName; }).out;
      itoa = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.11" { inherit profileName; }).out;
      memchr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.4" { inherit profileName; }).out;
      ryu = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ryu."1.0.18" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde_urlencoded."0.7.1" = overridableMkRustCrate (profileName: rec {
    name = "serde_urlencoded";
    version = "0.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d3491c14715ca2294c4d6a88f15e84739788c1d030eed8c110436aafdaa2f3fd"; };
    dependencies = {
      form_urlencoded = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".form_urlencoded."1.2.1" { inherit profileName; }).out;
      itoa = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.11" { inherit profileName; }).out;
      ryu = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ryu."1.0.18" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde_with."1.14.0" = overridableMkRustCrate (profileName: rec {
    name = "serde_with";
    version = "1.14.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "678b5a069e50bf00ecd22d0cd8ddf7c236f68581b03db652061ed5eb13a312ff"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic") "default")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic") "macros")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic") "serde_with_macros")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic" then "serde" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic" then "serde_with_macros" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_with_macros."1.5.2" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde_with_macros."1.5.2" = overridableMkRustCrate (profileName: rec {
    name = "serde_with_macros";
    version = "1.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e182d6ec6f05393cc0e5ed1bf81ad6db3a8feedf8ee515ecdd369809bcce8082"; };
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic" then "darling" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".darling."0.13.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serial_test."3.1.1" = overridableMkRustCrate (profileName: rec {
    name = "serial_test";
    version = "3.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4b4b487fe2acf240a021cf57c6b2b4903b1e78ca0ecd862a71b71d2a51fed77d"; };
    features = builtins.concatLists [
      [ "async" ]
      [ "default" ]
      [ "futures" ]
      [ "log" ]
      [ "logging" ]
    ];
    dependencies = {
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.31" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.22" { inherit profileName; }).out;
      once_cell = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.20.1" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.3" { inherit profileName; }).out;
      scc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scc."2.2.0" { inherit profileName; }).out;
      serial_test_derive = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serial_test_derive."3.1.1" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serial_test_derive."3.1.1" = overridableMkRustCrate (profileName: rec {
    name = "serial_test_derive";
    version = "3.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "82fe9db325bcef1fbcde82e078a5cc4efdf787e96b3b9cf45b50b529f2083d67"; };
    features = builtins.concatLists [
      [ "async" ]
      [ "default" ]
    ];
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sha-1."0.9.8" = overridableMkRustCrate (profileName: rec {
    name = "sha-1";
    version = "0.9.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "99cd6713db3cf16b6c84e06321e049a9b9f699826e16096d23bbcc44d15d51a6"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      block_buffer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".block-buffer."0.9.0" { inherit profileName; }).out;
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "aarch64" || hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" then "cpufeatures" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.14" { inherit profileName; }).out;
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.9.0" { inherit profileName; }).out;
      opaque_debug = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".opaque-debug."0.3.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sha1."0.10.6" = overridableMkRustCrate (profileName: rec {
    name = "sha1";
    version = "0.10.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e3bf829a2d51ab4a5ddf1352d8470c140cadc8301b2ae1789db023f01cedd6ba"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "aarch64" || hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" then "cpufeatures" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.14" { inherit profileName; }).out;
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sha1_smol."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "sha1_smol";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bbfa15b3dddfee50a0fff136974b3e1bde555604ba463834a7eb7deb6417705d"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sha1collisiondetection."0.3.4" = overridableMkRustCrate (profileName: rec {
    name = "sha1collisiondetection";
    version = "0.3.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1f606421e4a6012877e893c399822a4ed4b089164c5969424e1b9d1e66e6964b"; };
    features = builtins.concatLists [
      [ "const-oid" ]
      [ "digest" ]
      [ "digest-trait" ]
      [ "oid" ]
      [ "std" ]
    ];
    dependencies = {
      const_oid = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".const-oid."0.9.6" { inherit profileName; }).out;
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" { inherit profileName; }).out;
      generic_array = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."1.1.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sha2."0.9.9" = overridableMkRustCrate (profileName: rec {
    name = "sha2";
    version = "0.9.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4d58a1e1bf39749807d89cf2d98ac2dfa0ff1cb3faa38fbb64dd88ac8013d800"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      block_buffer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".block-buffer."0.9.0" { inherit profileName; }).out;
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "aarch64" || hostPlatform.parsed.cpu.name == "x86_64" || hostPlatform.parsed.cpu.name == "i686" then "cpufeatures" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.14" { inherit profileName; }).out;
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.9.0" { inherit profileName; }).out;
      opaque_debug = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".opaque-debug."0.3.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" = overridableMkRustCrate (profileName: rec {
    name = "sha2";
    version = "0.10.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "793db75ad2bcafc3ffa7c68b215fee268f537982cd901d132f89c6343f3a3dc8"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "oid" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "aarch64" || hostPlatform.parsed.cpu.name == "x86_64" || hostPlatform.parsed.cpu.name == "i686" then "cpufeatures" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.14" { inherit profileName; }).out;
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".shlex."1.3.0" = overridableMkRustCrate (profileName: rec {
    name = "shlex";
    version = "1.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sieve-rs."0.5.2" = overridableMkRustCrate (profileName: rec {
    name = "sieve-rs";
    version = "0.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6c9e83255107db4e04a9b36cfaa7437d9d1b853de09559cb2424c754c2975eca"; };
    dependencies = {
      ahash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.8.11" { inherit profileName; }).out;
      bincode = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bincode."1.3.3" { inherit profileName; }).out;
      fancy_regex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fancy-regex."0.13.0" { inherit profileName; }).out;
      mail_builder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mail-builder."0.3.2" { inherit profileName; }).out;
      mail_parser = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mail-parser."0.9.4" { inherit profileName; }).out;
      phf = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".phf."0.11.2" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".signal-hook-registry."1.4.2" = overridableMkRustCrate (profileName: rec {
    name = "signal-hook-registry";
    version = "1.4.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a9e9e0b4211b72e7b8b6e85c807d36c212bdb33ea8587f7569562a84df5465b1"; };
    dependencies = {
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".signature."2.2.0" = overridableMkRustCrate (profileName: rec {
    name = "signature";
    version = "2.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "77549399552de45a898a580c1b41d445bf730df867cc44e6c0233bbc4b8329de"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "digest" ]
      [ "rand_core" ]
      [ "std" ]
    ];
    dependencies = {
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" { inherit profileName; }).out;
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".simd-adler32."0.3.7" = overridableMkRustCrate (profileName: rec {
    name = "simd-adler32";
    version = "0.3.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d66dc143e6b11c1eddc06d5c423cfc97062865baf299914ab64caa38182078fe"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".simdutf8."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "simdutf8";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e3a9fe34e3e7a50316060351f37187a3f546bce95496156754b601a5fa71b76e"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".siphasher."0.3.11" = overridableMkRustCrate (profileName: rec {
    name = "siphasher";
    version = "0.3.11";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "38b58827f4464d87d377d175e90bf58eb00fd8716ff0a62f80356b5e61555d0d"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".siphasher."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "siphasher";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "56199f7ddabf13fe5074ce809e7d3f42b42ae711800501b5b16ea82ad029c39d"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".slab."0.4.9" = overridableMkRustCrate (profileName: rec {
    name = "slab";
    version = "0.4.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8f92a496fb766b417c996b9c5e57daf2f7ad3b0bebe1ccfca4856390e3d3bb67"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    buildDependencies = {
      autocfg = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.4.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".smallvec."1.13.2" = overridableMkRustCrate (profileName: rec {
    name = "smallvec";
    version = "1.13.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67"; };
    features = builtins.concatLists [
      [ "const_generics" ]
      [ "const_new" ]
      [ "union" ]
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "write")
    ];
  });
  
  "unknown".smtp."0.10.4" = overridableMkRustCrate (profileName: rec {
    name = "smtp";
    version = "0.10.4";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    features = builtins.concatLists [
      [ "test_mode" ]
    ];
    dependencies = {
      ahash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.8.11" { inherit profileName; }).out;
      bincode = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bincode."1.3.3" { inherit profileName; }).out;
      blake3 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".blake3."1.5.4" { inherit profileName; }).out;
      chrono = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".chrono."0.4.38" { inherit profileName; }).out;
      common = (rustPackages."unknown".common."0.10.4" { inherit profileName; }).out;
      dashmap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".dashmap."6.1.0" { inherit profileName; }).out;
      directory = (rustPackages."unknown".directory."0.10.4" { inherit profileName; }).out;
      form_urlencoded = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".form_urlencoded."1.2.1" { inherit profileName; }).out;
      http_body_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body-util."0.1.2" { inherit profileName; }).out;
      hyper = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper."1.4.1" { inherit profileName; }).out;
      hyper_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper-util."0.1.9" { inherit profileName; }).out;
      lru_cache = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lru-cache."0.1.2" { inherit profileName; }).out;
      mail_auth = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mail-auth."0.5.0" { inherit profileName; }).out;
      mail_builder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mail-builder."0.3.2" { inherit profileName; }).out;
      mail_parser = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mail-parser."0.9.4" { inherit profileName; }).out;
      mail_send = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mail-send."0.4.9" { inherit profileName; }).out;
      md5 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".md5."0.7.0" { inherit profileName; }).out;
      nlp = (rustPackages."unknown".nlp."0.10.4" { inherit profileName; }).out;
      num_cpus = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.16.0" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.3" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      rayon = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rayon."1.10.0" { inherit profileName; }).out;
      regex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.11.0" { inherit profileName; }).out;
      reqwest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".reqwest."0.12.8" { inherit profileName; }).out;
      rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.23.14" { inherit profileName; }).out;
      rustls_pemfile = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pemfile."2.2.0" { inherit profileName; }).out;
      rustls_pki_types = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pki-types."1.9.0" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
      serde_json = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.128" { inherit profileName; }).out;
      sha1 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha1."0.10.6" { inherit profileName; }).out;
      sha2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" { inherit profileName; }).out;
      sieve = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sieve-rs."0.5.2" { inherit profileName; }).out;
      smtp_proto = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smtp-proto."0.1.5" { inherit profileName; }).out;
      store = (rustPackages."unknown".store."0.10.4" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
      tokio_rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-rustls."0.26.0" { inherit profileName; }).out;
      trc = (rustPackages."unknown".trc."0.10.4" { inherit profileName; }).out;
      utils = (rustPackages."unknown".utils."0.10.4" { inherit profileName; }).out;
      webpki_roots = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webpki-roots."0.26.6" { inherit profileName; }).out;
      x509_parser = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".x509-parser."0.16.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".smtp-proto."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "smtp-proto";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "51b8ad3dd187f0d4debab02ad65405a9919d6a4f7bce25bd64a258781063a53a"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "serde" ]
      [ "serde_support" ]
    ];
    dependencies = {
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".snafu."0.7.5" = overridableMkRustCrate (profileName: rec {
    name = "snafu";
    version = "0.7.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e4de37ad025c587a29e8f3f5605c00f70b98715ef90b9061a815b9e59e9042d6"; };
    features = builtins.concatLists [
      [ "backtrace" ]
      [ "backtraces" ]
      [ "std" ]
    ];
    dependencies = {
      backtrace = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".backtrace."0.3.74" { inherit profileName; }).out;
      doc_comment = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".doc-comment."0.3.3" { inherit profileName; }).out;
      snafu_derive = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".snafu-derive."0.7.5" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".snafu-derive."0.7.5" = overridableMkRustCrate (profileName: rec {
    name = "snafu-derive";
    version = "0.7.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "990079665f075b699031e9c08fd3ab99be5029b96f3b78dc0709e8f77e4efebf"; };
    dependencies = {
      heck = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".heck."0.4.1" { inherit profileName; }).out;
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".socket2."0.5.7" = overridableMkRustCrate (profileName: rec {
    name = "socket2";
    version = "0.5.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ce305eb0b4296696835b71df73eb912e0f1ffd2556a501fcede6e0c50349191c"; };
    features = builtins.concatLists [
      [ "all" ]
    ];
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.52.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".spin."0.5.2" = overridableMkRustCrate (profileName: rec {
    name = "spin";
    version = "0.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6e63cff320ae2c57904679ba7cb63280a3dc4613885beafb148ee7bf9aa9042d"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".spin."0.9.8" = overridableMkRustCrate (profileName: rec {
    name = "spin";
    version = "0.9.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6980e8d7511241f8acf4aebddbb1ff938df5eebe98691418c4468d0b72a96a67"; };
    features = builtins.concatLists [
      [ "once" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".spki."0.7.3" = overridableMkRustCrate (profileName: rec {
    name = "spki";
    version = "0.7.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d91ed6c858b01f942cd56b37a94b3e0a1798290327d1236e4d9cf4eaca44d29d"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "pem" ]
      [ "std" ]
    ];
    dependencies = {
      base64ct = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64ct."1.6.0" { inherit profileName; }).out;
      der = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".der."0.7.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".stable_deref_trait."1.2.0" = overridableMkRustCrate (profileName: rec {
    name = "stable_deref_trait";
    version = "1.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a8f112729512f8e442d81f95a8a7ddf2b7c6b8a1a6f509a95864142b30cab2d3"; };
    features = builtins.concatLists [
      [ "alloc" ]
    ];
  });
  
  "unknown".stalwart-cli."0.10.4" = overridableMkRustCrate (profileName: rec {
    name = "stalwart-cli";
    version = "0.10.4";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      clap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".clap."4.5.19" { inherit profileName; }).out;
      console = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".console."0.15.8" { inherit profileName; }).out;
      csv = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".csv."1.3.0" { inherit profileName; }).out;
      form_urlencoded = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".form_urlencoded."1.2.1" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.31" { inherit profileName; }).out;
      human_size = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".human-size."0.4.3" { inherit profileName; }).out;
      indicatif = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".indicatif."0.17.8" { inherit profileName; }).out;
      jmap_client = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".jmap-client."0.3.2" { inherit profileName; }).out;
      mail_auth = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mail-auth."0.5.0" { inherit profileName; }).out;
      mail_parser = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mail-parser."0.9.4" { inherit profileName; }).out;
      num_cpus = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.16.0" { inherit profileName; }).out;
      prettytable = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".prettytable-rs."0.10.0" { inherit profileName; }).out;
      pwhash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pwhash."1.0.0" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      reqwest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".reqwest."0.12.8" { inherit profileName; }).out;
      rpassword = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rpassword."7.3.1" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
      serde_json = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.128" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "static_assertions";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f"; };
  });
  
  "unknown".store."0.10.4" = overridableMkRustCrate (profileName: rec {
    name = "store";
    version = "0.10.4";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/bytes" || rootFeatures' ? "store/postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres") "bytes")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/deadpool" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") "deadpool")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres") "deadpool-postgres")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic") "elastic")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic") "elasticsearch")
      [ "enterprise" ]
      (lib.optional (rootFeatures' ? "store/fdb-chunked-bm") "fdb-chunked-bm")
      (lib.optional (rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") "foundation")
      (lib.optional (rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") "foundationdb")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/futures" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" || rootFeatures' ? "tests/mysql" || rootFeatures' ? "tests/postgres") "futures")
      [ "lru-cache" ]
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "mysql")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "mysql_async")
      [ "num_cpus" ]
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres") "postgres")
      [ "r2d2" ]
      [ "rayon" ]
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") "redis")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/ring" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres") "ring")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/rocks" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/rocks") "rocks")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/rocks") "rocksdb")
      [ "rusqlite" ]
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3") "rust-s3")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/rustls" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres") "rustls")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/rustls-pki-types" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres") "rustls-pki-types")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3") "s3")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/serde_json" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic") "serde_json")
      [ "sqlite" ]
      [ "test_mode" ]
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres") "tokio-postgres")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-rustls" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres") "tokio-rustls")
    ];
    dependencies = {
      ahash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.8.11" { inherit profileName; }).out;
      arc_swap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".arc-swap."1.7.1" { inherit profileName; }).out;
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.83" { profileName = "__noProfile"; }).out;
      bincode = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bincode."1.3.3" { inherit profileName; }).out;
      bitpacking = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitpacking."0.9.2" { inherit profileName; }).out;
      blake3 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".blake3."1.5.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/bytes" || rootFeatures' ? "store/postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" then "bytes" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.7.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/deadpool" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis" then "deadpool" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".deadpool."0.12.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" then "deadpool_postgres" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".deadpool-postgres."0.14.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic" then "elasticsearch" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".elasticsearch."8.5.0-alpha.1" { inherit profileName; }).out;
      farmhash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".farmhash."1.1.5" { inherit profileName; }).out;
      flate2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".flate2."1.0.34" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" then "foundationdb" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".foundationdb."0.9.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/futures" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" || rootFeatures' ? "tests/mysql" || rootFeatures' ? "tests/postgres" then "futures" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.31" { inherit profileName; }).out;
      lru_cache = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lru-cache."0.1.2" { inherit profileName; }).out;
      lz4_flex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lz4_flex."0.11.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "mysql_async" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mysql_async."0.34.1" { inherit profileName; }).out;
      nlp = (rustPackages."unknown".nlp."0.10.4" { inherit profileName; }).out;
      num_cpus = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.16.0" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.3" { inherit profileName; }).out;
      r2d2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".r2d2."0.8.10" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      rayon = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rayon."1.10.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/redis" || rootFeatures' ? "store/redis" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis" then "redis" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".redis."0.26.1" { inherit profileName; }).out;
      regex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.11.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/ring" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" then "ring" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.17.8" { inherit profileName; }).out;
      roaring = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".roaring."0.10.6" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/rocks" then "rocksdb" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rocksdb."0.22.0" { inherit profileName; }).out;
      rusqlite = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rusqlite."0.32.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3" then "s3" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rust-s3."0.35.0-alpha.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/rustls" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" then "rustls" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.23.14" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/rustls-pki-types" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" then "rustls_pki_types" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pki-types."1.9.0" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/serde_json" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic" then "serde_json" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.128" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" then "tokio_postgres" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-postgres."0.7.12" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-rustls" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" then "tokio_rustls" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-rustls."0.26.0" { inherit profileName; }).out;
      trc = (rustPackages."unknown".trc."0.10.4" { inherit profileName; }).out;
      utils = (rustPackages."unknown".utils."0.10.4" { inherit profileName; }).out;
      xxhash_rust = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".xxhash-rust."0.8.12" { inherit profileName; }).out;
    };
    devDependencies = {
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".string_cache."0.8.7" = overridableMkRustCrate (profileName: rec {
    name = "string_cache";
    version = "0.8.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f91138e76242f575eb1d3b38b4f1362f10d3a43f47d182a5b359af488a02293b"; };
    dependencies = {
      debug_unreachable = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".new_debug_unreachable."1.0.6" { inherit profileName; }).out;
      once_cell = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.20.1" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.3" { inherit profileName; }).out;
      phf_shared = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".phf_shared."0.10.0" { inherit profileName; }).out;
      precomputed_hash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".precomputed-hash."0.1.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".stringprep."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "stringprep";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7b4df3d392d81bd458a8a621b8bffbd2302a12ffe288a9d931670948749463b1"; };
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" then "unicode_bidi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-bidi."0.3.17" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" then "unicode_normalization" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-normalization."0.1.24" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" then "unicode_properties" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-properties."0.1.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".strsim."0.10.0" = overridableMkRustCrate (profileName: rec {
    name = "strsim";
    version = "0.10.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".strsim."0.11.1" = overridableMkRustCrate (profileName: rec {
    name = "strsim";
    version = "0.11.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7da8b5736845d9f2fcb837ea5d9e2628564b3b043a70948a3f0b778838c5fb4f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".subprocess."0.2.9" = overridableMkRustCrate (profileName: rec {
    name = "subprocess";
    version = "0.2.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0c2e86926081dda636c546d8c5e641661049d7562a68f5488be4a1f7f66f6086"; };
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") && hostPlatform.isWindows then "winapi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".subtle."2.6.1" = overridableMkRustCrate (profileName: rec {
    name = "subtle";
    version = "2.6.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "13c2bddecc57b384dee18652358fb23172facb8a2c51ccc10d74c157bdea3292"; };
    features = builtins.concatLists [
      [ "i128" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" = overridableMkRustCrate (profileName: rec {
    name = "syn";
    version = "1.0.109";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237"; };
    features = builtins.concatLists [
      [ "clone-impls" ]
      [ "default" ]
      [ "derive" ]
      [ "extra-traits" ]
      [ "full" ]
      [ "parsing" ]
      [ "printing" ]
      [ "proc-macro" ]
      [ "quote" ]
      [ "visit" ]
    ];
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      unicode_ident = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-ident."1.0.13" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" = overridableMkRustCrate (profileName: rec {
    name = "syn";
    version = "2.0.79";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "89132cd0bf050864e1d38dc3bbc07a0eb8e7530af26344d3d2bbbef83499f590"; };
    features = builtins.concatLists [
      [ "clone-impls" ]
      [ "default" ]
      [ "derive" ]
      [ "extra-traits" ]
      [ "fold" ]
      [ "full" ]
      [ "parsing" ]
      [ "printing" ]
      [ "proc-macro" ]
      [ "visit" ]
      [ "visit-mut" ]
    ];
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      unicode_ident = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-ident."1.0.13" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".syn_derive."0.1.8" = overridableMkRustCrate (profileName: rec {
    name = "syn_derive";
    version = "0.1.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1329189c02ff984e9736652b1631330da25eaa6bc639089ed4915d25446cbe7b"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "default")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "full")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "proc_macro_error" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-error."1.0.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sync_wrapper."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "sync_wrapper";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2047c6ded9c721764247e62cd3b03c09ffc529b2ba5b10ec482ae507a4a70160"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sync_wrapper."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "sync_wrapper";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a7065abeca94b6a8a577f9bd45aa0867a2238b74e8eb67cf10d492bc39351394"; };
    features = builtins.concatLists [
      [ "futures" ]
      [ "futures-core" ]
    ];
    dependencies = {
      futures_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".synstructure."0.12.6" = overridableMkRustCrate (profileName: rec {
    name = "synstructure";
    version = "0.12.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f36bdaa60a83aca3921b5259d5400cbf5e90fc51931376a9bd4a0eb79aa7210f"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "proc-macro" ]
    ];
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
      unicode_xid = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-xid."0.2.6" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".synstructure."0.13.1" = overridableMkRustCrate (profileName: rec {
    name = "synstructure";
    version = "0.13.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c8af7666ab7b6390ab78131fb5b0fce11d6b7a6951602017c35fa82800708971"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "proc-macro" ]
    ];
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".system-configuration."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "system-configuration";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ba3a3adc5c275d719af8cb4272ea1c4a6d668a777f37e115f6d11ddbc1c8e0e7"; };
    dependencies = {
      bitflags = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      core_foundation = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.4" { inherit profileName; }).out;
      system_configuration_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".system-configuration-sys."0.5.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".system-configuration-sys."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "system-configuration-sys";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a75fb188eb626b924683e3b95e3a48e63551fcfb51949de2f06a9d91dbee93c9"; };
    dependencies = {
      core_foundation_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.7" { inherit profileName; }).out;
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tap."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "tap";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "55937e1799185b12863d447f42597ed69d9928686b8d88a1df17376a097d8369"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".term."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "term";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c59df8ac95d96ff9bede18eb7300b0fda5e5d8d90960e76f8e14ae765eedbf1f"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      dirs_next = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".dirs-next."2.0.0" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "rustversion" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".rustversion."1.0.17" { profileName = "__noProfile"; }).out;
      ${ if hostPlatform.isWindows then "winapi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".termcolor."1.4.1" = overridableMkRustCrate (profileName: rec {
    name = "termcolor";
    version = "1.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "06794f8f6c5c898b3275aebefa6b8a1cb24cd2c6c79397ab15774837a0bc5755"; };
    dependencies = {
      ${ if (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") && hostPlatform.isWindows then "winapi_util" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-util."0.1.9" { inherit profileName; }).out;
    };
  });
  
  "unknown".tests."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "tests";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "tests/default") "default")
      (lib.optional (rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic") "elastic")
      (lib.optional (rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") "foundationdb")
      (lib.optional (rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "mysql")
      (lib.optional (rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres") "postgres")
      (lib.optional (rootFeatures' ? "tests/default" || rootFeatures' ? "tests/redis") "redis")
      (lib.optional (rootFeatures' ? "tests/default" || rootFeatures' ? "tests/rocks") "rocks")
      (lib.optional (rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3") "s3")
      (lib.optional (rootFeatures' ? "tests/default" || rootFeatures' ? "tests/sqlite") "sqlite")
    ];
    dependencies = {
      ${ if !(hostPlatform.parsed.abi.name == "msvc") then "jemallocator" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".jemallocator."0.5.4" { inherit profileName; }).out;
    };
    devDependencies = {
      ahash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.8.11" { inherit profileName; }).out;
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.83" { profileName = "__noProfile"; }).out;
      base64 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.22.1" { inherit profileName; }).out;
      biscuit = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".biscuit."0.7.0" { inherit profileName; }).out;
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.7.2" { inherit profileName; }).out;
      chrono = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".chrono."0.4.38" { inherit profileName; }).out;
      common = (rustPackages."unknown".common."0.10.4" { inherit profileName; }).out;
      csv = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".csv."1.3.0" { inherit profileName; }).out;
      dashmap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".dashmap."6.1.0" { inherit profileName; }).out;
      directory = (rustPackages."unknown".directory."0.10.4" { inherit profileName; }).out;
      ece = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ece."2.3.1" { inherit profileName; }).out;
      flate2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".flate2."1.0.34" { inherit profileName; }).out;
      form_urlencoded = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".form_urlencoded."1.2.1" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.31" { inherit profileName; }).out;
      http_body_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body-util."0.1.2" { inherit profileName; }).out;
      hyper = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper."1.4.1" { inherit profileName; }).out;
      hyper_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper-util."0.1.9" { inherit profileName; }).out;
      imap = (rustPackages."unknown".imap."0.10.4" { inherit profileName; }).out;
      imap_proto = (rustPackages."unknown".imap_proto."0.1.0" { inherit profileName; }).out;
      jmap = (rustPackages."unknown".jmap."0.10.4" { inherit profileName; }).out;
      jmap_client = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".jmap-client."0.3.2" { inherit profileName; }).out;
      jmap_proto = (rustPackages."unknown".jmap_proto."0.10.4" { inherit profileName; }).out;
      mail_auth = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mail-auth."0.5.0" { inherit profileName; }).out;
      mail_parser = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mail-parser."0.9.4" { inherit profileName; }).out;
      mail_send = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mail-send."0.4.9" { inherit profileName; }).out;
      managesieve = (rustPackages."unknown".managesieve."0.10.4" { inherit profileName; }).out;
      nlp = (rustPackages."unknown".nlp."0.10.4" { inherit profileName; }).out;
      num_cpus = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.16.0" { inherit profileName; }).out;
      pop3 = (rustPackages."unknown".pop3."0.10.4" { inherit profileName; }).out;
      rayon = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rayon."1.10.0" { inherit profileName; }).out;
      reqwest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".reqwest."0.12.8" { inherit profileName; }).out;
      ring = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.17.8" { inherit profileName; }).out;
      rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.23.14" { inherit profileName; }).out;
      rustls_pemfile = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pemfile."2.2.0" { inherit profileName; }).out;
      rustls_pki_types = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pki-types."1.9.0" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
      serde_json = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.128" { inherit profileName; }).out;
      serial_test = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serial_test."3.1.1" { inherit profileName; }).out;
      sieve = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sieve-rs."0.5.2" { inherit profileName; }).out;
      smtp = (rustPackages."unknown".smtp."0.10.4" { inherit profileName; }).out;
      smtp_proto = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smtp-proto."0.1.5" { inherit profileName; }).out;
      store = (rustPackages."unknown".store."0.10.4" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
      tokio_rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-rustls."0.26.0" { inherit profileName; }).out;
      trc = (rustPackages."unknown".trc."0.10.4" { inherit profileName; }).out;
      utils = (rustPackages."unknown".utils."0.10.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.64" = overridableMkRustCrate (profileName: rec {
    name = "thiserror";
    version = "1.0.64";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d50af8abc119fb8bb6dbabcfa89656f46f84aa0ac7688088608076ad2b459a84"; };
    dependencies = {
      thiserror_impl = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror-impl."1.0.64" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".thiserror-impl."1.0.64" = overridableMkRustCrate (profileName: rec {
    name = "thiserror-impl";
    version = "1.0.64";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "08904e7672f5eb876eaaf87e0ce17857500934f4981c4a0ab2b4aa98baac7fc3"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".time."0.3.36" = overridableMkRustCrate (profileName: rec {
    name = "time";
    version = "0.3.36";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5dfd88e563464686c916c7e46e623e520ddc6d79fa6641390f2e3fa86e83e885"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "formatting" ]
      [ "macros" ]
      [ "parsing" ]
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3") "serde")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3") "serde-well-known")
      [ "std" ]
    ];
    dependencies = {
      deranged = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".deranged."0.3.11" { inherit profileName; }).out;
      itoa = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.11" { inherit profileName; }).out;
      num_conv = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-conv."0.1.0" { inherit profileName; }).out;
      powerfmt = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".powerfmt."0.2.0" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
      time_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".time-core."0.1.2" { inherit profileName; }).out;
      time_macros = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".time-macros."0.2.18" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".time-core."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "time-core";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ef927ca75afb808a4d64dd374f00a2adf8d0fcff8e7b184af886c3c87ec4a3f3"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".time-macros."0.2.18" = overridableMkRustCrate (profileName: rec {
    name = "time-macros";
    version = "0.2.18";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3f252a68540fde3a3877aeea552b832b40ab9a69e318efd078774a01ddee1ccf"; };
    features = builtins.concatLists [
      [ "formatting" ]
      [ "parsing" ]
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3") "serde")
    ];
    dependencies = {
      num_conv = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-conv."0.1.0" { inherit profileName; }).out;
      time_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".time-core."0.1.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tiny-keccak."2.0.2" = overridableMkRustCrate (profileName: rec {
    name = "tiny-keccak";
    version = "2.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2c9d3793400a45f954c52e73d068316d76b6f4e36977e3fcebb13a2721e80237"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "sha3" ]
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/s3") "shake")
    ];
    dependencies = {
      crunchy = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crunchy."0.2.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tinysegmenter."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "tinysegmenter";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1755695d17d470baf2d937a59ab4e86de3034b056fc8700e21411b0efca36497"; };
    dependencies = {
      lazy_static = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.5.0" { inherit profileName; }).out;
      maplit = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".maplit."1.0.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tinystr."0.7.6" = overridableMkRustCrate (profileName: rec {
    name = "tinystr";
    version = "0.7.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9117f5d4db391c1cf6927e7bea3db74b9a1c1add8f7eda9ffd5364f40f57b82f"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "zerovec" ]
    ];
    dependencies = {
      displaydoc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".displaydoc."0.2.5" { profileName = "__noProfile"; }).out;
      zerovec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zerovec."0.10.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tinyvec."1.8.0" = overridableMkRustCrate (profileName: rec {
    name = "tinyvec";
    version = "1.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "445e881f4f6d382d5f27c034e25eb92edd7c784ceab92a0937db7f2e9471b938"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "tinyvec_macros" ]
    ];
    dependencies = {
      tinyvec_macros = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinyvec_macros."0.1.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tinyvec_macros."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "tinyvec_macros";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1f3ccbac311fea05f86f61904b462b55fb3df8837a366dfc601a0161d0532f20"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" = overridableMkRustCrate (profileName: rec {
    name = "tokio";
    version = "1.38.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "eb2caba9f80616f438e09748d5acda951967e1ea58508ef53d9c6402485a46df"; };
    features = builtins.concatLists [
      [ "bytes" ]
      [ "default" ]
      [ "fs" ]
      [ "full" ]
      [ "io-std" ]
      [ "io-util" ]
      [ "libc" ]
      [ "macros" ]
      [ "mio" ]
      [ "net" ]
      [ "num_cpus" ]
      [ "parking_lot" ]
      [ "process" ]
      [ "rt" ]
      [ "rt-multi-thread" ]
      [ "signal" ]
      [ "signal-hook-registry" ]
      [ "socket2" ]
      [ "sync" ]
      [ "time" ]
      [ "tokio-macros" ]
      [ "windows-sys" ]
    ];
    dependencies = {
      ${ if false then "backtrace" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".backtrace."0.3.74" { inherit profileName; }).out;
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.7.2" { inherit profileName; }).out;
      ${ if hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.159" { inherit profileName; }).out;
      mio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mio."0.8.11" { inherit profileName; }).out;
      num_cpus = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.16.0" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.3" { inherit profileName; }).out;
      pin_project_lite = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.14" { inherit profileName; }).out;
      ${ if hostPlatform.isUnix then "signal_hook_registry" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".signal-hook-registry."1.4.2" { inherit profileName; }).out;
      socket2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".socket2."0.5.7" { inherit profileName; }).out;
      tokio_macros = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-macros."2.3.0" { profileName = "__noProfile"; }).out;
      ${ if hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tokio-macros."2.3.0" = overridableMkRustCrate (profileName: rec {
    name = "tokio-macros";
    version = "2.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5f5ae998a069d4b5aba8ee9dad856af7d520c3699e6159b185c2acd48155d39a"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tokio-postgres."0.7.12" = overridableMkRustCrate (profileName: rec {
    name = "tokio-postgres";
    version = "0.7.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3b5d3742945bc7d7f210693b0c58ae542c6fd47b17adbbda0885f3dcb34a6bdb"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres") "default")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres") "runtime")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" then "async_trait" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.83" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" then "byteorder" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" then "bytes" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.7.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" then "fallible_iterator" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fallible-iterator."0.2.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" then "futures_channel" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.31" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" then "futures_util" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.22" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" then "parking_lot" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" then "percent_encoding" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" then "phf" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".phf."0.11.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" then "pin_project_lite" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.14" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" then "postgres_protocol" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".postgres-protocol."0.6.7" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" then "postgres_types" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".postgres-types."0.2.8" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" then "rand" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres") && !(hostPlatform.parsed.cpu.name == "wasm32") then "socket2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".socket2."0.5.7" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" then "tokio" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" then "tokio_util" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-util."0.7.12" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres" then "whoami" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".whoami."1.5.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tokio-rustls."0.24.1" = overridableMkRustCrate (profileName: rec {
    name = "tokio-rustls";
    version = "0.24.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c28327cf380ac148141087fbfb9de9d7bd4e84ab5d2c28fbc911d753de8a7081"; };
    features = builtins.concatLists [
      [ "dangerous_configuration" ]
      [ "default" ]
      [ "early-data" ]
      [ "logging" ]
      [ "tls12" ]
    ];
    dependencies = {
      rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.21.12" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tokio-rustls."0.25.0" = overridableMkRustCrate (profileName: rec {
    name = "tokio-rustls";
    version = "0.25.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "775e0c0f0adb3a2f22a00c4745d728b479985fc15ee7ca6a2608388c5569860f"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "logging" ]
      [ "ring" ]
      [ "tls12" ]
    ];
    dependencies = {
      rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.22.4" { inherit profileName; }).out;
      pki_types = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pki-types."1.9.0" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tokio-rustls."0.26.0" = overridableMkRustCrate (profileName: rec {
    name = "tokio-rustls";
    version = "0.26.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0c7bc40d0e5a97695bb96e27995cd3a08538541b0a846f65bba7a359f36700d4"; };
    features = builtins.concatLists [
      [ "ring" ]
      [ "tls12" ]
    ];
    dependencies = {
      rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.23.14" { inherit profileName; }).out;
      pki_types = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pki-types."1.9.0" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tokio-stream."0.1.16" = overridableMkRustCrate (profileName: rec {
    name = "tokio-stream";
    version = "0.1.16";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4f4e6ce100d0eb49a2734f8c0812bcd324cf357d21810932c5df6b96ef2b86f1"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "net" ]
      [ "time" ]
    ];
    dependencies = {
      futures_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" { inherit profileName; }).out;
      pin_project_lite = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.14" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tokio-tungstenite."0.21.0" = overridableMkRustCrate (profileName: rec {
    name = "tokio-tungstenite";
    version = "0.21.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c83b561d025642014097b66e6c1bb422783339e0909e4429cde4749d1990bc38"; };
    features = builtins.concatLists [
      [ "__rustls-tls" ]
      [ "connect" ]
      [ "default" ]
      [ "handshake" ]
      [ "rustls" ]
      [ "rustls-pki-types" ]
      [ "rustls-tls-webpki-roots" ]
      [ "stream" ]
      [ "tokio-rustls" ]
      [ "webpki-roots" ]
    ];
    dependencies = {
      futures_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.22" { inherit profileName; }).out;
      rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.22.4" { inherit profileName; }).out;
      rustls_pki_types = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pki-types."1.9.0" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
      tokio_rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-rustls."0.25.0" { inherit profileName; }).out;
      tungstenite = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tungstenite."0.21.0" { inherit profileName; }).out;
      webpki_roots = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webpki-roots."0.26.6" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tokio-tungstenite."0.24.0" = overridableMkRustCrate (profileName: rec {
    name = "tokio-tungstenite";
    version = "0.24.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "edc5f74e248dc973e0dbb7b74c7e0d6fcc301c694ff50049504004ef4d0cdcd9"; };
    features = builtins.concatLists [
      [ "connect" ]
      [ "default" ]
      [ "handshake" ]
      [ "stream" ]
    ];
    dependencies = {
      futures_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.22" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
      tungstenite = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tungstenite."0.24.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tokio-util."0.7.12" = overridableMkRustCrate (profileName: rec {
    name = "tokio-util";
    version = "0.7.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "61e7c3654c13bcd040d4a03abee2c75b1d14a37b423cf5a813ceae1cc903ec6a"; };
    features = builtins.concatLists [
      [ "codec" ]
      [ "default" ]
      [ "io" ]
    ];
    dependencies = {
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.7.2" { inherit profileName; }).out;
      futures_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" { inherit profileName; }).out;
      futures_sink = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.31" { inherit profileName; }).out;
      pin_project_lite = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.14" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".toml_datetime."0.6.8" = overridableMkRustCrate (profileName: rec {
    name = "toml_datetime";
    version = "0.6.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0dd7358ecb8fc2f8d014bf86f6f638ce72ba252a2c3a2572f2a795f1d23efb41"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".toml_edit."0.22.22" = overridableMkRustCrate (profileName: rec {
    name = "toml_edit";
    version = "0.22.22";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4ae48d6208a266e853d946088ed816055e556cc6028c5e8e2b84d9fa5dd7c7f5"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "default")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "display")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "parse")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "indexmap" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."2.6.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "toml_datetime" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml_datetime."0.6.8" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "winnow" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winnow."0.6.20" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tonic."0.12.3" = overridableMkRustCrate (profileName: rec {
    name = "tonic";
    version = "0.12.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "877c5b330756d856ffcc4553ab34a5684481ade925ecc54bcd1bf02b1d0d4d52"; };
    features = builtins.concatLists [
      [ "channel" ]
      [ "codegen" ]
      [ "prost" ]
      [ "router" ]
      [ "server" ]
      [ "transport" ]
    ];
    dependencies = {
      async_stream = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-stream."0.3.6" { inherit profileName; }).out;
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.83" { profileName = "__noProfile"; }).out;
      axum = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".axum."0.7.7" { inherit profileName; }).out;
      base64 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.22.1" { inherit profileName; }).out;
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.7.2" { inherit profileName; }).out;
      h2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".h2."0.4.6" { inherit profileName; }).out;
      http = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."1.1.0" { inherit profileName; }).out;
      http_body = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body."1.0.1" { inherit profileName; }).out;
      http_body_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body-util."0.1.2" { inherit profileName; }).out;
      hyper = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper."1.4.1" { inherit profileName; }).out;
      hyper_timeout = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper-timeout."0.5.1" { inherit profileName; }).out;
      hyper_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper-util."0.1.9" { inherit profileName; }).out;
      percent_encoding = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.1" { inherit profileName; }).out;
      pin_project = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."1.1.5" { inherit profileName; }).out;
      prost = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".prost."0.13.3" { inherit profileName; }).out;
      socket2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".socket2."0.5.7" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
      tokio_stream = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-stream."0.1.16" { inherit profileName; }).out;
      tower = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower."0.4.13" { inherit profileName; }).out;
      tower_layer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-layer."0.3.3" { inherit profileName; }).out;
      tower_service = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-service."0.3.3" { inherit profileName; }).out;
      tracing = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".totp-rs."5.6.0" = overridableMkRustCrate (profileName: rec {
    name = "totp-rs";
    version = "5.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "17b2f27dad992486c26b4e7455f38aa487e838d6d61b57e72906ee2b8c287a90"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "otpauth" ]
      [ "url" ]
      [ "urlencoding" ]
    ];
    dependencies = {
      base32 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base32."0.4.0" { inherit profileName; }).out;
      constant_time_eq = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".constant_time_eq."0.2.6" { inherit profileName; }).out;
      hmac = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hmac."0.12.1" { inherit profileName; }).out;
      sha1 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha1."0.10.6" { inherit profileName; }).out;
      sha2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" { inherit profileName; }).out;
      url = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.5.2" { inherit profileName; }).out;
      urlencoding = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".urlencoding."2.1.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tower."0.4.13" = overridableMkRustCrate (profileName: rec {
    name = "tower";
    version = "0.4.13";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b8fa9be0de6cf49e536ce1851f987bd21a43b771b09473c3549a6c853db37c1c"; };
    features = builtins.concatLists [
      [ "__common" ]
      [ "balance" ]
      [ "buffer" ]
      [ "discover" ]
      [ "futures-core" ]
      [ "futures-util" ]
      [ "indexmap" ]
      [ "limit" ]
      [ "load" ]
      [ "make" ]
      [ "pin-project" ]
      [ "pin-project-lite" ]
      [ "rand" ]
      [ "ready-cache" ]
      [ "slab" ]
      [ "tokio" ]
      [ "tokio-util" ]
      [ "tracing" ]
      [ "util" ]
    ];
    dependencies = {
      futures_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" { inherit profileName; }).out;
      futures_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" { inherit profileName; }).out;
      indexmap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.9.3" { inherit profileName; }).out;
      pin_project = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."1.1.5" { inherit profileName; }).out;
      pin_project_lite = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.14" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      slab = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.9" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
      tokio_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-util."0.7.12" { inherit profileName; }).out;
      tower_layer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-layer."0.3.3" { inherit profileName; }).out;
      tower_service = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-service."0.3.3" { inherit profileName; }).out;
      tracing = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tower."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "tower";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2873938d487c3cfb9aed7546dc9f2711d867c9f90c46b889989a2cb84eba6b4f"; };
    features = builtins.concatLists [
      [ "__common" ]
      [ "futures-core" ]
      [ "futures-util" ]
      [ "pin-project-lite" ]
      [ "sync_wrapper" ]
      [ "util" ]
    ];
    dependencies = {
      futures_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" { inherit profileName; }).out;
      futures_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" { inherit profileName; }).out;
      pin_project_lite = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.14" { inherit profileName; }).out;
      sync_wrapper = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sync_wrapper."0.1.2" { inherit profileName; }).out;
      tower_layer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-layer."0.3.3" { inherit profileName; }).out;
      tower_service = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-service."0.3.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tower-layer."0.3.3" = overridableMkRustCrate (profileName: rec {
    name = "tower-layer";
    version = "0.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "121c2a6cda46980bb0fcd1647ffaf6cd3fc79a013de288782836f6df9c48780e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tower-service."0.3.3" = overridableMkRustCrate (profileName: rec {
    name = "tower-service";
    version = "0.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8df9b6e13f2d32c91b9bd719c00d1958837bc7dec474d94952798cc8e69eeec3"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" = overridableMkRustCrate (profileName: rec {
    name = "tracing";
    version = "0.1.40";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c3523ab5a71916ccf420eebdf5521fcef02141234bbc0b8a49f2fdc4544364ef"; };
    features = builtins.concatLists [
      [ "attributes" ]
      [ "default" ]
      [ "std" ]
      [ "tracing-attributes" ]
    ];
    dependencies = {
      pin_project_lite = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.14" { inherit profileName; }).out;
      tracing_attributes = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-attributes."0.1.27" { profileName = "__noProfile"; }).out;
      tracing_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.32" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing-attributes."0.1.27" = overridableMkRustCrate (profileName: rec {
    name = "tracing-attributes";
    version = "0.1.27";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "34704c8d6ebcbc939824180af020566b01a7c01f80641264eba0999f6c2b6be7"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.32" = overridableMkRustCrate (profileName: rec {
    name = "tracing-core";
    version = "0.1.32";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c06d3da6113f116aaee68e4d601191614c9053067f9ab7f6edbcb161237daa54"; };
    features = builtins.concatLists [
      [ "once_cell" ]
      [ "std" ]
    ];
    dependencies = {
      once_cell = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.20.1" { inherit profileName; }).out;
    };
  });
  
  "unknown".trc."0.10.4" = overridableMkRustCrate (profileName: rec {
    name = "trc";
    version = "0.10.4";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "trc/test_mode") "test_mode")
    ];
    dependencies = {
      ahash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.8.11" { inherit profileName; }).out;
      base64 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.22.1" { inherit profileName; }).out;
      bincode = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bincode."1.3.3" { inherit profileName; }).out;
      event_macro = (buildRustPackages."unknown".event_macro."0.1.0" { profileName = "__noProfile"; }).out;
      mail_auth = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mail-auth."0.5.0" { inherit profileName; }).out;
      mail_parser = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mail-parser."0.9.4" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.3" { inherit profileName; }).out;
      reqwest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".reqwest."0.12.8" { inherit profileName; }).out;
      rtrb = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rtrb."0.3.1" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
      serde_json = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.128" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".trim-in-place."0.1.7" = overridableMkRustCrate (profileName: rec {
    name = "trim-in-place";
    version = "0.1.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "343e926fc669bc8cde4fa3129ab681c63671bae288b1f1081ceee6d9d37904fc"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".try-lock."0.2.5" = overridableMkRustCrate (profileName: rec {
    name = "try-lock";
    version = "0.2.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e421abadd41a4225275504ea4d6566923418b7f05506fbc9c0fe86ba7396114b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".try_map."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "try_map";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fb1626d07cb5c1bb2cf17d94c0be4852e8a7c02b041acec9a8c5bdda99f9d580"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tungstenite."0.21.0" = overridableMkRustCrate (profileName: rec {
    name = "tungstenite";
    version = "0.21.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9ef1a641ea34f399a848dea702823bbecfb4c486f911735368f1f137cb8257e1"; };
    features = builtins.concatLists [
      [ "__rustls-tls" ]
      [ "data-encoding" ]
      [ "handshake" ]
      [ "http" ]
      [ "httparse" ]
      [ "rustls" ]
      [ "rustls-pki-types" ]
      [ "sha1" ]
      [ "url" ]
    ];
    dependencies = {
      byteorder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" { inherit profileName; }).out;
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.7.2" { inherit profileName; }).out;
      data_encoding = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".data-encoding."2.6.0" { inherit profileName; }).out;
      http = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."1.1.0" { inherit profileName; }).out;
      httparse = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".httparse."1.9.5" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.22" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.22.4" { inherit profileName; }).out;
      rustls_pki_types = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pki-types."1.9.0" { inherit profileName; }).out;
      sha1 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha1."0.10.6" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.64" { inherit profileName; }).out;
      url = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.5.2" { inherit profileName; }).out;
      utf8 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".utf-8."0.7.6" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tungstenite."0.24.0" = overridableMkRustCrate (profileName: rec {
    name = "tungstenite";
    version = "0.24.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "18e5b8366ee7a95b16d32197d0b2604b43a0be89dc5fac9f8e96ccafbaedda8a"; };
    features = builtins.concatLists [
      [ "data-encoding" ]
      [ "default" ]
      [ "handshake" ]
      [ "http" ]
      [ "httparse" ]
      [ "sha1" ]
    ];
    dependencies = {
      byteorder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" { inherit profileName; }).out;
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.7.2" { inherit profileName; }).out;
      data_encoding = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".data-encoding."2.6.0" { inherit profileName; }).out;
      http = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."1.1.0" { inherit profileName; }).out;
      httparse = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".httparse."1.9.5" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.22" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      sha1 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha1."0.10.6" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.64" { inherit profileName; }).out;
      utf8 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".utf-8."0.7.6" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".twofish."0.7.1" = overridableMkRustCrate (profileName: rec {
    name = "twofish";
    version = "0.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a78e83a30223c757c3947cd144a31014ff04298d8719ae10d03c31c0448c8013"; };
    features = builtins.concatLists [
      [ "zeroize" ]
    ];
    dependencies = {
      cipher = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cipher."0.4.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".twox-hash."1.6.3" = overridableMkRustCrate (profileName: rec {
    name = "twox-hash";
    version = "1.6.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "97fee6b57c6a41524a810daee9286c02d7752c4253064d0b05472833a438f675"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "default")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "rand")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "cfg_if" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "rand" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "static_assertions" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".typenum."1.17.0" = overridableMkRustCrate (profileName: rec {
    name = "typenum";
    version = "1.17.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "42ff0bf0c66b8238c6f3b578df37d0b7848e55df8577b3f74f92a69acceeb825"; };
    features = builtins.concatLists [
      [ "const-generics" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".typewit."1.9.0" = overridableMkRustCrate (profileName: rec {
    name = "typewit";
    version = "1.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c6fb9ae6a3cafaf0a5d14c2302ca525f9ae8e07a0f0e6949de88d882c37a6e24"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "proc_macros" ]
      [ "rust_1_61" ]
      [ "typewit_proc_macros" ]
    ];
    dependencies = {
      typewit_proc_macros = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".typewit_proc_macros."1.8.1" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".typewit_proc_macros."1.8.1" = overridableMkRustCrate (profileName: rec {
    name = "typewit_proc_macros";
    version = "1.8.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e36a83ea2b3c704935a01b4642946aadd445cea40b10935e3f8bd8052b8193d6"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicase."2.7.0" = overridableMkRustCrate (profileName: rec {
    name = "unicase";
    version = "2.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f7d2d4dafb69621809a81864c9c1b864479e1235c0dd4e199924b9742439ed89"; };
    buildDependencies = {
      version_check = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.5" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-bidi."0.3.17" = overridableMkRustCrate (profileName: rec {
    name = "unicode-bidi";
    version = "0.3.17";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5ab17db44d7388991a428b2ee655ce0c212e862eff1768a455c58f9aad6e7893"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres") "default")
      [ "hardcoded-data" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-ident."1.0.13" = overridableMkRustCrate (profileName: rec {
    name = "unicode-ident";
    version = "1.0.13";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e91b56cd4cadaeb79bbf1a5645f6b4f8dc5bde8834ad5894a8db35fda9efa1fe"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-normalization."0.1.24" = overridableMkRustCrate (profileName: rec {
    name = "unicode-normalization";
    version = "0.1.24";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5033c97c4262335cded6d6fc3e5c18ab755e1a3dc96376350f3d8e9f009ad956"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres") "default")
      [ "std" ]
    ];
    dependencies = {
      tinyvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinyvec."1.8.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-properties."0.1.3" = overridableMkRustCrate (profileName: rec {
    name = "unicode-properties";
    version = "0.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e70f2a8b45122e719eb623c01822704c4e0907e7e426a05927e1a1cfff5b75d0"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres") "default")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres") "emoji")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres") "general-category")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-script."0.5.7" = overridableMkRustCrate (profileName: rec {
    name = "unicode-script";
    version = "0.5.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9fb421b350c9aff471779e262955939f565ec18b86c15364e6bdf0d662ca7c1f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-security."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "unicode-security";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2e4ddba1535dd35ed8b61c52166b7155d7f4e4b8847cec6f48e71dc66d8b5e50"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      unicode_normalization = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-normalization."0.1.24" { inherit profileName; }).out;
      unicode_script = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-script."0.5.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-width."0.1.14" = overridableMkRustCrate (profileName: rec {
    name = "unicode-width";
    version = "0.1.14";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7dd6e30e90baa6f72411720665d41d89b9a3d039dc45b8faea1ddd07f617f6af"; };
    features = builtins.concatLists [
      [ "cjk" ]
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-xid."0.2.6" = overridableMkRustCrate (profileName: rec {
    name = "unicode-xid";
    version = "0.2.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ebc1c04c71510c7f702b52b7c350734c9ff1295c464a03335b00bb84fc54f853"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".universal-hash."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "universal-hash";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fc1de2c688dc15305988b563c3854064043356019f97a4b46276fe734c4f07ea"; };
    dependencies = {
      crypto_common = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crypto-common."0.1.6" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.6.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".untrusted."0.7.1" = overridableMkRustCrate (profileName: rec {
    name = "untrusted";
    version = "0.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a156c684c91ea7d62626509bce3cb4e1d9ed5c4d978f7b4352658f96a4c26b4a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".untrusted."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "untrusted";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8ecb6da28b8a351d773b68d5825ac39017e680750f980f3a1a85cd8dd28a47c1"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".url."2.5.2" = overridableMkRustCrate (profileName: rec {
    name = "url";
    version = "2.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "22784dbdf76fdde8af1aeda5622b546b422b6fc585325248a2bf9f5e41e94d6c"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      form_urlencoded = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".form_urlencoded."1.2.1" { inherit profileName; }).out;
      idna = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".idna."0.5.0" { inherit profileName; }).out;
      percent_encoding = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".urlencoding."2.1.3" = overridableMkRustCrate (profileName: rec {
    name = "urlencoding";
    version = "2.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "daf8dba3b7eb870caf1ddeed7bc9d2a049f3cfdfae7cb521b087cc33ae4c49da"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".utf-8."0.7.6" = overridableMkRustCrate (profileName: rec {
    name = "utf-8";
    version = "0.7.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "09cc8ee72d2a9becf2f2febe0205bbed8fc6615b7cb429ad062dc7b7ddd036a9"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".utf16_iter."1.0.5" = overridableMkRustCrate (profileName: rec {
    name = "utf16_iter";
    version = "1.0.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c8232dd3cdaed5356e0f716d285e4b40b932ac434100fe9b7e0e8e935b9e6246"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".utf8_iter."1.0.4" = overridableMkRustCrate (profileName: rec {
    name = "utf8_iter";
    version = "1.0.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b6c140620e7ffbb22c2dee59cafe6084a59b5ffc27a8859a5f0d494b5d52b6be"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".utf8parse."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "utf8parse";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "06abde3611657adf66d383f00b093d7faecc7fa57071cce2578660c9f1010821"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "unknown".utils."0.10.4" = overridableMkRustCrate (profileName: rec {
    name = "utils";
    version = "0.10.4";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    features = builtins.concatLists [
      [ "test_mode" ]
    ];
    dependencies = {
      ahash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.8.11" { inherit profileName; }).out;
      base64 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.22.1" { inherit profileName; }).out;
      blake3 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".blake3."1.5.4" { inherit profileName; }).out;
      chrono = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".chrono."0.4.38" { inherit profileName; }).out;
      dashmap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".dashmap."6.1.0" { inherit profileName; }).out;
      form_urlencoded = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".form_urlencoded."1.2.1" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.31" { inherit profileName; }).out;
      http_body_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body-util."0.1.2" { inherit profileName; }).out;
      lru_cache = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lru-cache."0.1.2" { inherit profileName; }).out;
      mail_auth = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mail-auth."0.5.0" { inherit profileName; }).out;
      mail_send = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mail-send."0.4.9" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.3" { inherit profileName; }).out;
      pem = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pem."3.0.4" { inherit profileName; }).out;
      ${ if hostPlatform.isUnix then "privdrop" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".privdrop."0.5.4" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      rcgen = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rcgen."0.13.1" { inherit profileName; }).out;
      regex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.11.0" { inherit profileName; }).out;
      reqwest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".reqwest."0.12.8" { inherit profileName; }).out;
      ring = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.17.8" { inherit profileName; }).out;
      rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.23.14" { inherit profileName; }).out;
      rustls_pemfile = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pemfile."2.2.0" { inherit profileName; }).out;
      rustls_pki_types = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pki-types."1.9.0" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
      serde_json = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.128" { inherit profileName; }).out;
      smtp_proto = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smtp-proto."0.1.5" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
      tokio_rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-rustls."0.26.0" { inherit profileName; }).out;
      trc = (rustPackages."unknown".trc."0.10.4" { inherit profileName; }).out;
      webpki_roots = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webpki-roots."0.26.6" { inherit profileName; }).out;
      x509_parser = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".x509-parser."0.16.0" { inherit profileName; }).out;
    };
    devDependencies = {
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.38.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".uuid."1.10.0" = overridableMkRustCrate (profileName: rec {
    name = "uuid";
    version = "1.10.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "81dfa00651efa65069b0b6b651f4aaa31ba9e3c3ce0137aaad053604ee7e0314"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "rng" ]
      [ "std" ]
      [ "v4" ]
    ];
    dependencies = {
      getrandom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.15" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".vcpkg."0.2.15" = overridableMkRustCrate (profileName: rec {
    name = "vcpkg";
    version = "0.2.15";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "accd4ea62f7bb7a82fe23066fb0957d48ef677f6eeb8215f372f52e48bb32426"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.5" = overridableMkRustCrate (profileName: rec {
    name = "version_check";
    version = "0.9.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0b928f33d975fc6ad9f86c8f283853ad26bdd5b10b7f1542aa2fa15e2289105a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".void."1.0.2" = overridableMkRustCrate (profileName: rec {
    name = "void";
    version = "1.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6a02e4885ed3bc0f2de90ea6dd45ebcbb66dacffe03547fadbb0eeae2770887d"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic") "default")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/elastic" || rootFeatures' ? "store/elastic" || rootFeatures' ? "store/elasticsearch" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/elastic") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".walkdir."2.5.0" = overridableMkRustCrate (profileName: rec {
    name = "walkdir";
    version = "2.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "29790946404f91d9c5d06f9874efddea1dc06c5efe94541a7d6863108e3a5e4b"; };
    dependencies = {
      same_file = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".same-file."1.0.6" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "winapi_util" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-util."0.1.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".want."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "want";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bfa7760aed19e106de2c7c0b581b509f2f25d3dacaf737cb82ac61bc6d760b0e"; };
    dependencies = {
      try_lock = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".try-lock."0.2.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasi."0.11.0+wasi-snapshot-preview1" = overridableMkRustCrate (profileName: rec {
    name = "wasi";
    version = "0.11.0+wasi-snapshot-preview1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasite."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "wasite";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b8dad83b4f25e74f184f64c43b150b91efe7647395b42289f38e50566d82855b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.93" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen";
    version = "0.2.93";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a82edfc16a6c469f5f44dc7b571814045d60404b55a0ee849f9bcfa2e63dd9b5"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "spans" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      once_cell = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.20.1" { inherit profileName; }).out;
      wasm_bindgen_macro = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro."0.2.93" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-backend."0.2.93" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-backend";
    version = "0.2.93";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9de396da306523044d3302746f1208fa71d7532227f15e347e2d93e4145dd77b"; };
    features = builtins.concatLists [
      [ "spans" ]
    ];
    dependencies = {
      bumpalo = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.16.0" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.22" { inherit profileName; }).out;
      once_cell = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.20.1" { inherit profileName; }).out;
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
      wasm_bindgen_shared = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-shared."0.2.93" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.43" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-futures";
    version = "0.4.43";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "61e9300f63a621e96ed275155c108eb6f843b6a26d053f122ab69724559dc8ed"; };
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      js_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.70" { inherit profileName; }).out;
      wasm_bindgen = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.93" { inherit profileName; }).out;
      ${ if builtins.elem "atomics" hostPlatformFeatures then "web_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.70" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro."0.2.93" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-macro";
    version = "0.2.93";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "585c4c91a46b072c92e908d99cb1dcdf95c5218eeb6f3bf1efa991ee7a68cccf"; };
    features = builtins.concatLists [
      [ "spans" ]
    ];
    dependencies = {
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      wasm_bindgen_macro_support = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro-support."0.2.93" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro-support."0.2.93" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-macro-support";
    version = "0.2.93";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "afc340c74d9005395cf9dd098506f7f44e38f2b4a21c6aaacf9a105ea5e1e836"; };
    features = builtins.concatLists [
      [ "spans" ]
    ];
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
      wasm_bindgen_backend = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-backend."0.2.93" { inherit profileName; }).out;
      wasm_bindgen_shared = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-shared."0.2.93" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-shared."0.2.93" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-shared";
    version = "0.2.93";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c62a0a307cb4a311d3a07867860911ca130c3494e8c2719593806c08bc5d0484"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-streams."0.4.1" = overridableMkRustCrate (profileName: rec {
    name = "wasm-streams";
    version = "0.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4e072d4e72f700fb3443d8fe94a39315df013eef1104903cdb0a2abd322bbecd"; };
    dependencies = {
      futures_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" { inherit profileName; }).out;
      js_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.70" { inherit profileName; }).out;
      wasm_bindgen = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.93" { inherit profileName; }).out;
      wasm_bindgen_futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.43" { inherit profileName; }).out;
      web_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.70" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.70" = overridableMkRustCrate (profileName: rec {
    name = "web-sys";
    version = "0.3.70";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "26fdeaafd9bd129f65e7c031593c24d62186301e0c72c8978fa1678be7d532c0"; };
    features = builtins.concatLists [
      [ "AbortController" ]
      [ "AbortSignal" ]
      [ "Blob" ]
      [ "BlobPropertyBag" ]
      [ "Crypto" ]
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres") "Document")
      [ "Event" ]
      [ "EventTarget" ]
      [ "File" ]
      [ "FormData" ]
      [ "Headers" ]
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres") "Location")
      [ "MessageEvent" ]
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres") "Navigator")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres") "Node")
      [ "QueuingStrategy" ]
      [ "ReadableByteStreamController" ]
      [ "ReadableStream" ]
      [ "ReadableStreamByobReader" ]
      [ "ReadableStreamByobRequest" ]
      [ "ReadableStreamDefaultController" ]
      [ "ReadableStreamDefaultReader" ]
      [ "ReadableStreamGetReaderOptions" ]
      [ "ReadableStreamReadResult" ]
      [ "ReadableStreamReaderMode" ]
      [ "ReadableStreamType" ]
      [ "ReadableWritablePair" ]
      [ "Request" ]
      [ "RequestCredentials" ]
      [ "RequestInit" ]
      [ "RequestMode" ]
      [ "Response" ]
      [ "ServiceWorkerGlobalScope" ]
      [ "StreamPipeOptions" ]
      [ "TransformStream" ]
      [ "TransformStreamDefaultController" ]
      [ "Transformer" ]
      [ "UnderlyingSink" ]
      [ "UnderlyingSource" ]
      [ "Window" ]
      [ "Worker" ]
      [ "WorkerGlobalScope" ]
      [ "WritableStream" ]
      [ "WritableStreamDefaultController" ]
      [ "WritableStreamDefaultWriter" ]
    ];
    dependencies = {
      js_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.70" { inherit profileName; }).out;
      wasm_bindgen = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.93" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".webpki."0.22.4" = overridableMkRustCrate (profileName: rec {
    name = "webpki";
    version = "0.22.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ed63aea5ce73d0ff405984102c42de94fc55a6b75765d621c65262469b3c9b53"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "alloc")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "ring" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.17.8" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "untrusted" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".untrusted."0.9.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".webpki-roots."0.25.4" = overridableMkRustCrate (profileName: rec {
    name = "webpki-roots";
    version = "0.25.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5f20c57d8d7db6d3b86154206ae5d8fba62dd39573114de97c2cb0578251f8e1"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".webpki-roots."0.26.6" = overridableMkRustCrate (profileName: rec {
    name = "webpki-roots";
    version = "0.26.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "841c67bff177718f1d4dfefde8d8f0e78f9b6589319ba88312f567fc5841a958"; };
    dependencies = {
      pki_types = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pki-types."1.9.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".whatlang."0.16.4" = overridableMkRustCrate (profileName: rec {
    name = "whatlang";
    version = "0.16.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "471d1c1645d361eb782a1650b1786a8fb58dd625e681a04c09f5ff7c8764a7b0"; };
    dependencies = {
      hashbrown = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.14.5" { inherit profileName; }).out;
      once_cell = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.20.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".which."4.4.2" = overridableMkRustCrate (profileName: rec {
    name = "which";
    version = "4.4.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "87ba24419a2078cd2b0f2ede2691b6c66d8e47836da3b6db8265ebad47afbfc7"; };
    dependencies = {
      ${ if rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" then "either" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.13.0" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") && (hostPlatform.isWindows || hostPlatform.isUnix || hostPlatform.parsed.kernel.name == "redox") then "home" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".home."0.5.9" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") && hostPlatform.isWindows then "once_cell" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.20.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" then "rustix" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustix."0.38.37" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".whoami."1.5.2" = overridableMkRustCrate (profileName: rec {
    name = "whoami";
    version = "1.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "372d5b87f58ec45c384ba03563b03544dc5fadc3983e434b286913f5b4a9bb6d"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres") "default")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres") "web")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres") "web-sys")
    ];
    dependencies = {
      ${ if (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres") && hostPlatform.parsed.kernel.name == "redox" && !(hostPlatform.parsed.cpu.name == "wasm32") then "syscall" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.5.7" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres") && hostPlatform.parsed.cpu.name == "wasm32" && hostPlatform.parsed.kernel.name == "wasi" then "wasite" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasite."0.1.0" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/postgres" || rootFeatures' ? "store/deadpool-postgres" || rootFeatures' ? "store/postgres" || rootFeatures' ? "store/tokio-postgres" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/postgres") && hostPlatform.parsed.cpu.name == "wasm32" && !(hostPlatform.parsed.kernel.name == "wasi") then "web_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.70" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".widestring."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "widestring";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7219d36b6eac893fa81e84ebe06485e7dcbb616177469b142df14f1f4deb1311"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" = overridableMkRustCrate (profileName: rec {
    name = "winapi";
    version = "0.3.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419"; };
    features = builtins.concatLists [
      [ "consoleapi" ]
      [ "fileapi" ]
      [ "handleapi" ]
      [ "knownfolders" ]
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "namedpipeapi")
      [ "ntsecapi" ]
      [ "objbase" ]
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "processenv")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "processthreadsapi")
      [ "shlobj" ]
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "std")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "synchapi")
      [ "sysinfoapi" ]
      [ "winbase" ]
      [ "wincon" ]
      [ "winerror" ]
      [ "wtypesbase" ]
    ];
    dependencies = {
      ${ if hostPlatform.config == "i686-pc-windows-gnu" then "winapi_i686_pc_windows_gnu" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-i686-pc-windows-gnu."0.4.0" { inherit profileName; }).out;
      ${ if hostPlatform.config == "x86_64-pc-windows-gnu" then "winapi_x86_64_pc_windows_gnu" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-x86_64-pc-windows-gnu."0.4.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi-i686-pc-windows-gnu."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "winapi-i686-pc-windows-gnu";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi-util."0.1.9" = overridableMkRustCrate (profileName: rec {
    name = "winapi-util";
    version = "0.1.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cf221c93e13a30d793f7645a0e7762c55d169dbb0a49671918a2319d289b10bb"; };
    dependencies = {
      ${ if hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.59.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi-x86_64-pc-windows-gnu."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "winapi-x86_64-pc-windows-gnu";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows."0.52.0" = overridableMkRustCrate (profileName: rec {
    name = "windows";
    version = "0.52.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e48a53791691ab099e5e2ad123536d0fff50652600abaf43bbf952894110d0be"; };
    features = builtins.concatLists [
      [ "Win32" ]
      [ "Win32_Foundation" ]
      [ "Win32_System" ]
      [ "Win32_System_SystemInformation" ]
      [ "default" ]
    ];
    dependencies = {
      windows_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-core."0.52.0" { inherit profileName; }).out;
      windows_targets = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.52.6" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows-core."0.52.0" = overridableMkRustCrate (profileName: rec {
    name = "windows-core";
    version = "0.52.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "33ab640c8d7e35bf8ba19b884ba838ceb4fba93a4e8c65a9059d08afcfc683d9"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      windows_targets = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.52.6" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows-registry."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "windows-registry";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e400001bb720a623c1c69032f8e3e4cf09984deec740f007dd2b03ec864804b0"; };
    dependencies = {
      windows_result = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-result."0.2.0" { inherit profileName; }).out;
      windows_strings = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-strings."0.1.0" { inherit profileName; }).out;
      windows_targets = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.52.6" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows-result."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "windows-result";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1d1043d8214f791817bab27572aaa8af63732e11bf84aa21a45a78d6c317ae0e"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      windows_targets = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.52.6" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows-strings."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "windows-strings";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4cd9b125c486025df0eabcb585e62173c6c9eddcec5d117d3b6e8c30e2ee4d10"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      windows_result = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-result."0.2.0" { inherit profileName; }).out;
      windows_targets = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.52.6" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" = overridableMkRustCrate (profileName: rec {
    name = "windows-sys";
    version = "0.48.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9"; };
    features = builtins.concatLists [
      [ "Win32" ]
      [ "Win32_Foundation" ]
      [ "Win32_Networking" ]
      [ "Win32_Networking_WinSock" ]
      [ "Win32_Security" ]
      [ "Win32_Storage" ]
      [ "Win32_Storage_FileSystem" ]
      [ "Win32_System" ]
      [ "Win32_System_Console" ]
      [ "Win32_System_Diagnostics" ]
      [ "Win32_System_Diagnostics_Debug" ]
      [ "Win32_System_IO" ]
      [ "Win32_System_Pipes" ]
      [ "Win32_System_Registry" ]
      [ "Win32_System_SystemServices" ]
      [ "Win32_System_Threading" ]
      [ "Win32_System_Time" ]
      [ "Win32_System_WindowsProgramming" ]
      [ "default" ]
    ];
    dependencies = {
      windows_targets = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.48.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.52.0" = overridableMkRustCrate (profileName: rec {
    name = "windows-sys";
    version = "0.52.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "282be5f36a8ce781fad8c8ae18fa3f9beff57ec1b52cb3de0789201425d9a33d"; };
    features = builtins.concatLists [
      [ "Win32" ]
      [ "Win32_Foundation" ]
      (lib.optional (rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") "Win32_NetworkManagement")
      (lib.optional (rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") "Win32_NetworkManagement_IpHelper")
      [ "Win32_Networking" ]
      [ "Win32_Networking_WinSock" ]
      [ "Win32_Storage" ]
      [ "Win32_Storage_FileSystem" ]
      [ "Win32_System" ]
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" || rootFeatures' ? "tests/s3") "Win32_System_Com")
      [ "Win32_System_Console" ]
      (lib.optional (rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") "Win32_System_Diagnostics")
      (lib.optional (rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb") "Win32_System_Diagnostics_Debug")
      [ "Win32_System_IO" ]
      [ "Win32_System_ProcessStatus" ]
      [ "Win32_System_Threading" ]
      [ "Win32_System_WindowsProgramming" ]
      [ "Win32_UI" ]
      [ "Win32_UI_Input" ]
      [ "Win32_UI_Input_KeyboardAndMouse" ]
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/foundationdb" || rootFeatures' ? "mail-server/s3" || rootFeatures' ? "store/foundation" || rootFeatures' ? "store/foundationdb" || rootFeatures' ? "store/rust-s3" || rootFeatures' ? "store/s3" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/foundationdb" || rootFeatures' ? "tests/s3") "Win32_UI_Shell")
      [ "default" ]
    ];
    dependencies = {
      windows_targets = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.52.6" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.59.0" = overridableMkRustCrate (profileName: rec {
    name = "windows-sys";
    version = "0.59.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1e38bc4d79ed67fd075bcc251a1c39b32a1776bbe92e5bef1f0bf1f8c531853b"; };
    features = builtins.concatLists [
      [ "Win32" ]
      [ "Win32_Foundation" ]
      [ "Win32_Networking" ]
      [ "Win32_Networking_WinSock" ]
      [ "Win32_Security" ]
      [ "Win32_Security_Authentication" ]
      [ "Win32_Security_Authentication_Identity" ]
      [ "Win32_Security_Credentials" ]
      [ "Win32_Security_Cryptography" ]
      [ "Win32_Storage" ]
      [ "Win32_Storage_FileSystem" ]
      [ "Win32_System" ]
      [ "Win32_System_Console" ]
      [ "Win32_System_IO" ]
      [ "Win32_System_Memory" ]
      [ "Win32_System_SystemInformation" ]
      [ "default" ]
    ];
    dependencies = {
      windows_targets = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.52.6" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.48.5" = overridableMkRustCrate (profileName: rec {
    name = "windows-targets";
    version = "0.48.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9a2fa6e2155d7247be68c096456083145c183cbbbc2764150dda45a87197940c"; };
    dependencies = {
      ${ if hostPlatform.config == "aarch64-pc-windows-gnullvm" then "windows_aarch64_gnullvm" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_gnullvm."0.48.5" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.abi.name == "msvc" then "windows_aarch64_msvc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.48.5" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "i686" && hostPlatform.parsed.abi.name == "gnu" then "windows_i686_gnu" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.48.5" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "i686" && hostPlatform.parsed.abi.name == "msvc" then "windows_i686_msvc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.48.5" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.abi.name == "gnu" then "windows_x86_64_gnu" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.48.5" { inherit profileName; }).out;
      ${ if hostPlatform.config == "x86_64-pc-windows-gnullvm" then "windows_x86_64_gnullvm" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnullvm."0.48.5" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.abi.name == "msvc" then "windows_x86_64_msvc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.48.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.52.6" = overridableMkRustCrate (profileName: rec {
    name = "windows-targets";
    version = "0.52.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973"; };
    dependencies = {
      ${ if hostPlatform.config == "aarch64-pc-windows-gnullvm" then "windows_aarch64_gnullvm" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_gnullvm."0.52.6" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.abi.name == "msvc" then "windows_aarch64_msvc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.52.6" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "i686" && hostPlatform.parsed.abi.name == "gnu" then "windows_i686_gnu" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.52.6" { inherit profileName; }).out;
      ${ if hostPlatform.config == "i686-pc-windows-gnullvm" then "windows_i686_gnullvm" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnullvm."0.52.6" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "i686" && hostPlatform.parsed.abi.name == "msvc" then "windows_i686_msvc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.52.6" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.abi.name == "gnu" then "windows_x86_64_gnu" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.52.6" { inherit profileName; }).out;
      ${ if hostPlatform.config == "x86_64-pc-windows-gnullvm" then "windows_x86_64_gnullvm" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnullvm."0.52.6" { inherit profileName; }).out;
      ${ if (hostPlatform.parsed.cpu.name == "x86_64" || hostPlatform.parsed.cpu.name == "arm64ec") && hostPlatform.parsed.abi.name == "msvc" then "windows_x86_64_msvc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.52.6" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_gnullvm."0.48.5" = overridableMkRustCrate (profileName: rec {
    name = "windows_aarch64_gnullvm";
    version = "0.48.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2b38e32f0abccf9987a4e3079dfb67dcd799fb61361e53e2882c3cbaf0d905d8"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_gnullvm."0.52.6" = overridableMkRustCrate (profileName: rec {
    name = "windows_aarch64_gnullvm";
    version = "0.52.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.48.5" = overridableMkRustCrate (profileName: rec {
    name = "windows_aarch64_msvc";
    version = "0.48.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dc35310971f3b2dbbf3f0690a219f40e2d9afcf64f9ab7cc1be722937c26b4bc"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.52.6" = overridableMkRustCrate (profileName: rec {
    name = "windows_aarch64_msvc";
    version = "0.52.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.48.5" = overridableMkRustCrate (profileName: rec {
    name = "windows_i686_gnu";
    version = "0.48.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a75915e7def60c94dcef72200b9a8e58e5091744960da64ec734a6c6e9b3743e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.52.6" = overridableMkRustCrate (profileName: rec {
    name = "windows_i686_gnu";
    version = "0.52.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnullvm."0.52.6" = overridableMkRustCrate (profileName: rec {
    name = "windows_i686_gnullvm";
    version = "0.52.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.48.5" = overridableMkRustCrate (profileName: rec {
    name = "windows_i686_msvc";
    version = "0.48.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8f55c233f70c4b27f66c523580f78f1004e8b5a8b659e05a4eb49d4166cca406"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.52.6" = overridableMkRustCrate (profileName: rec {
    name = "windows_i686_msvc";
    version = "0.52.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.48.5" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_gnu";
    version = "0.48.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "53d40abd2583d23e4718fddf1ebec84dbff8381c07cae67ff7768bbf19c6718e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.52.6" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_gnu";
    version = "0.52.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnullvm."0.48.5" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_gnullvm";
    version = "0.48.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0b7b52767868a23d5bab768e390dc5f5c55825b6d30b86c844ff2dc7414044cc"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnullvm."0.52.6" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_gnullvm";
    version = "0.52.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.48.5" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_msvc";
    version = "0.48.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ed94fce61571a4006852b7389a063ab983c02eb1bb37b47f8272ce92d06d9538"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.52.6" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_msvc";
    version = "0.52.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winnow."0.6.20" = overridableMkRustCrate (profileName: rec {
    name = "winnow";
    version = "0.6.20";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "36c1fec1a2bb5866f07c25f68c26e565c4c200aebb96d7e55710c19d3e8ac49b"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "alloc")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "default")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" then "memchr" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winreg."0.50.0" = overridableMkRustCrate (profileName: rec {
    name = "winreg";
    version = "0.50.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "524e57b2c537c0f9b1e69f1965311ec12182b4122e45035b1508cd24d2adadb1"; };
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      windows_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".write16."1.0.0" = overridableMkRustCrate (profileName: rec {
    name = "write16";
    version = "1.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d1890f4022759daae28ed4fe62859b1236caebfc61ede2f63ed4e695f3f6d936"; };
    features = builtins.concatLists [
      [ "alloc" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".writeable."0.5.5" = overridableMkRustCrate (profileName: rec {
    name = "writeable";
    version = "0.5.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1e9df38ee2d2c3c5948ea468a8406ff0db0b29ae1ffde1bcf20ef305bcc95c51"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wyz."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "wyz";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "05f360fc0b24296329c78fda852a1e9ae82de9cf7b27dae4b7f62f118f77b9ed"; };
    dependencies = {
      tap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tap."1.0.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".x25519-dalek."2.0.1" = overridableMkRustCrate (profileName: rec {
    name = "x25519-dalek";
    version = "2.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c7e468321c81fb07fa7f4c636c3972b9100f0346e5b6a9f2bd0603a52f7ed277"; };
    features = builtins.concatLists [
      [ "static_secrets" ]
      [ "zeroize" ]
    ];
    dependencies = {
      curve25519_dalek = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".curve25519-dalek."4.1.3" { inherit profileName; }).out;
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.8.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".x509-parser."0.15.1" = overridableMkRustCrate (profileName: rec {
    name = "x509-parser";
    version = "0.15.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7069fba5b66b9193bd2c5d3d4ff12b839118f6bcbef5328efafafb5395cf63da"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      asn1_rs = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".asn1-rs."0.5.2" { inherit profileName; }).out;
      data_encoding = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".data-encoding."2.6.0" { inherit profileName; }).out;
      der_parser = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".der-parser."8.2.0" { inherit profileName; }).out;
      lazy_static = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.5.0" { inherit profileName; }).out;
      nom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".nom."7.1.3" { inherit profileName; }).out;
      oid_registry = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".oid-registry."0.6.1" { inherit profileName; }).out;
      rusticata_macros = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rusticata-macros."4.1.0" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.64" { inherit profileName; }).out;
      time = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".time."0.3.36" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".x509-parser."0.16.0" = overridableMkRustCrate (profileName: rec {
    name = "x509-parser";
    version = "0.16.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fcbc162f30700d6f3f82a24bf7cc62ffe7caea42c0b2cba8bf7f3ae50cf51f69"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      asn1_rs = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".asn1-rs."0.6.2" { inherit profileName; }).out;
      data_encoding = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".data-encoding."2.6.0" { inherit profileName; }).out;
      der_parser = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".der-parser."9.0.0" { inherit profileName; }).out;
      lazy_static = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.5.0" { inherit profileName; }).out;
      nom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".nom."7.1.3" { inherit profileName; }).out;
      oid_registry = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".oid-registry."0.7.1" { inherit profileName; }).out;
      rusticata_macros = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rusticata-macros."4.1.0" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.64" { inherit profileName; }).out;
      time = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".time."0.3.36" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".xml-rs."0.8.22" = overridableMkRustCrate (profileName: rec {
    name = "xml-rs";
    version = "0.8.22";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "af4e2e2f7cba5a093896c1e150fbfe177d1883e7448200efb81d40b9d339ef26"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".xxhash-rust."0.8.12" = overridableMkRustCrate (profileName: rec {
    name = "xxhash-rust";
    version = "0.8.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6a5cbf750400958819fb6178eaa83bee5cd9c29a26a40cc241df8c70fdd46984"; };
    features = builtins.concatLists [
      [ "xxh3" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".yasna."0.5.2" = overridableMkRustCrate (profileName: rec {
    name = "yasna";
    version = "0.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e17bb3549cc1321ae1296b9cdc2698e2b6cb1992adfa19a8c72e5b7a738f44cd"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
      [ "time" ]
    ];
    dependencies = {
      time = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".time."0.3.36" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".yoke."0.7.4" = overridableMkRustCrate (profileName: rec {
    name = "yoke";
    version = "0.7.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6c5b1314b079b0930c31e3af543d8ee1757b1951ae1e1565ec704403a7240ca5"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "derive" ]
      [ "zerofrom" ]
    ];
    dependencies = {
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.210" { inherit profileName; }).out;
      stable_deref_trait = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".stable_deref_trait."1.2.0" { inherit profileName; }).out;
      yoke_derive = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".yoke-derive."0.7.4" { profileName = "__noProfile"; }).out;
      zerofrom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zerofrom."0.1.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".yoke-derive."0.7.4" = overridableMkRustCrate (profileName: rec {
    name = "yoke-derive";
    version = "0.7.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "28cc31741b18cb6f1d5ff12f5b7523e3d6eb0852bbbad19d73905511d9849b95"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
      synstructure = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".synstructure."0.13.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".zerocopy."0.7.35" = overridableMkRustCrate (profileName: rec {
    name = "zerocopy";
    version = "0.7.35";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1b9b4fd18abc82b8136838da5d50bae7bdea537c574d8dc1a34ed098d6c166f0"; };
    features = builtins.concatLists [
      [ "byteorder" ]
      [ "default" ]
      [ "derive" ]
      [ "simd" ]
      [ "zerocopy-derive" ]
    ];
    dependencies = {
      byteorder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" { inherit profileName; }).out;
      zerocopy_derive = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".zerocopy-derive."0.7.35" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".zerocopy-derive."0.7.35" = overridableMkRustCrate (profileName: rec {
    name = "zerocopy-derive";
    version = "0.7.35";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fa4f8080344d4671fb4e831a13ad1e68092748387dfc4f55e356242fae12ce3e"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".zerofrom."0.1.4" = overridableMkRustCrate (profileName: rec {
    name = "zerofrom";
    version = "0.1.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "91ec111ce797d0e0784a1116d0ddcdbea84322cd79e5d5ad173daeba4f93ab55"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "derive" ]
    ];
    dependencies = {
      zerofrom_derive = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".zerofrom-derive."0.1.4" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".zerofrom-derive."0.1.4" = overridableMkRustCrate (profileName: rec {
    name = "zerofrom-derive";
    version = "0.1.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0ea7b4a3637ea8669cedf0f1fd5c286a17f3de97b8dd5a70a6c167a1730e63a5"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
      synstructure = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".synstructure."0.13.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".zeroize."1.8.1" = overridableMkRustCrate (profileName: rec {
    name = "zeroize";
    version = "1.8.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ced3678a2879b30306d323f4542626697a464a97c0a07c9aebf7ebca65cd4dde"; };
    features = builtins.concatLists [
      [ "aarch64" ]
      [ "alloc" ]
      [ "default" ]
      [ "zeroize_derive" ]
    ];
    dependencies = {
      zeroize_derive = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize_derive."1.4.2" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".zeroize_derive."1.4.2" = overridableMkRustCrate (profileName: rec {
    name = "zeroize_derive";
    version = "1.4.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ce36e65b0d2999d2aafac989fb249189a141aee1f53c612c1f37d72631959f69"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".zerovec."0.10.4" = overridableMkRustCrate (profileName: rec {
    name = "zerovec";
    version = "0.10.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "aa2b893d79df23bfb12d5461018d408ea19dfafe76c2c7ef6d4eba614f8ff079"; };
    features = builtins.concatLists [
      [ "derive" ]
      [ "yoke" ]
    ];
    dependencies = {
      yoke = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".yoke."0.7.4" { inherit profileName; }).out;
      zerofrom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zerofrom."0.1.4" { inherit profileName; }).out;
      zerovec_derive = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".zerovec-derive."0.10.3" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".zerovec-derive."0.10.3" = overridableMkRustCrate (profileName: rec {
    name = "zerovec-derive";
    version = "0.10.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6eafa6dfb17584ea3e2bd6e76e0cc15ad7af12b09abdd1ca55961bed9b1063c6"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.86" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.37" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.79" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".zip."2.2.0" = overridableMkRustCrate (profileName: rec {
    name = "zip";
    version = "2.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dc5e4288ea4057ae23afc69a4472434a87a2495cafce6632fd1c4ec9f5cf3494"; };
    features = builtins.concatLists [
      [ "_deflate-any" ]
      [ "aes" ]
      [ "aes-crypto" ]
      [ "bzip2" ]
      [ "constant_time_eq" ]
      [ "default" ]
      [ "deflate" ]
      [ "deflate-flate2" ]
      [ "deflate-zopfli" ]
      [ "deflate64" ]
      [ "flate2" ]
      [ "hmac" ]
      [ "lzma" ]
      [ "lzma-rs" ]
      [ "pbkdf2" ]
      [ "rand" ]
      [ "sha1" ]
      [ "time" ]
      [ "xz" ]
      [ "zeroize" ]
      [ "zopfli" ]
      [ "zstd" ]
    ];
    dependencies = {
      aes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aes."0.8.4" { inherit profileName; }).out;
      ${ if false then "arbitrary" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".arbitrary."1.3.2" { inherit profileName; }).out;
      bzip2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bzip2."0.4.4" { inherit profileName; }).out;
      constant_time_eq = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".constant_time_eq."0.3.1" { inherit profileName; }).out;
      crc32fast = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc32fast."1.4.2" { inherit profileName; }).out;
      ${ if (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l") && hostPlatform.parsed.cpu.bits == 32 || hostPlatform.parsed.cpu.name == "mips" || hostPlatform.parsed.cpu.name == "powerpc" then "crossbeam_utils" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.20" { inherit profileName; }).out;
      deflate64 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".deflate64."0.1.9" { inherit profileName; }).out;
      displaydoc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".displaydoc."0.2.5" { profileName = "__noProfile"; }).out;
      flate2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".flate2."1.0.34" { inherit profileName; }).out;
      hmac = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hmac."0.12.1" { inherit profileName; }).out;
      indexmap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."2.6.0" { inherit profileName; }).out;
      lzma_rs = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lzma-rs."0.3.0" { inherit profileName; }).out;
      memchr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.4" { inherit profileName; }).out;
      pbkdf2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pbkdf2."0.12.2" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      sha1 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha1."0.10.6" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.64" { inherit profileName; }).out;
      time = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".time."0.3.36" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.8.1" { inherit profileName; }).out;
      zopfli = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zopfli."0.8.1" { inherit profileName; }).out;
      zstd = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zstd."0.13.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".zopfli."0.8.1" = overridableMkRustCrate (profileName: rec {
    name = "zopfli";
    version = "0.8.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e5019f391bac5cf252e93bbcc53d039ffd62c7bfb7c150414d61369afe57e946"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "gzip" ]
      [ "std" ]
      [ "zlib" ]
    ];
    dependencies = {
      bumpalo = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.16.0" { inherit profileName; }).out;
      crc32fast = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc32fast."1.4.2" { inherit profileName; }).out;
      lockfree_object_pool = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lockfree-object-pool."0.1.6" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.22" { inherit profileName; }).out;
      once_cell = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.20.1" { inherit profileName; }).out;
      simd_adler32 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".simd-adler32."0.3.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".zstd."0.13.2" = overridableMkRustCrate (profileName: rec {
    name = "zstd";
    version = "0.13.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fcf2b778a664581e31e389454a7072dab1647606d44f7feea22cd5abb9c9f3f9"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "arrays")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "default")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "legacy")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "zdict_builder")
    ];
    dependencies = {
      zstd_safe = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zstd-safe."7.2.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".zstd-safe."7.2.1" = overridableMkRustCrate (profileName: rec {
    name = "zstd-safe";
    version = "7.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "54a3ab4db68cea366acc5c897c7b4d4d1b8994a9cd6e6f841f8964566a419059"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "arrays")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "legacy")
      [ "std" ]
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql") "zdict_builder")
    ];
    dependencies = {
      zstd_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zstd-sys."2.0.13+zstd.1.5.6" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".zstd-sys."2.0.13+zstd.1.5.6" = overridableMkRustCrate (profileName: rec {
    name = "zstd-sys";
    version = "2.0.13+zstd.1.5.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "38ff0f21cfee8f97d94cef41359e0c89aa6113028ab0291aa8ca0038995a95aa"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/rocks") "default")
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" || rootFeatures' ? "tests/rocks") "legacy")
      [ "std" ]
      (lib.optional (rootFeatures' ? "mail-server/default" || rootFeatures' ? "mail-server/mysql" || rootFeatures' ? "mail-server/rocks" || rootFeatures' ? "store/mysql" || rootFeatures' ? "store/mysql_async" || rootFeatures' ? "store/rocks" || rootFeatures' ? "store/rocksdb" || rootFeatures' ? "tests/default" || rootFeatures' ? "tests/mysql" || rootFeatures' ? "tests/rocks") "zdict_builder")
    ];
    buildDependencies = {
      cc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.1.25" { profileName = "__noProfile"; }).out;
      pkg_config = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.31" { profileName = "__noProfile"; }).out;
    };
  });
  
}
